{"version":3,"sources":["skylark-d3-all.js"],"names":["define","obj1","path","obj2","split","length","ns","i","name","_attach","skylark","attach","obj","main","ascending","a","b","NaN","bisector","compare","f","d","x","left","lo","hi","mid","right","ascendingBisect","bisectRight","bisectLeft","pair","number","variance","values","valueof","value","delta","n","m","mean","sum","isNaN","deviation","array","v","Math","sqrt","extent","min","max","Array","prototype","slice","map","constant","identity","sequence","start","stop","step","arguments","ceil","range","e10","e5","e2","ticks","count","reverse","tickIncrement","isFinite","floor","power","log","LN10","error","pow","tickStep","step0","abs","step1","thresholdSturges","LN2","threshold","p","i0","value0","value1","merge","arrays","merged","j","transpose","matrix","row","slice$1","identity$1","top","bottom","epsilon","translateX","translateY","y","entering","this","__axis","axis","orient","scale","tickArguments","tickValues","tickFormat","tickSizeInner","tickSizeOuter","tickPadding","k","transform","context","apply","domain","format","spacing","range0","range1","position","bandwidth","offset","round","copy","selection","selectAll","data","tick","order","tickExit","exit","tickEnter","enter","append","attr","line","select","text","insert","transition","getAttribute","parentNode","remove","filter","each","_","call","tickSize","noop","dispatch","t","test","Error","Dispatch","get","type","c","set","callback","concat","push","constructor","on","typename","types","T","trim","indexOf","hasOwnProperty","that","args","xhtml","namespaces","svg","xlink","xml","xmlns","namespace","prefix","space","local","creator","fullname","ownerDocument","createElementNS","document","uri","namespaceURI","documentElement","createElement","none","selector","querySelector","empty","selectorAll","querySelectorAll","matcher","matches","sparse","update","EnterNode","parent","datum","_next","_parent","__data__","appendChild","child","insertBefore","next","keyPrefix","bindIndex","group","node","groupLength","dataLength","bindKey","key","keyValue","nodeByKeyValue","keyValues","ascending$1","defaultView","styleValue","style","getPropertyValue","getComputedStyle","classArray","string","classList","ClassList","_node","_names","classedAdd","names","list","add","classedRemove","textRemove","textContent","htmlRemove","innerHTML","raise","nextSibling","lower","previousSibling","firstChild","constantNull","removeChild","selection_cloneShallow","clone","cloneNode","selection_cloneDeep","setAttribute","join","splice","contains","filterEvents","exports","event","element","mouseenter","mouseleave","filterContextListener","listener","index","contextListener","related","relatedTarget","compareDocumentPosition","event1","event0","onRemove","__on","o","removeEventListener","capture","onAdd","wrap","addEventListener","customEvent","sourceEvent","dispatchEvent","params","window","CustomEvent","createEvent","initEvent","bubbles","cancelable","detail","root","Selection","groups","parents","_groups","_parents","subgroups","subnode","subgroup","match","size","bind","enterGroup","updateGroup","exitGroup","previous","i1","_enter","_exit","onenter","onupdate","onexit","groups0","groups1","m0","m1","merges","group0","group1","sort","compareNode","sortgroups","sortgroup","nodes","getAttributeNS","removeAttributeNS","removeAttribute","setAttributeNS","priority","removeProperty","setProperty","property","classed","html","create","before","deep","typenames","parseTypenames$1","nextId","Local","toString","source","current","point","ownerSVGElement","createSVGPoint","clientX","clientY","matrixTransform","getScreenCTM","inverse","rect","getBoundingClientRect","clientLeft","clientTop","mouse","changedTouches","touch","touches","identifier","nopropagation","stopImmediatePropagation","noevent","preventDefault","dragDisable","view","__noselect","MozUserSelect","yesdrag","noclick","setTimeout","constant$2","DragEvent","target","subject","id","active","dx","dy","defaultFilter","ctrlKey","button","defaultContainer","defaultSubject","defaultTouchable","navigator","maxTouchPoints","factory","extend","definition","Object","Color","brighter","reI","reN","reP","reHex","reRgbInteger","RegExp","reRgbPercent","reRgbaInteger","reRgbaPercent","reHslPercent","reHslaPercent","named","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","color_formatHex","rgb","formatHex","color_formatRgb","formatRgb","color","l","toLowerCase","exec","parseInt","rgbn","Rgb","rgba","hsla","r","g","rgbConvert","opacity","rgb_formatHex","hex","rgb_formatRgb","h","s","Hsl","hslConvert","hsl","hsl2rgb","m2","channels","assign","displayable","formatHsl","darker","deg2rad","PI","rad2deg","Xn","Yn","Zn","t0","t1","t2","t3","labConvert","Lab","Hcl","hcl2lab","z","rgb2lrgb","xyz2lab","lab","lab2xyz","lrgb2rgb","hclConvert","atan2","hcl","cos","sin","A","B","C","D","E","ED","EB","BC_DA","cubehelix","Cubehelix","bl","cubehelixConvert","basis","v0","v1","v2","v3","basis$1","basisClosed","constant$3","linear","hue","gamma","nogamma","exponential","cosh","sinh","interpolateRgb","rgbGamma","rgb$1","end","rgbSpline","spline","colors","rgbBasis","rgbBasisClosed","numberArray","isNumberArray","ArrayBuffer","isView","DataView","genericArray","nb","na","interpolateValue","date","Date","setTime","interpolateNumber","object","reA","reB","interpolateString","am","bm","bs","bi","lastIndex","q","one","zero","isArray","valueOf","interpolateRound","cssNode","cssRoot","cssView","svgNode","degrees","identity$2","rotate","skewX","scaleX","scaleY","decompose","e","atan","interpolateTransform","parse","pxComma","pxParen","degParen","pop","xa","ya","xb","yb","translate","interpolateTransformCss","interpolateTransformSvg","baseVal","consolidate","rho","SQRT2","rho2","rho4","epsilon2","exp","interpolateZoom","p0","p1","S","ux0","uy0","w0","ux1","uy1","w1","d2","d1","b0","b1","r0","r1","coshr0","u","duration","hsl$1","hsl$2","hslLong","hcl$1","hcl$2","hclLong","cubehelix$1","cubehelixGamma","cubehelix$2","cubehelixLong","taskHead","taskTail","frame","timeout","interval","pokeDelay","clockLast","clockNow","clockSkew","clock","performance","now","setFrame","requestAnimationFrame","clearNow","Timer","_call","_time","timer","delay","time","restart","timerFlush","wake","Infinity","sleep","nap","poke","clearTimeout","clearInterval","setInterval","timeout$1","elapsed","TypeError","emptyOn","emptyTween","CREATED","SCHEDULED","STARTING","STARTED","RUNNING","ENDING","ENDED","schedule","timing","schedules","__transition","self","tween","state","ease","create$1","init","get$1","set$1","interrupt","tweenValue","_id","interpolate","Selection$1","styleRemove$1","Transition","_name","newId","selection_prototype","quadInOut","cubicInOut","children","inherit","id0","id1","on0","on1","sit","every","onFunction","attrTween","string00","string10","interpolate0","string0","string1","_value","attrInterpolateNS","attrInterpolate","styleTween","styleNull","styleFunction$1","listener0","undefined","styleMaybeRemove","styleConstant$1","styleInterpolate","textFunction$1","textConstant$1","textTween","textInterpolate","tween0","tween1","easeConstant","Promise","resolve","reject","cancel","polyIn","custom","exponent","polyOut","polyInOut","pi","halfPi","sinInOut","expInOut","circleInOut","b2","b3","b4","b5","b6","b7","b8","b9","bounceOut","backIn","overshoot","backOut","backInOut","tau","elasticIn","asin","amplitude","period","elasticOut","elasticInOut","defaultTiming","root$1","constant$4","nopropagation$1","noevent$1","MODE_DRAG","MODE_SPACE","MODE_HANDLE","MODE_CENTER","number1","number2","X","handles","input","output","xy","Y","XY","cursors","overlay","w","nw","ne","se","sw","flipX","flipY","signsX","signsY","defaultFilter$1","defaultExtent","hasAttribute","viewBox","width","height","defaultTouchable$1","local$1","__brush","brush$1","dim","touchending","touchable","keys","listeners","handleSize","brush","initialize","handle","redraw","started","touchmoved","touchended","emitter","clean","Emitter","n0","n1","e0","e1","s0","s1","moving","lockX","lockY","mode","metaKey","altKey","signX","signY","W","N","shifting","shiftKey","pointer","point0","emit","beforestart","moved","ended","keyCode","move","point1","selection0","selection1","clear","starting","keyModifiers","pi$1","halfPi$1","tau$1","max$1","slice$2","constant$5","pi$2","tau$2","tauEpsilon","Path","_x0","_y0","_x1","_y1","defaultSource","defaultTarget","defaultRadius","radius","defaultStartAngle","startAngle","defaultEndAngle","endAngle","moveTo","closePath","lineTo","quadraticCurveTo","x1","y1","bezierCurveTo","x2","y2","arcTo","x0","y0","x21","y21","x01","y01","l01_2","x20","y20","l21_2","l20_2","l21","l01","acos","t01","t21","arc","a0","a1","ccw","cw","da","Map","map$1","createObject","setObject","createMap","setMap","Set","has","entries","proto","set$2","array$2","slice$3","ascending$2","constant$6","ring","hole","ringContains","xi","yi","pj","xj","yj","segmentContains","collinear","noop$1","cases","contours","smooth","smoothLinear","tz","contour","polygons","holes","fragmentByStart","fragmentByEnd","forEach","stitch","startIndex","endIndex","unshift","isorings","area","polygon","coordinates","xt","yt","_0","_1","thresholds","blurX","sr","blurY","defaultX","defaultY","defaultWeight","EOL","EOF","QUOTE","NEWLINE","RETURN","objectConverter","columns","Function","JSON","stringify","inferColumns","rows","columnSet","column","pad","formatDate","year","hours","getUTCHours","minutes","getUTCMinutes","seconds","getUTCSeconds","milliseconds","getUTCMilliseconds","getUTCFullYear","getUTCMonth","getUTCDate","dsvFormat","delimiter","reFormat","DELIMITER","charCodeAt","parseRows","I","eof","eol","token","replace","preformatBody","formatValue","formatRow","convert","customConverter","formatBody","formatRows","csv","csvParse","csvParseRows","csvFormat","csvFormatBody","csvFormatRows","csvFormatRow","csvFormatValue","tsv","tsvParse","tsvParseRows","tsvFormat","tsvFormatBody","tsvFormatRows","tsvFormatRow","tsvFormatValue","fixtz","getHours","responseBlob","response","ok","status","statusText","blob","responseArrayBuffer","arrayBuffer","responseText","fetch","then","dsvParse","csv$1","tsv$1","responseJson","json","parser","DOMParser","parseFromString","constant$7","jiggle","random","tree","xm","ym","xp","yp","_root","leaf","_x","_y","Quad","defaultX$1","defaultY$1","quadtree","Quadtree","addAll","leaf_copy","treeProto","vx","vy","find","nodeById","nodeId","x$1","y$1","cover","xz","yz","visit","x3","y3","quads","retainer","removeAll","visitAfter","initialRadius","initialAngle","formatDecimal","toExponential","coefficient","exponent$1","prefixExponent","re","formatSpecifier","specifier","FormatSpecifier","fill","align","sign","symbol","comma","precision","formatRounded","formatTypes","%","toFixed","toPrecision","toUpperCase","identity$3","locale","map$2","prefixes","formatLocale","grouping","thousands","Number","substring","currencyPrefix","currency","currencySuffix","decimal","numerals","formatNumerals","String","percent","minus","nan","newFormat","suffix","formatType","maybeSuffix","valuePrefix","valueSuffix","valueNegative","out","formatTrim","padding","formatPrefix","defaultLocale","precisionFixed","precisionPrefix","precisionRound","adder","Adder","reset","add$1","temp","bv","av","epsilon$2","epsilon2$1","pi$3","halfPi$2","quarterPi","tau$3","degrees$1","radians","cos$1","sin$1","haversin","noop$2","streamGeometry","geometry","stream","streamGeometryType","streamObjectType","Feature","FeatureCollection","features","Sphere","sphere","Point","MultiPoint","LineString","streamLine","MultiLineString","Polygon","streamPolygon","MultiPolygon","GeometryCollection","geometries","closed","coordinate","lineStart","lineEnd","polygonStart","polygonEnd","geoStream","lambda00","phi00","lambda0","cosPhi0","sinPhi0","areaRingSum","areaSum","areaStream","areaRingStart","areaRingEnd","areaRing","areaPointFirst","areaPoint","lambda","phi","dLambda","sdLambda","adLambda","cosPhi","sinPhi","spherical","cartesian","cartesianDot","cartesianCross","cartesianAddInPlace","cartesianScale","vector","cartesianNormalizeInPlace","lambda0$1","phi0","lambda1","phi1","lambda2","lambda00$1","phi00$1","ranges","W0","W1","X0","Y0","Z0","X1","Y1","Z1","X2","Y2","Z2","lambda00$2","phi00$2","z0","deltaSum","boundsStream","boundsPoint","boundsLineStart","boundsLineEnd","boundsRingPoint","boundsRingStart","boundsRingEnd","linePoint","normal","equatorial","inflection","phii","lambdai","antimeridian","angle","rangeCompare","rangeContains","centroidStream","centroidPoint","centroidLineStart","centroidLineEnd","centroidRingStart","centroidRingEnd","centroidPointCartesian","centroidLinePointFirst","centroidLinePoint","centroidRingPointFirst","centroidRingPoint","cx","cy","cz","constant$8","compose","invert","rotationIdentity","rotateRadians","deltaLambda","deltaPhi","deltaGamma","rotationLambda","rotationPhiGamma","forwardRotationLambda","rotation","cosDeltaPhi","sinDeltaPhi","cosDeltaGamma","sinDeltaGamma","forward","circleStream","direction","cosRadius","sinRadius","circleRadius","clipBuffer","lines","rejoin","shift","result","pointEqual","Intersection","points","other","entry","clipRejoin","segments","compareIntersection","startInside","clip","segment","link$1","isSubject","sum$1","longitude","polygonContains","winding","sinPhi1","cosPhi1","absDelta","intersection","phiArc","pointVisible","clipLine","sink","ringBuffer","ringSink","polygonStarted","pointRing","ringStart","ringEnd","pointLine","ringSegments","validSegment","clipAntimeridian","sign0","sign1","sinLambda0Lambda1","clipAntimeridianIntersect","from","to","clipCircle","cr","smallRadius","notHemisphere","visible","intersect","two","pa","pb","n2","n2n2","n1n2","determinant","c1","c2","n1xn2","uu","polar","meridian","q1","code","c0","v00","point2","clipMax","clipMin","clipRectangle","corner","comparePoint","ca","cb","x__","y__","v__","x_","y_","v_","first","activeStream","bufferStream","clipStream","polygonInside","cleanInside","ax","ay","bx","by","lambda0$2","sinPhi0$1","cosPhi0$1","lengthSum","lengthStream","lengthPointFirst","lengthLineEnd","lengthPoint","cosDelta","sinDelta","length$1","object$1","distance","containsObjectType","containsGeometry","containsGeometryType","containsPoint","containsLine","containsPolygon","ao","bo","ab","ringRadians","pointRadians","graticuleX","graticuleY","graticule","DX","DY","outline","extentMajor","extentMinor","stepMajor","stepMinor","identity$4","x00","y00","x0$1","y0$1","areaSum$1","areaRingSum$1","areaStream$1","areaRingStart$1","areaRingEnd$1","areaPointFirst$1","areaPoint$1","x0$2","y0$2","boundsStream$1","bounds","x00$1","y00$1","x0$3","y0$3","X0$1","Y0$1","Z0$1","X1$1","Y1$1","Z1$1","X2$1","Y2$1","Z2$1","centroidStream$1","centroidPoint$1","centroidLineStart$1","centroidLineEnd$1","centroidRingStart$1","centroidRingEnd$1","centroid","centroidPointFirstLine","centroidPointLine","centroidPointFirstRing","centroidPointRing","PathContext","_context","_radius","pointRadius","_line","_point","lengthRing","x00$2","y00$2","x0$4","y0$4","lengthSum$1","lengthStream$1","lengthPointFirst$1","lengthPoint$1","PathString","_string","circle$1","transformer","methods","TransformStream","fit","projection","fitBounds","clipExtent","fitExtent","fitSize","fitWidth","fitHeight","_circle","maxDepth","cosMinDistance","resample","project","delta2","resampleLineTo","depth","phi2","dx2","dy2","dz","a00","b00","c00","resampleStream","ringPoint","resample$1","resampleNone","transformRadians","scaleTranslateRotate","alpha","cosAlpha","sinAlpha","ai","ci","fi","projectionMutator","projectAt","projectResample","projectTransform","projectRotateTransform","cache","cacheStream","theta","preclip","postclip","recenter","center","transformRotate","clipAngle","conicProjection","parallels","conicEqualAreaRaw","sy0","cylindricalEqualAreaRaw","r0y","conicEqualArea","albers","azimuthalRaw","azimuthalInvert","sc","cc","azimuthalEqualAreaRaw","cxcy","azimuthalEquidistantRaw","mercatorRaw","mercatorProjection","reclip","tany","conicConformalRaw","cy0","fy","equirectangularRaw","conicEquidistantRaw","gy","nx","A1","A2","A3","A4","M","equalEarthRaw","l2","l6","gnomonicRaw","scaleTranslate$1","kx","ky","tx","ty","naturalEarth1Raw","phi4","orthographicRaw","stereographicRaw","transverseMercatorRaw","defaultSeparation","meanXReduce","maxYReduce","hierarchy","childs","Node","valued","defaultChildren","eachBefore","computeHeight","copyData","eachAfter","ancestor","aNodes","ancestors","bNodes","leastCommonAncestor","descendants","leaves","links","slice$4","enclose","circles","shuffle$1","enclosesWeak","encloseBasis","extendBasis","enclosesWeakAll","enclosesNot","encloseBasis2","encloseBasis3","dr","r2","r21","r3","a2","a3","c3","d3","place","intersects","score","Node$1","circle","packEnclose","aa","sj","sk","pack","required","constantZero","constant$9","defaultRadius$1","radiusLeaf","packChildren","translateChild","roundNode","treemapDice","keyPrefix$1","preroot","ambiguous","defaultId","defaultParentId","parentId","defaultSeparation$1","nextLeft","nextRight","moveSubtree","wm","wp","change","nextAncestor","vim","TreeNode","treemapSlice","squarifyRatio","ratio","nodeValue","sumValue","minValue","maxValue","newRatio","minRatio","beta","dice","squarify","resquarify","_squarify","lexicographicOrder","computeUpperHullIndexes","indexes","defaultSource$1","uniform","sourceRandomUniform","randomUniform","sourceRandomNormal","randomNormal","mu","sigma","logNormal","sourceRandomLogNormal","randomLogNormal","irwinHall","sourceRandomIrwinHall","randomIrwinHall","bates","sourceRandomBates","randomBates","exponential$1","sourceRandomExponential","randomExponential","initRange","initInterpolator","interpolator","array$3","map$3","slice$5","implicit","ordinal","unknown","band","ordinalRange","paddingInner","paddingOuter","rescale","rangeRound","number$2","unit","identity$6","normalize","clamper","bimap","d0","polymap","clamp","transformer$1","untransform","piecewise","continuous","linearish","nice","transformLog","transformExp","transformLogn","transformExpn","pow10","reflect","loggish","logs","pows","base","log10","log2","logp","powp","transformSymlog","log1p","transformSymexp","expm1","symlogish","transformPow","transformSqrt","transformSquare","powish","pow$1","t0$1","t1$1","newInterval","floori","offseti","field","millisecond","durationMinute","durationWeek","second","getMilliseconds","minute","getSeconds","getMinutes","hour","day","setHours","setDate","getDate","getTimezoneOffset","days","weekday","getDay","sunday","monday","tuesday","wednesday","thursday","friday","saturday","sundays","mondays","tuesdays","wednesdays","thursdays","fridays","saturdays","month","setMonth","getMonth","getFullYear","months","setFullYear","years","utcMinute","setUTCSeconds","utcMinutes","utcHour","setUTCMinutes","utcHours","utcDay","setUTCHours","setUTCDate","utcDays","utcWeekday","getUTCDay","utcSunday","utcMonday","utcTuesday","utcWednesday","utcThursday","utcFriday","utcSaturday","utcSundays","utcMondays","utcTuesdays","utcWednesdays","utcThursdays","utcFridays","utcSaturdays","utcMonth","setUTCMonth","utcMonths","utcYear","setUTCFullYear","utcYears","localDate","H","L","utcDate","UTC","newDate","formatLocale$1","locale_dateTime","dateTime","locale_date","locale_time","locale_periods","periods","locale_weekdays","locale_shortWeekdays","shortDays","locale_months","locale_shortMonths","shortMonths","periodRe","formatRe","periodLookup","formatLookup","weekdayRe","weekdayLookup","shortWeekdayRe","shortWeekdayLookup","monthRe","monthLookup","shortMonthRe","shortMonthLookup","formats","formatDayOfMonth","formatMicroseconds","formatHour24","formatHour12","formatDayOfYear","formatMilliseconds","formatMonthNumber","formatMinutes","Q","formatUnixTimestamp","formatUnixTimestampSeconds","formatSeconds","formatWeekdayNumberMonday","U","formatWeekNumberSunday","V","formatWeekNumberISO","formatWeekdayNumberSunday","formatWeekNumberMonday","formatYear$1","formatFullYear","Z","formatZone","formatLiteralPercent","utcFormats","formatUTCDayOfMonth","formatUTCMicroseconds","formatUTCHour24","formatUTCHour12","formatUTCDayOfYear","formatUTCMilliseconds","formatUTCMonthNumber","formatUTCMinutes","formatUTCSeconds","formatUTCWeekdayNumberMonday","formatUTCWeekNumberSunday","formatUTCWeekNumberISO","formatUTCWeekdayNumberSunday","formatUTCWeekNumberMonday","formatUTCYear","formatUTCFullYear","formatUTCZone","parses","parseSpecifier","parseDayOfMonth","parseMicroseconds","parseHour24","parseDayOfYear","parseMilliseconds","parseMonthNumber","parseMinutes","parseQuarter","parseUnixTimestamp","parseUnixTimestampSeconds","parseSeconds","parseWeekdayNumberMonday","parseWeekNumberSunday","parseWeekNumberISO","parseWeekdayNumberSunday","parseWeekNumberMonday","parseYear","parseFullYear","parseZone","parseLiteralPercent","pads","charAt","newParse","week","day$1","utcFormat","utcParse","locale$1","-","0","numberRe","percentRe","requoteRe","pad$1","requote","dow","defaultLocale$1","timeFormat","timeParse","formatIso","toISOString","parseIso","durationSecond$1","durationMinute$1","durationHour$1","durationDay$1","durationWeek$1","durationMonth","durationYear","date$1","number$3","calendar","formatMillisecond","formatSecond","formatMinute","formatHour","formatDay","formatWeek","formatMonth","formatYear","tickIntervals","tickInterval","transformer$2","k10","copy$1","sequentialPow","transformer$3","k21","divergingPow","category10","Accent","Dark2","Paired","Pastel1","Pastel2","Set1","Set2","Set3","Tableau10","ramp","scheme","BrBG","scheme$1","PRGn","scheme$2","PiYG","scheme$3","PuOr","scheme$4","RdBu","scheme$5","RdGy","scheme$6","RdYlBu","scheme$7","RdYlGn","scheme$8","Spectral","scheme$9","BuGn","scheme$a","BuPu","scheme$b","GnBu","scheme$c","OrRd","scheme$d","PuBuGn","scheme$e","PuBu","scheme$f","PuRd","scheme$g","RdPu","scheme$h","YlGnBu","scheme$i","YlGn","scheme$j","YlOrBr","scheme$k","YlOrRd","scheme$l","Blues","scheme$m","Greens","scheme$n","Greys","scheme$o","Purples","scheme$p","Reds","scheme$q","Oranges","cubehelix$3","warm","cool","c$1","pi_1_3","pi_2_3","ramp$1","viridis","magma","inferno","plasma","constant$b","abs$1","atan2$1","cos$2","max$2","min$1","sin$2","sqrt$2","epsilon$3","pi$4","halfPi$3","tau$4","asin$1","arcInnerRadius","innerRadius","arcOuterRadius","outerRadius","arcStartAngle","arcEndAngle","arcPadAngle","padAngle","cornerTangents","rc","ox","oy","x11","y11","x10","y10","cx0","cx1","cy1","dx0","dy0","dx1","dy1","Linear","curveLinear","x$3","y$3","defined","curve","buffer","defined0","area$3","x0z","y0z","areaStart","areaEnd","arealine","lineX0","lineY0","lineY1","lineX1","descending$1","identity$8","curveRadialLinear","curveRadial","Radial","_curve","radial","lineRadial","lineRadial$1","areaRadial","lineStartAngle","lineEndAngle","lineInnerRadius","lineOuterRadius","pointRadial","slice$6","linkSource","linkTarget","link$2","link","argv","curveHorizontal","curveVertical","curveRadial$1","p2","p3","circle$2","draw","cross$2","tan30","tan30_2","diamond","kr","star","square","sqrt3","triangle","wye","symbols","noop$3","point$2","Basis","BasisClosed","BasisOpen","Bundle","_basis","_beta","_x2","_x3","_x4","_y2","_y3","_y4","bundle","point$3","_k","Cardinal","tension","cardinal","CardinalClosed","_x5","_y5","cardinalClosed","CardinalOpen","cardinalOpen","point$4","_l01_a","_l01_2a","_l12_a","_l12_2a","_l23_a","_l23_2a","CatmullRom","_alpha","x23","y23","catmullRom","CatmullRomClosed","catmullRomClosed","CatmullRomOpen","catmullRomOpen","LinearClosed","sign$1","slope3","h0","h1","slope2","point$5","MonotoneX","MonotoneY","ReflectContext","Natural","controlPoints","Step","_t","none$1","series","none$2","stackValue","appearance","peaks","peak","vi","vj","ascending$3","sums","sum$2","constant$c","x$4","y$4","RedBlackTree","RedBlackNode","R","P","RedBlackRotateLeft","RedBlackRotateRight","RedBlackFirst","createEdge","edge","edges","setEdgeEnd","cells","halfedges","createBorderEdge","vertex","clipEdge","connectEdge","fm","fb","lx","ly","rx","ry","fx","cellHalfedgeAngle","cell","site","va","vb","cellHalfedgeStart","cellHalfedgeEnd","_t0","px","py","after","grandpa","uncle","sibling","firstCircle","circlePool","attachCircle","lArc","rArc","lSite","cSite","rSite","epsilon2$2","ha","hc","detachCircle","beachPool","createBeach","beach","detachBeach","beaches","removeBeach","disappearing","epsilon$4","iArc","nArcs","addBeach","dxl","dxr","directrix","leftBreakPoint","rightBreakPoint","createCell","newArc","hb","rfocx","rfocy","pby2","lfocx","lfocy","plby2","hl","aby2","lexicographic","Diagram","sites","sortCellHalfedges","clipEdges","iCell","iHalfedge","nHalfedges","startX","startY","endX","endY","nCells","dc","v01","v11","v10","clipCells","constant$d","Transform","triangles","_found","applyX","applyY","location","invertX","invertY","rescaleX","rescaleY","identity$9","transform$1","__zoom","nopropagation$2","noevent$2","defaultFilter$2","defaultExtent$1","SVGElement","clientWidth","clientHeight","defaultTransform","defaultWheelDelta","deltaY","deltaMode","defaultTouchable$2","defaultConstrain","translateExtent","cornerRadius","padRadius","a01","a11","a10","da0","da1","ap","rp","rc0","rc1","oc","x32","y32","kc","lc","autoType","axisBottom","axisLeft","axisRight","axisTop","bisect","brushSelection","brushX","brushY","chord","sortGroups","sortSubgroups","sortChords","groupSums","groupIndex","subgroupIndex","chords","di","dj","subindex","clientPoint","cluster","separation","nodeSize","previousNode","reduce","meanX","maxY","leafLeft","leafRight","contourDensity","weight","density","values0","Float32Array","values1","wi","transformPolygon","transformRing","transformPoint","resize","cellSize","cross","curveBasis","curveBasisClosed","curveBasisOpen","curveBundle","curveCardinal","curveCardinalClosed","curveCardinalOpen","curveCatmullRom","curveCatmullRomClosed","curveCatmullRomOpen","curveLinearClosed","curveMonotoneX","curveMonotoneY","curveNatural","curveStep","curveStepAfter","curveStepBefore","descending","drag","mousedownx","mousedowny","mousemoving","container","gestures","clickDistance2","mousedowned","touchstarted","gesture","mousemoved","mouseupped","sublisteners","clickDistance","dragEnable","dsv","easeBack","easeBackIn","easeBackInOut","easeBackOut","easeBounce","easeBounceIn","easeBounceInOut","easeBounceOut","easeCircle","easeCircleIn","easeCircleInOut","easeCircleOut","easeCubic","easeCubicIn","easeCubicInOut","easeCubicOut","easeElastic","easeElasticIn","easeElasticInOut","easeElasticOut","easeExp","easeExpIn","easeExpInOut","easeExpOut","easeLinear","easePoly","easePolyIn","easePolyInOut","easePolyOut","easeQuad","easeQuadIn","easeQuadInOut","easeQuadOut","easeSin","easeSinIn","easeSinInOut","easeSinOut","forceCenter","force","sx","sy","forceCollide","radii","strength","iterations","ri","ri2","prepare","quad","rj","forceLink","strengths","distances","bias","initializeStrength","initializeDistance","forceManyBody","distanceMin2","distanceMax2","theta2","accumulate","distanceMin","distanceMax","forceRadial","radiuses","forceSimulation","simulation","alphaMin","alphaDecay","alphaTarget","velocityDecay","forces","stepper","initializeNodes","initializeForce","closest","forceX","forceY","formatDefaultLocale","geoAlbers","geoAlbersUsa","lower48Point","alaskaPoint","hawaiiPoint","lower48","alaska","hawaii","pointStream","albersUsa","streams","geoArea","geoAzimuthalEqualArea","geoAzimuthalEqualAreaRaw","geoAzimuthalEquidistant","geoAzimuthalEquidistantRaw","geoBounds","feature","deltaMax","geoCentroid","geoCircle","geoClipAntimeridian","geoClipCircle","geoClipExtent","geoClipRectangle","geoConicConformal","geoConicConformalRaw","geoConicEqualArea","geoConicEqualAreaRaw","geoConicEquidistant","geoConicEquidistantRaw","geoContains","geoDistance","geoEqualEarth","geoEqualEarthRaw","geoEquirectangular","geoEquirectangularRaw","geoGnomonic","geoGnomonicRaw","geoGraticule","geoGraticule10","geoIdentity","reflectX","reflectY","geoInterpolate","sy1","kx0","ky0","kx1","ky1","geoLength","geoMercator","geoMercatorRaw","geoNaturalEarth1","geoNaturalEarth1Raw","geoOrthographic","geoOrthographicRaw","geoPath","projectionStream","contextStream","measure","geoProjection","geoProjectionMutator","geoRotation","geoStereographic","geoStereographicRaw","geoTransform","geoTransverseMercator","geoTransverseMercatorRaw","histogram","bin","bins","image","Image","onerror","onload","src","interpolateArray","interpolateBasis","interpolateBasisClosed","interpolateBlues","interpolateBrBG","interpolateBuGn","interpolateBuPu","interpolateCividis","interpolateCool","interpolateCubehelix","interpolateCubehelixDefault","interpolateCubehelixLong","interpolateDate","interpolateDiscrete","interpolateGnBu","interpolateGreens","interpolateGreys","interpolateHcl","interpolateHclLong","interpolateHsl","interpolateHslLong","interpolateHue","interpolateInferno","interpolateLab","interpolateMagma","interpolateNumberArray","interpolateObject","interpolateOrRd","interpolateOranges","interpolatePRGn","interpolatePiYG","interpolatePlasma","interpolatePuBu","interpolatePuBuGn","interpolatePuOr","interpolatePuRd","interpolatePurples","interpolateRainbow","ts","interpolateRdBu","interpolateRdGy","interpolateRdPu","interpolateRdYlBu","interpolateRdYlGn","interpolateReds","interpolateRgbBasis","interpolateRgbBasisClosed","interpolateSinebow","interpolateSpectral","interpolateTurbo","interpolateViridis","interpolateWarm","interpolateYlGn","interpolateYlGnBu","interpolateYlOrBr","interpolateYlOrRd","total","isoFormat","isoParse","lch","linkHorizontal","linkRadial","linkVertical","median","numbers","nest","sortValues","rollup","sortKeys","createResult","setResult","valuesByKey","sortKey","packSiblings","pairs","partition","positionNode","permute","permutes","pie","arcs","polygonArea","polygonCentroid","inside","polygonHull","sortedPoints","flippedPoints","upperIndexes","lowerIndexes","skipLeft","skipRight","hull","polygonLength","perimeter","quantile","quantize","samples","radialArea","radialLine","ribbon","sa0","sa1","sx0","tr","ta0","ta1","scaleBand","scaleDiverging","diverging","scaleDivergingLog","divergingLog","scaleDivergingPow","scaleDivergingSqrt","scaleDivergingSymlog","divergingSymlog","scaleIdentity","identity$7","scaleImplicit","scaleLinear","linear$2","scaleLog","log$1","scaleOrdinal","scalePoint","pointish","scalePow","scaleQuantile","invertExtent","quantiles","scaleQuantize","quantize$1","scaleSequential","sequential","scaleSequentialLog","sequentialLog","scaleSequentialPow","scaleSequentialQuantile","sequentialQuantile","scaleSequentialSqrt","scaleSequentialSymlog","sequentialSymlog","scaleSqrt","scaleSymlog","symlog","scaleThreshold","threshold$1","scaleTime","scaleUtc","scan","schemeAccent","schemeBlues","schemeBrBG","schemeBuGn","schemeBuPu","schemeCategory10","schemeDark2","schemeGnBu","schemeGreens","schemeGreys","schemeOrRd","schemeOranges","schemePRGn","schemePaired","schemePastel1","schemePastel2","schemePiYG","schemePuBu","schemePuBuGn","schemePuOr","schemePuRd","schemePurples","schemeRdBu","schemeRdGy","schemeRdPu","schemeRdYlBu","schemeRdYlGn","schemeReds","schemeSet1","schemeSet2","schemeSet3","schemeSpectral","schemeTableau10","schemeYlGn","schemeYlGnBu","schemeYlOrBr","schemeYlOrRd","shuffle","stack","oz","kz","sz","sij","ki","si","stackOffsetDiverging","yn","stackOffsetExpand","stackOffsetNone","stackOffsetSilhouette","stackOffsetWiggle","s2","sij0","sij1","s3","skj0","skj1","stackOrderAppearance","stackOrderAscending","stackOrderDescending","stackOrderInsideOut","tops","bottoms","stackOrderNone","stackOrderReverse","stratify","nodeKey","nodeByKey","symbolCircle","symbolCross","symbolDiamond","symbolSquare","symbolStar","symbolTriangle","symbolWye","thresholdFreedmanDiaconis","thresholdScott","timeDay","timeDays","timeFormatDefaultLocale","timeFormatLocale","timeFriday","timeFridays","timeHour","timeHours","timeInterval","timeMillisecond","timeMilliseconds","timeMinute","timeMinutes","timeMonday","timeMondays","timeMonth","timeMonths","timeSaturday","timeSaturdays","timeSecond","timeSeconds","timeSunday","timeSundays","timeThursday","timeThursdays","timeTuesday","timeTuesdays","timeWednesday","timeWednesdays","timeWeek","timeWeeks","timeYear","timeYears","treeRoot","firstWalk","secondWalk","sizeNode","siblings","executeShifts","midpoint","vip","vop","vom","sip","sop","sim","som","apportion","treemap","tile","paddingStack","paddingTop","paddingRight","paddingBottom","paddingLeft","treemapBinary","valueOffset","valueTarget","valueLeft","valueRight","xk","yk","treemapResquarify","treemapSliceDice","treemapSquarify","utcMillisecond","utcMilliseconds","utcSecond","utcSeconds","utcWeek","utcWeeks","version","voronoi","zip","zoom","touchstarting","constrain","wheelDelta","scaleExtent","touchDelay","wheelDelay","wheeled","dblclicked","__zooming","Gesture","taps","wheel","k1","touch0","touch1","l0","l1","dp","dl","collection","scaleBy","scaleTo","translateBy","translateTo","zoomIdentity","zoomTransform"],"mappings":"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","file":"../skylark-d3-all.js","sourcesContent":["define('skylark-langx-ns/_attach',[],function(){\r\n    return  function attach(obj1,path,obj2) {\r\n        if (typeof path == \"string\") {\r\n            path = path.split(\".\");//[path]\r\n        };\r\n        var length = path.length,\r\n            ns=obj1,\r\n            i=0,\r\n            name = path[i++];\r\n\r\n        while (i < length) {\r\n            ns = ns[name] = ns[name] || {};\r\n            name = path[i++];\r\n        }\r\n\r\n        return ns[name] = obj2;\r\n    }\r\n});\ndefine('skylark-langx-ns/ns',[\r\n    \"./_attach\"\r\n], function(_attach) {\r\n    var skylark = {\r\n    \tattach : function(path,obj) {\r\n    \t\treturn _attach(skylark,path,obj);\r\n    \t}\r\n    };\r\n    return skylark;\r\n});\r\n\ndefine('skylark-langx-ns/main',[\r\n\t\"./ns\"\r\n],function(skylark){\r\n\treturn skylark;\r\n});\ndefine('skylark-langx-ns', ['skylark-langx-ns/main'], function (main) { return main; });\n\ndefine('skylark-langx/skylark',[\r\n    \"skylark-langx-ns\"\r\n], function(ns) {\r\n\treturn ns;\r\n});\r\n\ndefine('skylark-d3/d3',[\r\n  \"skylark-langx/skylark\"\r\n],function(skylark) {\r\n\r\nvar version = \"5.15.0\";\r\n\r\nfunction ascending(a, b) {\r\n  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;\r\n}\r\n\r\nfunction bisector(compare) {\r\n  if (compare.length === 1) compare = ascendingComparator(compare);\r\n  return {\r\n    left: function(a, x, lo, hi) {\r\n      if (lo == null) lo = 0;\r\n      if (hi == null) hi = a.length;\r\n      while (lo < hi) {\r\n        var mid = lo + hi >>> 1;\r\n        if (compare(a[mid], x) < 0) lo = mid + 1;\r\n        else hi = mid;\r\n      }\r\n      return lo;\r\n    },\r\n    right: function(a, x, lo, hi) {\r\n      if (lo == null) lo = 0;\r\n      if (hi == null) hi = a.length;\r\n      while (lo < hi) {\r\n        var mid = lo + hi >>> 1;\r\n        if (compare(a[mid], x) > 0) hi = mid;\r\n        else lo = mid + 1;\r\n      }\r\n      return lo;\r\n    }\r\n  };\r\n}\r\n\r\nfunction ascendingComparator(f) {\r\n  return function(d, x) {\r\n    return ascending(f(d), x);\r\n  };\r\n}\r\n\r\nvar ascendingBisect = bisector(ascending);\r\nvar bisectRight = ascendingBisect.right;\r\nvar bisectLeft = ascendingBisect.left;\r\n\r\nfunction pairs(array, f) {\r\n  if (f == null) f = pair;\r\n  var i = 0, n = array.length - 1, p = array[0], pairs = new Array(n < 0 ? 0 : n);\r\n  while (i < n) pairs[i] = f(p, p = array[++i]);\r\n  return pairs;\r\n}\r\n\r\nfunction pair(a, b) {\r\n  return [a, b];\r\n}\r\n\r\nfunction cross(values0, values1, reduce) {\r\n  var n0 = values0.length,\r\n      n1 = values1.length,\r\n      values = new Array(n0 * n1),\r\n      i0,\r\n      i1,\r\n      i,\r\n      value0;\r\n\r\n  if (reduce == null) reduce = pair;\r\n\r\n  for (i0 = i = 0; i0 < n0; ++i0) {\r\n    for (value0 = values0[i0], i1 = 0; i1 < n1; ++i1, ++i) {\r\n      values[i] = reduce(value0, values1[i1]);\r\n    }\r\n  }\r\n\r\n  return values;\r\n}\r\n\r\nfunction descending(a, b) {\r\n  return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;\r\n}\r\n\r\nfunction number(x) {\r\n  return x === null ? NaN : +x;\r\n}\r\n\r\nfunction variance(values, valueof) {\r\n  var n = values.length,\r\n      m = 0,\r\n      i = -1,\r\n      mean = 0,\r\n      value,\r\n      delta,\r\n      sum = 0;\r\n\r\n  if (valueof == null) {\r\n    while (++i < n) {\r\n      if (!isNaN(value = number(values[i]))) {\r\n        delta = value - mean;\r\n        mean += delta / ++m;\r\n        sum += delta * (value - mean);\r\n      }\r\n    }\r\n  }\r\n\r\n  else {\r\n    while (++i < n) {\r\n      if (!isNaN(value = number(valueof(values[i], i, values)))) {\r\n        delta = value - mean;\r\n        mean += delta / ++m;\r\n        sum += delta * (value - mean);\r\n      }\r\n    }\r\n  }\r\n\r\n  if (m > 1) return sum / (m - 1);\r\n}\r\n\r\nfunction deviation(array, f) {\r\n  var v = variance(array, f);\r\n  return v ? Math.sqrt(v) : v;\r\n}\r\n\r\nfunction extent(values, valueof) {\r\n  var n = values.length,\r\n      i = -1,\r\n      value,\r\n      min,\r\n      max;\r\n\r\n  if (valueof == null) {\r\n    while (++i < n) { // Find the first comparable value.\r\n      if ((value = values[i]) != null && value >= value) {\r\n        min = max = value;\r\n        while (++i < n) { // Compare the remaining values.\r\n          if ((value = values[i]) != null) {\r\n            if (min > value) min = value;\r\n            if (max < value) max = value;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  else {\r\n    while (++i < n) { // Find the first comparable value.\r\n      if ((value = valueof(values[i], i, values)) != null && value >= value) {\r\n        min = max = value;\r\n        while (++i < n) { // Compare the remaining values.\r\n          if ((value = valueof(values[i], i, values)) != null) {\r\n            if (min > value) min = value;\r\n            if (max < value) max = value;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return [min, max];\r\n}\r\n\r\nvar array = Array.prototype;\r\n\r\nvar slice = array.slice;\r\nvar map = array.map;\r\n\r\nfunction constant(x) {\r\n  return function() {\r\n    return x;\r\n  };\r\n}\r\n\r\nfunction identity(x) {\r\n  return x;\r\n}\r\n\r\nfunction sequence(start, stop, step) {\r\n  start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;\r\n\r\n  var i = -1,\r\n      n = Math.max(0, Math.ceil((stop - start) / step)) | 0,\r\n      range = new Array(n);\r\n\r\n  while (++i < n) {\r\n    range[i] = start + i * step;\r\n  }\r\n\r\n  return range;\r\n}\r\n\r\nvar e10 = Math.sqrt(50),\r\n    e5 = Math.sqrt(10),\r\n    e2 = Math.sqrt(2);\r\n\r\nfunction ticks(start, stop, count) {\r\n  var reverse,\r\n      i = -1,\r\n      n,\r\n      ticks,\r\n      step;\r\n\r\n  stop = +stop, start = +start, count = +count;\r\n  if (start === stop && count > 0) return [start];\r\n  if (reverse = stop < start) n = start, start = stop, stop = n;\r\n  if ((step = tickIncrement(start, stop, count)) === 0 || !isFinite(step)) return [];\r\n\r\n  if (step > 0) {\r\n    start = Math.ceil(start / step);\r\n    stop = Math.floor(stop / step);\r\n    ticks = new Array(n = Math.ceil(stop - start + 1));\r\n    while (++i < n) ticks[i] = (start + i) * step;\r\n  } else {\r\n    start = Math.floor(start * step);\r\n    stop = Math.ceil(stop * step);\r\n    ticks = new Array(n = Math.ceil(start - stop + 1));\r\n    while (++i < n) ticks[i] = (start - i) / step;\r\n  }\r\n\r\n  if (reverse) ticks.reverse();\r\n\r\n  return ticks;\r\n}\r\n\r\nfunction tickIncrement(start, stop, count) {\r\n  var step = (stop - start) / Math.max(0, count),\r\n      power = Math.floor(Math.log(step) / Math.LN10),\r\n      error = step / Math.pow(10, power);\r\n  return power >= 0\r\n      ? (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1) * Math.pow(10, power)\r\n      : -Math.pow(10, -power) / (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1);\r\n}\r\n\r\nfunction tickStep(start, stop, count) {\r\n  var step0 = Math.abs(stop - start) / Math.max(0, count),\r\n      step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)),\r\n      error = step0 / step1;\r\n  if (error >= e10) step1 *= 10;\r\n  else if (error >= e5) step1 *= 5;\r\n  else if (error >= e2) step1 *= 2;\r\n  return stop < start ? -step1 : step1;\r\n}\r\n\r\nfunction thresholdSturges(values) {\r\n  return Math.ceil(Math.log(values.length) / Math.LN2) + 1;\r\n}\r\n\r\nfunction histogram() {\r\n  var value = identity,\r\n      domain = extent,\r\n      threshold = thresholdSturges;\r\n\r\n  function histogram(data) {\r\n    var i,\r\n        n = data.length,\r\n        x,\r\n        values = new Array(n);\r\n\r\n    for (i = 0; i < n; ++i) {\r\n      values[i] = value(data[i], i, data);\r\n    }\r\n\r\n    var xz = domain(values),\r\n        x0 = xz[0],\r\n        x1 = xz[1],\r\n        tz = threshold(values, x0, x1);\r\n\r\n    // Convert number of thresholds into uniform thresholds.\r\n    if (!Array.isArray(tz)) {\r\n      tz = tickStep(x0, x1, tz);\r\n      tz = sequence(Math.ceil(x0 / tz) * tz, x1, tz); // exclusive\r\n    }\r\n\r\n    // Remove any thresholds outside the domain.\r\n    var m = tz.length;\r\n    while (tz[0] <= x0) tz.shift(), --m;\r\n    while (tz[m - 1] > x1) tz.pop(), --m;\r\n\r\n    var bins = new Array(m + 1),\r\n        bin;\r\n\r\n    // Initialize bins.\r\n    for (i = 0; i <= m; ++i) {\r\n      bin = bins[i] = [];\r\n      bin.x0 = i > 0 ? tz[i - 1] : x0;\r\n      bin.x1 = i < m ? tz[i] : x1;\r\n    }\r\n\r\n    // Assign data to bins by value, ignoring any outside the domain.\r\n    for (i = 0; i < n; ++i) {\r\n      x = values[i];\r\n      if (x0 <= x && x <= x1) {\r\n        bins[bisectRight(tz, x, 0, m)].push(data[i]);\r\n      }\r\n    }\r\n\r\n    return bins;\r\n  }\r\n\r\n  histogram.value = function(_) {\r\n    return arguments.length ? (value = typeof _ === \"function\" ? _ : constant(_), histogram) : value;\r\n  };\r\n\r\n  histogram.domain = function(_) {\r\n    return arguments.length ? (domain = typeof _ === \"function\" ? _ : constant([_[0], _[1]]), histogram) : domain;\r\n  };\r\n\r\n  histogram.thresholds = function(_) {\r\n    return arguments.length ? (threshold = typeof _ === \"function\" ? _ : Array.isArray(_) ? constant(slice.call(_)) : constant(_), histogram) : threshold;\r\n  };\r\n\r\n  return histogram;\r\n}\r\n\r\nfunction threshold(values, p, valueof) {\r\n  if (valueof == null) valueof = number;\r\n  if (!(n = values.length)) return;\r\n  if ((p = +p) <= 0 || n < 2) return +valueof(values[0], 0, values);\r\n  if (p >= 1) return +valueof(values[n - 1], n - 1, values);\r\n  var n,\r\n      i = (n - 1) * p,\r\n      i0 = Math.floor(i),\r\n      value0 = +valueof(values[i0], i0, values),\r\n      value1 = +valueof(values[i0 + 1], i0 + 1, values);\r\n  return value0 + (value1 - value0) * (i - i0);\r\n}\r\n\r\nfunction freedmanDiaconis(values, min, max) {\r\n  values = map.call(values, number).sort(ascending);\r\n  return Math.ceil((max - min) / (2 * (threshold(values, 0.75) - threshold(values, 0.25)) * Math.pow(values.length, -1 / 3)));\r\n}\r\n\r\nfunction scott(values, min, max) {\r\n  return Math.ceil((max - min) / (3.5 * deviation(values) * Math.pow(values.length, -1 / 3)));\r\n}\r\n\r\nfunction max(values, valueof) {\r\n  var n = values.length,\r\n      i = -1,\r\n      value,\r\n      max;\r\n\r\n  if (valueof == null) {\r\n    while (++i < n) { // Find the first comparable value.\r\n      if ((value = values[i]) != null && value >= value) {\r\n        max = value;\r\n        while (++i < n) { // Compare the remaining values.\r\n          if ((value = values[i]) != null && value > max) {\r\n            max = value;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  else {\r\n    while (++i < n) { // Find the first comparable value.\r\n      if ((value = valueof(values[i], i, values)) != null && value >= value) {\r\n        max = value;\r\n        while (++i < n) { // Compare the remaining values.\r\n          if ((value = valueof(values[i], i, values)) != null && value > max) {\r\n            max = value;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return max;\r\n}\r\n\r\nfunction mean(values, valueof) {\r\n  var n = values.length,\r\n      m = n,\r\n      i = -1,\r\n      value,\r\n      sum = 0;\r\n\r\n  if (valueof == null) {\r\n    while (++i < n) {\r\n      if (!isNaN(value = number(values[i]))) sum += value;\r\n      else --m;\r\n    }\r\n  }\r\n\r\n  else {\r\n    while (++i < n) {\r\n      if (!isNaN(value = number(valueof(values[i], i, values)))) sum += value;\r\n      else --m;\r\n    }\r\n  }\r\n\r\n  if (m) return sum / m;\r\n}\r\n\r\nfunction median(values, valueof) {\r\n  var n = values.length,\r\n      i = -1,\r\n      value,\r\n      numbers = [];\r\n\r\n  if (valueof == null) {\r\n    while (++i < n) {\r\n      if (!isNaN(value = number(values[i]))) {\r\n        numbers.push(value);\r\n      }\r\n    }\r\n  }\r\n\r\n  else {\r\n    while (++i < n) {\r\n      if (!isNaN(value = number(valueof(values[i], i, values)))) {\r\n        numbers.push(value);\r\n      }\r\n    }\r\n  }\r\n\r\n  return threshold(numbers.sort(ascending), 0.5);\r\n}\r\n\r\nfunction merge(arrays) {\r\n  var n = arrays.length,\r\n      m,\r\n      i = -1,\r\n      j = 0,\r\n      merged,\r\n      array;\r\n\r\n  while (++i < n) j += arrays[i].length;\r\n  merged = new Array(j);\r\n\r\n  while (--n >= 0) {\r\n    array = arrays[n];\r\n    m = array.length;\r\n    while (--m >= 0) {\r\n      merged[--j] = array[m];\r\n    }\r\n  }\r\n\r\n  return merged;\r\n}\r\n\r\nfunction min(values, valueof) {\r\n  var n = values.length,\r\n      i = -1,\r\n      value,\r\n      min;\r\n\r\n  if (valueof == null) {\r\n    while (++i < n) { // Find the first comparable value.\r\n      if ((value = values[i]) != null && value >= value) {\r\n        min = value;\r\n        while (++i < n) { // Compare the remaining values.\r\n          if ((value = values[i]) != null && min > value) {\r\n            min = value;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  else {\r\n    while (++i < n) { // Find the first comparable value.\r\n      if ((value = valueof(values[i], i, values)) != null && value >= value) {\r\n        min = value;\r\n        while (++i < n) { // Compare the remaining values.\r\n          if ((value = valueof(values[i], i, values)) != null && min > value) {\r\n            min = value;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return min;\r\n}\r\n\r\nfunction permute(array, indexes) {\r\n  var i = indexes.length, permutes = new Array(i);\r\n  while (i--) permutes[i] = array[indexes[i]];\r\n  return permutes;\r\n}\r\n\r\nfunction scan(values, compare) {\r\n  if (!(n = values.length)) return;\r\n  var n,\r\n      i = 0,\r\n      j = 0,\r\n      xi,\r\n      xj = values[j];\r\n\r\n  if (compare == null) compare = ascending;\r\n\r\n  while (++i < n) {\r\n    if (compare(xi = values[i], xj) < 0 || compare(xj, xj) !== 0) {\r\n      xj = xi, j = i;\r\n    }\r\n  }\r\n\r\n  if (compare(xj, xj) === 0) return j;\r\n}\r\n\r\nfunction shuffle(array, i0, i1) {\r\n  var m = (i1 == null ? array.length : i1) - (i0 = i0 == null ? 0 : +i0),\r\n      t,\r\n      i;\r\n\r\n  while (m) {\r\n    i = Math.random() * m-- | 0;\r\n    t = array[m + i0];\r\n    array[m + i0] = array[i + i0];\r\n    array[i + i0] = t;\r\n  }\r\n\r\n  return array;\r\n}\r\n\r\nfunction sum(values, valueof) {\r\n  var n = values.length,\r\n      i = -1,\r\n      value,\r\n      sum = 0;\r\n\r\n  if (valueof == null) {\r\n    while (++i < n) {\r\n      if (value = +values[i]) sum += value; // Note: zero and null are equivalent.\r\n    }\r\n  }\r\n\r\n  else {\r\n    while (++i < n) {\r\n      if (value = +valueof(values[i], i, values)) sum += value;\r\n    }\r\n  }\r\n\r\n  return sum;\r\n}\r\n\r\nfunction transpose(matrix) {\r\n  if (!(n = matrix.length)) return [];\r\n  for (var i = -1, m = min(matrix, length), transpose = new Array(m); ++i < m;) {\r\n    for (var j = -1, n, row = transpose[i] = new Array(n); ++j < n;) {\r\n      row[j] = matrix[j][i];\r\n    }\r\n  }\r\n  return transpose;\r\n}\r\n\r\nfunction length(d) {\r\n  return d.length;\r\n}\r\n\r\nfunction zip() {\r\n  return transpose(arguments);\r\n}\r\n\r\nvar slice$1 = Array.prototype.slice;\r\n\r\nfunction identity$1(x) {\r\n  return x;\r\n}\r\n\r\nvar top = 1,\r\n    right = 2,\r\n    bottom = 3,\r\n    left = 4,\r\n    epsilon = 1e-6;\r\n\r\nfunction translateX(x) {\r\n  return \"translate(\" + (x + 0.5) + \",0)\";\r\n}\r\n\r\nfunction translateY(y) {\r\n  return \"translate(0,\" + (y + 0.5) + \")\";\r\n}\r\n\r\nfunction number$1(scale) {\r\n  return function(d) {\r\n    return +scale(d);\r\n  };\r\n}\r\n\r\nfunction center(scale) {\r\n  var offset = Math.max(0, scale.bandwidth() - 1) / 2; // Adjust for 0.5px offset.\r\n  if (scale.round()) offset = Math.round(offset);\r\n  return function(d) {\r\n    return +scale(d) + offset;\r\n  };\r\n}\r\n\r\nfunction entering() {\r\n  return !this.__axis;\r\n}\r\n\r\nfunction axis(orient, scale) {\r\n  var tickArguments = [],\r\n      tickValues = null,\r\n      tickFormat = null,\r\n      tickSizeInner = 6,\r\n      tickSizeOuter = 6,\r\n      tickPadding = 3,\r\n      k = orient === top || orient === left ? -1 : 1,\r\n      x = orient === left || orient === right ? \"x\" : \"y\",\r\n      transform = orient === top || orient === bottom ? translateX : translateY;\r\n\r\n  function axis(context) {\r\n    var values = tickValues == null ? (scale.ticks ? scale.ticks.apply(scale, tickArguments) : scale.domain()) : tickValues,\r\n        format = tickFormat == null ? (scale.tickFormat ? scale.tickFormat.apply(scale, tickArguments) : identity$1) : tickFormat,\r\n        spacing = Math.max(tickSizeInner, 0) + tickPadding,\r\n        range = scale.range(),\r\n        range0 = +range[0] + 0.5,\r\n        range1 = +range[range.length - 1] + 0.5,\r\n        position = (scale.bandwidth ? center : number$1)(scale.copy()),\r\n        selection = context.selection ? context.selection() : context,\r\n        path = selection.selectAll(\".domain\").data([null]),\r\n        tick = selection.selectAll(\".tick\").data(values, scale).order(),\r\n        tickExit = tick.exit(),\r\n        tickEnter = tick.enter().append(\"g\").attr(\"class\", \"tick\"),\r\n        line = tick.select(\"line\"),\r\n        text = tick.select(\"text\");\r\n\r\n    path = path.merge(path.enter().insert(\"path\", \".tick\")\r\n        .attr(\"class\", \"domain\")\r\n        .attr(\"stroke\", \"currentColor\"));\r\n\r\n    tick = tick.merge(tickEnter);\r\n\r\n    line = line.merge(tickEnter.append(\"line\")\r\n        .attr(\"stroke\", \"currentColor\")\r\n        .attr(x + \"2\", k * tickSizeInner));\r\n\r\n    text = text.merge(tickEnter.append(\"text\")\r\n        .attr(\"fill\", \"currentColor\")\r\n        .attr(x, k * spacing)\r\n        .attr(\"dy\", orient === top ? \"0em\" : orient === bottom ? \"0.71em\" : \"0.32em\"));\r\n\r\n    if (context !== selection) {\r\n      path = path.transition(context);\r\n      tick = tick.transition(context);\r\n      line = line.transition(context);\r\n      text = text.transition(context);\r\n\r\n      tickExit = tickExit.transition(context)\r\n          .attr(\"opacity\", epsilon)\r\n          .attr(\"transform\", function(d) { return isFinite(d = position(d)) ? transform(d) : this.getAttribute(\"transform\"); });\r\n\r\n      tickEnter\r\n          .attr(\"opacity\", epsilon)\r\n          .attr(\"transform\", function(d) { var p = this.parentNode.__axis; return transform(p && isFinite(p = p(d)) ? p : position(d)); });\r\n    }\r\n\r\n    tickExit.remove();\r\n\r\n    path\r\n        .attr(\"d\", orient === left || orient == right\r\n            ? (tickSizeOuter ? \"M\" + k * tickSizeOuter + \",\" + range0 + \"H0.5V\" + range1 + \"H\" + k * tickSizeOuter : \"M0.5,\" + range0 + \"V\" + range1)\r\n            : (tickSizeOuter ? \"M\" + range0 + \",\" + k * tickSizeOuter + \"V0.5H\" + range1 + \"V\" + k * tickSizeOuter : \"M\" + range0 + \",0.5H\" + range1));\r\n\r\n    tick\r\n        .attr(\"opacity\", 1)\r\n        .attr(\"transform\", function(d) { return transform(position(d)); });\r\n\r\n    line\r\n        .attr(x + \"2\", k * tickSizeInner);\r\n\r\n    text\r\n        .attr(x, k * spacing)\r\n        .text(format);\r\n\r\n    selection.filter(entering)\r\n        .attr(\"fill\", \"none\")\r\n        .attr(\"font-size\", 10)\r\n        .attr(\"font-family\", \"sans-serif\")\r\n        .attr(\"text-anchor\", orient === right ? \"start\" : orient === left ? \"end\" : \"middle\");\r\n\r\n    selection\r\n        .each(function() { this.__axis = position; });\r\n  }\r\n\r\n  axis.scale = function(_) {\r\n    return arguments.length ? (scale = _, axis) : scale;\r\n  };\r\n\r\n  axis.ticks = function() {\r\n    return tickArguments = slice$1.call(arguments), axis;\r\n  };\r\n\r\n  axis.tickArguments = function(_) {\r\n    return arguments.length ? (tickArguments = _ == null ? [] : slice$1.call(_), axis) : tickArguments.slice();\r\n  };\r\n\r\n  axis.tickValues = function(_) {\r\n    return arguments.length ? (tickValues = _ == null ? null : slice$1.call(_), axis) : tickValues && tickValues.slice();\r\n  };\r\n\r\n  axis.tickFormat = function(_) {\r\n    return arguments.length ? (tickFormat = _, axis) : tickFormat;\r\n  };\r\n\r\n  axis.tickSize = function(_) {\r\n    return arguments.length ? (tickSizeInner = tickSizeOuter = +_, axis) : tickSizeInner;\r\n  };\r\n\r\n  axis.tickSizeInner = function(_) {\r\n    return arguments.length ? (tickSizeInner = +_, axis) : tickSizeInner;\r\n  };\r\n\r\n  axis.tickSizeOuter = function(_) {\r\n    return arguments.length ? (tickSizeOuter = +_, axis) : tickSizeOuter;\r\n  };\r\n\r\n  axis.tickPadding = function(_) {\r\n    return arguments.length ? (tickPadding = +_, axis) : tickPadding;\r\n  };\r\n\r\n  return axis;\r\n}\r\n\r\nfunction axisTop(scale) {\r\n  return axis(top, scale);\r\n}\r\n\r\nfunction axisRight(scale) {\r\n  return axis(right, scale);\r\n}\r\n\r\nfunction axisBottom(scale) {\r\n  return axis(bottom, scale);\r\n}\r\n\r\nfunction axisLeft(scale) {\r\n  return axis(left, scale);\r\n}\r\n\r\nvar noop = {value: function() {}};\r\n\r\nfunction dispatch() {\r\n  for (var i = 0, n = arguments.length, _ = {}, t; i < n; ++i) {\r\n    if (!(t = arguments[i] + \"\") || (t in _) || /[\\s.]/.test(t)) throw new Error(\"illegal type: \" + t);\r\n    _[t] = [];\r\n  }\r\n  return new Dispatch(_);\r\n}\r\n\r\nfunction Dispatch(_) {\r\n  this._ = _;\r\n}\r\n\r\nfunction parseTypenames(typenames, types) {\r\n  return typenames.trim().split(/^|\\s+/).map(function(t) {\r\n    var name = \"\", i = t.indexOf(\".\");\r\n    if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);\r\n    if (t && !types.hasOwnProperty(t)) throw new Error(\"unknown type: \" + t);\r\n    return {type: t, name: name};\r\n  });\r\n}\r\n\r\nDispatch.prototype = dispatch.prototype = {\r\n  constructor: Dispatch,\r\n  on: function(typename, callback) {\r\n    var _ = this._,\r\n        T = parseTypenames(typename + \"\", _),\r\n        t,\r\n        i = -1,\r\n        n = T.length;\r\n\r\n    // If no callback was specified, return the callback of the given type and name.\r\n    if (arguments.length < 2) {\r\n      while (++i < n) if ((t = (typename = T[i]).type) && (t = get(_[t], typename.name))) return t;\r\n      return;\r\n    }\r\n\r\n    // If a type was specified, set the callback for the given type and name.\r\n    // Otherwise, if a null callback was specified, remove callbacks of the given name.\r\n    if (callback != null && typeof callback !== \"function\") throw new Error(\"invalid callback: \" + callback);\r\n    while (++i < n) {\r\n      if (t = (typename = T[i]).type) _[t] = set(_[t], typename.name, callback);\r\n      else if (callback == null) for (t in _) _[t] = set(_[t], typename.name, null);\r\n    }\r\n\r\n    return this;\r\n  },\r\n  copy: function() {\r\n    var copy = {}, _ = this._;\r\n    for (var t in _) copy[t] = _[t].slice();\r\n    return new Dispatch(copy);\r\n  },\r\n  call: function(type, that) {\r\n    if ((n = arguments.length - 2) > 0) for (var args = new Array(n), i = 0, n, t; i < n; ++i) args[i] = arguments[i + 2];\r\n    if (!this._.hasOwnProperty(type)) throw new Error(\"unknown type: \" + type);\r\n    for (t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);\r\n  },\r\n  apply: function(type, that, args) {\r\n    if (!this._.hasOwnProperty(type)) throw new Error(\"unknown type: \" + type);\r\n    for (var t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);\r\n  }\r\n};\r\n\r\nfunction get(type, name) {\r\n  for (var i = 0, n = type.length, c; i < n; ++i) {\r\n    if ((c = type[i]).name === name) {\r\n      return c.value;\r\n    }\r\n  }\r\n}\r\n\r\nfunction set(type, name, callback) {\r\n  for (var i = 0, n = type.length; i < n; ++i) {\r\n    if (type[i].name === name) {\r\n      type[i] = noop, type = type.slice(0, i).concat(type.slice(i + 1));\r\n      break;\r\n    }\r\n  }\r\n  if (callback != null) type.push({name: name, value: callback});\r\n  return type;\r\n}\r\n\r\nvar xhtml = \"http://www.w3.org/1999/xhtml\";\r\n\r\nvar namespaces = {\r\n  svg: \"http://www.w3.org/2000/svg\",\r\n  xhtml: xhtml,\r\n  xlink: \"http://www.w3.org/1999/xlink\",\r\n  xml: \"http://www.w3.org/XML/1998/namespace\",\r\n  xmlns: \"http://www.w3.org/2000/xmlns/\"\r\n};\r\n\r\nfunction namespace(name) {\r\n  var prefix = name += \"\", i = prefix.indexOf(\":\");\r\n  if (i >= 0 && (prefix = name.slice(0, i)) !== \"xmlns\") name = name.slice(i + 1);\r\n  return namespaces.hasOwnProperty(prefix) ? {space: namespaces[prefix], local: name} : name;\r\n}\r\n\r\nfunction creatorInherit(name) {\r\n  return function() {\r\n    var document = this.ownerDocument,\r\n        uri = this.namespaceURI;\r\n    return uri === xhtml && document.documentElement.namespaceURI === xhtml\r\n        ? document.createElement(name)\r\n        : document.createElementNS(uri, name);\r\n  };\r\n}\r\n\r\nfunction creatorFixed(fullname) {\r\n  return function() {\r\n    return this.ownerDocument.createElementNS(fullname.space, fullname.local);\r\n  };\r\n}\r\n\r\nfunction creator(name) {\r\n  var fullname = namespace(name);\r\n  return (fullname.local\r\n      ? creatorFixed\r\n      : creatorInherit)(fullname);\r\n}\r\n\r\nfunction none() {}\r\n\r\nfunction selector(selector) {\r\n  return selector == null ? none : function() {\r\n    return this.querySelector(selector);\r\n  };\r\n}\r\n\r\nfunction selection_select(select) {\r\n  if (typeof select !== \"function\") select = selector(select);\r\n\r\n  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {\r\n    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {\r\n      if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {\r\n        if (\"__data__\" in node) subnode.__data__ = node.__data__;\r\n        subgroup[i] = subnode;\r\n      }\r\n    }\r\n  }\r\n\r\n  return new Selection(subgroups, this._parents);\r\n}\r\n\r\nfunction empty() {\r\n  return [];\r\n}\r\n\r\nfunction selectorAll(selector) {\r\n  return selector == null ? empty : function() {\r\n    return this.querySelectorAll(selector);\r\n  };\r\n}\r\n\r\nfunction selection_selectAll(select) {\r\n  if (typeof select !== \"function\") select = selectorAll(select);\r\n\r\n  for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {\r\n    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {\r\n      if (node = group[i]) {\r\n        subgroups.push(select.call(node, node.__data__, i, group));\r\n        parents.push(node);\r\n      }\r\n    }\r\n  }\r\n\r\n  return new Selection(subgroups, parents);\r\n}\r\n\r\nfunction matcher(selector) {\r\n  return function() {\r\n    return this.matches(selector);\r\n  };\r\n}\r\n\r\nfunction selection_filter(match) {\r\n  if (typeof match !== \"function\") match = matcher(match);\r\n\r\n  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {\r\n    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {\r\n      if ((node = group[i]) && match.call(node, node.__data__, i, group)) {\r\n        subgroup.push(node);\r\n      }\r\n    }\r\n  }\r\n\r\n  return new Selection(subgroups, this._parents);\r\n}\r\n\r\nfunction sparse(update) {\r\n  return new Array(update.length);\r\n}\r\n\r\nfunction selection_enter() {\r\n  return new Selection(this._enter || this._groups.map(sparse), this._parents);\r\n}\r\n\r\nfunction EnterNode(parent, datum) {\r\n  this.ownerDocument = parent.ownerDocument;\r\n  this.namespaceURI = parent.namespaceURI;\r\n  this._next = null;\r\n  this._parent = parent;\r\n  this.__data__ = datum;\r\n}\r\n\r\nEnterNode.prototype = {\r\n  constructor: EnterNode,\r\n  appendChild: function(child) { return this._parent.insertBefore(child, this._next); },\r\n  insertBefore: function(child, next) { return this._parent.insertBefore(child, next); },\r\n  querySelector: function(selector) { return this._parent.querySelector(selector); },\r\n  querySelectorAll: function(selector) { return this._parent.querySelectorAll(selector); }\r\n};\r\n\r\nfunction constant$1(x) {\r\n  return function() {\r\n    return x;\r\n  };\r\n}\r\n\r\nvar keyPrefix = \"$\"; // Protect against keys like “__proto__”.\r\n\r\nfunction bindIndex(parent, group, enter, update, exit, data) {\r\n  var i = 0,\r\n      node,\r\n      groupLength = group.length,\r\n      dataLength = data.length;\r\n\r\n  // Put any non-null nodes that fit into update.\r\n  // Put any null nodes into enter.\r\n  // Put any remaining data into enter.\r\n  for (; i < dataLength; ++i) {\r\n    if (node = group[i]) {\r\n      node.__data__ = data[i];\r\n      update[i] = node;\r\n    } else {\r\n      enter[i] = new EnterNode(parent, data[i]);\r\n    }\r\n  }\r\n\r\n  // Put any non-null nodes that don’t fit into exit.\r\n  for (; i < groupLength; ++i) {\r\n    if (node = group[i]) {\r\n      exit[i] = node;\r\n    }\r\n  }\r\n}\r\n\r\nfunction bindKey(parent, group, enter, update, exit, data, key) {\r\n  var i,\r\n      node,\r\n      nodeByKeyValue = {},\r\n      groupLength = group.length,\r\n      dataLength = data.length,\r\n      keyValues = new Array(groupLength),\r\n      keyValue;\r\n\r\n  // Compute the key for each node.\r\n  // If multiple nodes have the same key, the duplicates are added to exit.\r\n  for (i = 0; i < groupLength; ++i) {\r\n    if (node = group[i]) {\r\n      keyValues[i] = keyValue = keyPrefix + key.call(node, node.__data__, i, group);\r\n      if (keyValue in nodeByKeyValue) {\r\n        exit[i] = node;\r\n      } else {\r\n        nodeByKeyValue[keyValue] = node;\r\n      }\r\n    }\r\n  }\r\n\r\n  // Compute the key for each datum.\r\n  // If there a node associated with this key, join and add it to update.\r\n  // If there is not (or the key is a duplicate), add it to enter.\r\n  for (i = 0; i < dataLength; ++i) {\r\n    keyValue = keyPrefix + key.call(parent, data[i], i, data);\r\n    if (node = nodeByKeyValue[keyValue]) {\r\n      update[i] = node;\r\n      node.__data__ = data[i];\r\n      nodeByKeyValue[keyValue] = null;\r\n    } else {\r\n      enter[i] = new EnterNode(parent, data[i]);\r\n    }\r\n  }\r\n\r\n  // Add any remaining nodes that were not bound to data to exit.\r\n  for (i = 0; i < groupLength; ++i) {\r\n    if ((node = group[i]) && (nodeByKeyValue[keyValues[i]] === node)) {\r\n      exit[i] = node;\r\n    }\r\n  }\r\n}\r\n\r\nfunction selection_data(value, key) {\r\n  if (!value) {\r\n    data = new Array(this.size()), j = -1;\r\n    this.each(function(d) { data[++j] = d; });\r\n    return data;\r\n  }\r\n\r\n  var bind = key ? bindKey : bindIndex,\r\n      parents = this._parents,\r\n      groups = this._groups;\r\n\r\n  if (typeof value !== \"function\") value = constant$1(value);\r\n\r\n  for (var m = groups.length, update = new Array(m), enter = new Array(m), exit = new Array(m), j = 0; j < m; ++j) {\r\n    var parent = parents[j],\r\n        group = groups[j],\r\n        groupLength = group.length,\r\n        data = value.call(parent, parent && parent.__data__, j, parents),\r\n        dataLength = data.length,\r\n        enterGroup = enter[j] = new Array(dataLength),\r\n        updateGroup = update[j] = new Array(dataLength),\r\n        exitGroup = exit[j] = new Array(groupLength);\r\n\r\n    bind(parent, group, enterGroup, updateGroup, exitGroup, data, key);\r\n\r\n    // Now connect the enter nodes to their following update node, such that\r\n    // appendChild can insert the materialized enter node before this node,\r\n    // rather than at the end of the parent node.\r\n    for (var i0 = 0, i1 = 0, previous, next; i0 < dataLength; ++i0) {\r\n      if (previous = enterGroup[i0]) {\r\n        if (i0 >= i1) i1 = i0 + 1;\r\n        while (!(next = updateGroup[i1]) && ++i1 < dataLength);\r\n        previous._next = next || null;\r\n      }\r\n    }\r\n  }\r\n\r\n  update = new Selection(update, parents);\r\n  update._enter = enter;\r\n  update._exit = exit;\r\n  return update;\r\n}\r\n\r\nfunction selection_exit() {\r\n  return new Selection(this._exit || this._groups.map(sparse), this._parents);\r\n}\r\n\r\nfunction selection_join(onenter, onupdate, onexit) {\r\n  var enter = this.enter(), update = this, exit = this.exit();\r\n  enter = typeof onenter === \"function\" ? onenter(enter) : enter.append(onenter + \"\");\r\n  if (onupdate != null) update = onupdate(update);\r\n  if (onexit == null) exit.remove(); else onexit(exit);\r\n  return enter && update ? enter.merge(update).order() : update;\r\n}\r\n\r\nfunction selection_merge(selection) {\r\n\r\n  for (var groups0 = this._groups, groups1 = selection._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {\r\n    for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {\r\n      if (node = group0[i] || group1[i]) {\r\n        merge[i] = node;\r\n      }\r\n    }\r\n  }\r\n\r\n  for (; j < m0; ++j) {\r\n    merges[j] = groups0[j];\r\n  }\r\n\r\n  return new Selection(merges, this._parents);\r\n}\r\n\r\nfunction selection_order() {\r\n\r\n  for (var groups = this._groups, j = -1, m = groups.length; ++j < m;) {\r\n    for (var group = groups[j], i = group.length - 1, next = group[i], node; --i >= 0;) {\r\n      if (node = group[i]) {\r\n        if (next && node.compareDocumentPosition(next) ^ 4) next.parentNode.insertBefore(node, next);\r\n        next = node;\r\n      }\r\n    }\r\n  }\r\n\r\n  return this;\r\n}\r\n\r\nfunction selection_sort(compare) {\r\n  if (!compare) compare = ascending$1;\r\n\r\n  function compareNode(a, b) {\r\n    return a && b ? compare(a.__data__, b.__data__) : !a - !b;\r\n  }\r\n\r\n  for (var groups = this._groups, m = groups.length, sortgroups = new Array(m), j = 0; j < m; ++j) {\r\n    for (var group = groups[j], n = group.length, sortgroup = sortgroups[j] = new Array(n), node, i = 0; i < n; ++i) {\r\n      if (node = group[i]) {\r\n        sortgroup[i] = node;\r\n      }\r\n    }\r\n    sortgroup.sort(compareNode);\r\n  }\r\n\r\n  return new Selection(sortgroups, this._parents).order();\r\n}\r\n\r\nfunction ascending$1(a, b) {\r\n  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;\r\n}\r\n\r\nfunction selection_call() {\r\n  var callback = arguments[0];\r\n  arguments[0] = this;\r\n  callback.apply(null, arguments);\r\n  return this;\r\n}\r\n\r\nfunction selection_nodes() {\r\n  var nodes = new Array(this.size()), i = -1;\r\n  this.each(function() { nodes[++i] = this; });\r\n  return nodes;\r\n}\r\n\r\nfunction selection_node() {\r\n\r\n  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {\r\n    for (var group = groups[j], i = 0, n = group.length; i < n; ++i) {\r\n      var node = group[i];\r\n      if (node) return node;\r\n    }\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\nfunction selection_size() {\r\n  var size = 0;\r\n  this.each(function() { ++size; });\r\n  return size;\r\n}\r\n\r\nfunction selection_empty() {\r\n  return !this.node();\r\n}\r\n\r\nfunction selection_each(callback) {\r\n\r\n  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {\r\n    for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i) {\r\n      if (node = group[i]) callback.call(node, node.__data__, i, group);\r\n    }\r\n  }\r\n\r\n  return this;\r\n}\r\n\r\nfunction attrRemove(name) {\r\n  return function() {\r\n    this.removeAttribute(name);\r\n  };\r\n}\r\n\r\nfunction attrRemoveNS(fullname) {\r\n  return function() {\r\n    this.removeAttributeNS(fullname.space, fullname.local);\r\n  };\r\n}\r\n\r\nfunction attrConstant(name, value) {\r\n  return function() {\r\n    this.setAttribute(name, value);\r\n  };\r\n}\r\n\r\nfunction attrConstantNS(fullname, value) {\r\n  return function() {\r\n    this.setAttributeNS(fullname.space, fullname.local, value);\r\n  };\r\n}\r\n\r\nfunction attrFunction(name, value) {\r\n  return function() {\r\n    var v = value.apply(this, arguments);\r\n    if (v == null) this.removeAttribute(name);\r\n    else this.setAttribute(name, v);\r\n  };\r\n}\r\n\r\nfunction attrFunctionNS(fullname, value) {\r\n  return function() {\r\n    var v = value.apply(this, arguments);\r\n    if (v == null) this.removeAttributeNS(fullname.space, fullname.local);\r\n    else this.setAttributeNS(fullname.space, fullname.local, v);\r\n  };\r\n}\r\n\r\nfunction selection_attr(name, value) {\r\n  var fullname = namespace(name);\r\n\r\n  if (arguments.length < 2) {\r\n    var node = this.node();\r\n    return fullname.local\r\n        ? node.getAttributeNS(fullname.space, fullname.local)\r\n        : node.getAttribute(fullname);\r\n  }\r\n\r\n  return this.each((value == null\r\n      ? (fullname.local ? attrRemoveNS : attrRemove) : (typeof value === \"function\"\r\n      ? (fullname.local ? attrFunctionNS : attrFunction)\r\n      : (fullname.local ? attrConstantNS : attrConstant)))(fullname, value));\r\n}\r\n\r\nfunction defaultView(node) {\r\n  return (node.ownerDocument && node.ownerDocument.defaultView) // node is a Node\r\n      || (node.document && node) // node is a Window\r\n      || node.defaultView; // node is a Document\r\n}\r\n\r\nfunction styleRemove(name) {\r\n  return function() {\r\n    this.style.removeProperty(name);\r\n  };\r\n}\r\n\r\nfunction styleConstant(name, value, priority) {\r\n  return function() {\r\n    this.style.setProperty(name, value, priority);\r\n  };\r\n}\r\n\r\nfunction styleFunction(name, value, priority) {\r\n  return function() {\r\n    var v = value.apply(this, arguments);\r\n    if (v == null) this.style.removeProperty(name);\r\n    else this.style.setProperty(name, v, priority);\r\n  };\r\n}\r\n\r\nfunction selection_style(name, value, priority) {\r\n  return arguments.length > 1\r\n      ? this.each((value == null\r\n            ? styleRemove : typeof value === \"function\"\r\n            ? styleFunction\r\n            : styleConstant)(name, value, priority == null ? \"\" : priority))\r\n      : styleValue(this.node(), name);\r\n}\r\n\r\nfunction styleValue(node, name) {\r\n  return node.style.getPropertyValue(name)\r\n      || defaultView(node).getComputedStyle(node, null).getPropertyValue(name);\r\n}\r\n\r\nfunction propertyRemove(name) {\r\n  return function() {\r\n    delete this[name];\r\n  };\r\n}\r\n\r\nfunction propertyConstant(name, value) {\r\n  return function() {\r\n    this[name] = value;\r\n  };\r\n}\r\n\r\nfunction propertyFunction(name, value) {\r\n  return function() {\r\n    var v = value.apply(this, arguments);\r\n    if (v == null) delete this[name];\r\n    else this[name] = v;\r\n  };\r\n}\r\n\r\nfunction selection_property(name, value) {\r\n  return arguments.length > 1\r\n      ? this.each((value == null\r\n          ? propertyRemove : typeof value === \"function\"\r\n          ? propertyFunction\r\n          : propertyConstant)(name, value))\r\n      : this.node()[name];\r\n}\r\n\r\nfunction classArray(string) {\r\n  return string.trim().split(/^|\\s+/);\r\n}\r\n\r\nfunction classList(node) {\r\n  return node.classList || new ClassList(node);\r\n}\r\n\r\nfunction ClassList(node) {\r\n  this._node = node;\r\n  this._names = classArray(node.getAttribute(\"class\") || \"\");\r\n}\r\n\r\nClassList.prototype = {\r\n  add: function(name) {\r\n    var i = this._names.indexOf(name);\r\n    if (i < 0) {\r\n      this._names.push(name);\r\n      this._node.setAttribute(\"class\", this._names.join(\" \"));\r\n    }\r\n  },\r\n  remove: function(name) {\r\n    var i = this._names.indexOf(name);\r\n    if (i >= 0) {\r\n      this._names.splice(i, 1);\r\n      this._node.setAttribute(\"class\", this._names.join(\" \"));\r\n    }\r\n  },\r\n  contains: function(name) {\r\n    return this._names.indexOf(name) >= 0;\r\n  }\r\n};\r\n\r\nfunction classedAdd(node, names) {\r\n  var list = classList(node), i = -1, n = names.length;\r\n  while (++i < n) list.add(names[i]);\r\n}\r\n\r\nfunction classedRemove(node, names) {\r\n  var list = classList(node), i = -1, n = names.length;\r\n  while (++i < n) list.remove(names[i]);\r\n}\r\n\r\nfunction classedTrue(names) {\r\n  return function() {\r\n    classedAdd(this, names);\r\n  };\r\n}\r\n\r\nfunction classedFalse(names) {\r\n  return function() {\r\n    classedRemove(this, names);\r\n  };\r\n}\r\n\r\nfunction classedFunction(names, value) {\r\n  return function() {\r\n    (value.apply(this, arguments) ? classedAdd : classedRemove)(this, names);\r\n  };\r\n}\r\n\r\nfunction selection_classed(name, value) {\r\n  var names = classArray(name + \"\");\r\n\r\n  if (arguments.length < 2) {\r\n    var list = classList(this.node()), i = -1, n = names.length;\r\n    while (++i < n) if (!list.contains(names[i])) return false;\r\n    return true;\r\n  }\r\n\r\n  return this.each((typeof value === \"function\"\r\n      ? classedFunction : value\r\n      ? classedTrue\r\n      : classedFalse)(names, value));\r\n}\r\n\r\nfunction textRemove() {\r\n  this.textContent = \"\";\r\n}\r\n\r\nfunction textConstant(value) {\r\n  return function() {\r\n    this.textContent = value;\r\n  };\r\n}\r\n\r\nfunction textFunction(value) {\r\n  return function() {\r\n    var v = value.apply(this, arguments);\r\n    this.textContent = v == null ? \"\" : v;\r\n  };\r\n}\r\n\r\nfunction selection_text(value) {\r\n  return arguments.length\r\n      ? this.each(value == null\r\n          ? textRemove : (typeof value === \"function\"\r\n          ? textFunction\r\n          : textConstant)(value))\r\n      : this.node().textContent;\r\n}\r\n\r\nfunction htmlRemove() {\r\n  this.innerHTML = \"\";\r\n}\r\n\r\nfunction htmlConstant(value) {\r\n  return function() {\r\n    this.innerHTML = value;\r\n  };\r\n}\r\n\r\nfunction htmlFunction(value) {\r\n  return function() {\r\n    var v = value.apply(this, arguments);\r\n    this.innerHTML = v == null ? \"\" : v;\r\n  };\r\n}\r\n\r\nfunction selection_html(value) {\r\n  return arguments.length\r\n      ? this.each(value == null\r\n          ? htmlRemove : (typeof value === \"function\"\r\n          ? htmlFunction\r\n          : htmlConstant)(value))\r\n      : this.node().innerHTML;\r\n}\r\n\r\nfunction raise() {\r\n  if (this.nextSibling) this.parentNode.appendChild(this);\r\n}\r\n\r\nfunction selection_raise() {\r\n  return this.each(raise);\r\n}\r\n\r\nfunction lower() {\r\n  if (this.previousSibling) this.parentNode.insertBefore(this, this.parentNode.firstChild);\r\n}\r\n\r\nfunction selection_lower() {\r\n  return this.each(lower);\r\n}\r\n\r\nfunction selection_append(name) {\r\n  var create = typeof name === \"function\" ? name : creator(name);\r\n  return this.select(function() {\r\n    return this.appendChild(create.apply(this, arguments));\r\n  });\r\n}\r\n\r\nfunction constantNull() {\r\n  return null;\r\n}\r\n\r\nfunction selection_insert(name, before) {\r\n  var create = typeof name === \"function\" ? name : creator(name),\r\n      select = before == null ? constantNull : typeof before === \"function\" ? before : selector(before);\r\n  return this.select(function() {\r\n    return this.insertBefore(create.apply(this, arguments), select.apply(this, arguments) || null);\r\n  });\r\n}\r\n\r\nfunction remove() {\r\n  var parent = this.parentNode;\r\n  if (parent) parent.removeChild(this);\r\n}\r\n\r\nfunction selection_remove() {\r\n  return this.each(remove);\r\n}\r\n\r\nfunction selection_cloneShallow() {\r\n  var clone = this.cloneNode(false), parent = this.parentNode;\r\n  return parent ? parent.insertBefore(clone, this.nextSibling) : clone;\r\n}\r\n\r\nfunction selection_cloneDeep() {\r\n  var clone = this.cloneNode(true), parent = this.parentNode;\r\n  return parent ? parent.insertBefore(clone, this.nextSibling) : clone;\r\n}\r\n\r\nfunction selection_clone(deep) {\r\n  return this.select(deep ? selection_cloneDeep : selection_cloneShallow);\r\n}\r\n\r\nfunction selection_datum(value) {\r\n  return arguments.length\r\n      ? this.property(\"__data__\", value)\r\n      : this.node().__data__;\r\n}\r\n\r\nvar filterEvents = {};\r\n\r\nexports.event = null;\r\n\r\nif (typeof document !== \"undefined\") {\r\n  var element = document.documentElement;\r\n  if (!(\"onmouseenter\" in element)) {\r\n    filterEvents = {mouseenter: \"mouseover\", mouseleave: \"mouseout\"};\r\n  }\r\n}\r\n\r\nfunction filterContextListener(listener, index, group) {\r\n  listener = contextListener(listener, index, group);\r\n  return function(event) {\r\n    var related = event.relatedTarget;\r\n    if (!related || (related !== this && !(related.compareDocumentPosition(this) & 8))) {\r\n      listener.call(this, event);\r\n    }\r\n  };\r\n}\r\n\r\nfunction contextListener(listener, index, group) {\r\n  return function(event1) {\r\n    var event0 = exports.event; // Events can be reentrant (e.g., focus).\r\n    exports.event = event1;\r\n    try {\r\n      listener.call(this, this.__data__, index, group);\r\n    } finally {\r\n      exports.event = event0;\r\n    }\r\n  };\r\n}\r\n\r\nfunction parseTypenames$1(typenames) {\r\n  return typenames.trim().split(/^|\\s+/).map(function(t) {\r\n    var name = \"\", i = t.indexOf(\".\");\r\n    if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);\r\n    return {type: t, name: name};\r\n  });\r\n}\r\n\r\nfunction onRemove(typename) {\r\n  return function() {\r\n    var on = this.__on;\r\n    if (!on) return;\r\n    for (var j = 0, i = -1, m = on.length, o; j < m; ++j) {\r\n      if (o = on[j], (!typename.type || o.type === typename.type) && o.name === typename.name) {\r\n        this.removeEventListener(o.type, o.listener, o.capture);\r\n      } else {\r\n        on[++i] = o;\r\n      }\r\n    }\r\n    if (++i) on.length = i;\r\n    else delete this.__on;\r\n  };\r\n}\r\n\r\nfunction onAdd(typename, value, capture) {\r\n  var wrap = filterEvents.hasOwnProperty(typename.type) ? filterContextListener : contextListener;\r\n  return function(d, i, group) {\r\n    var on = this.__on, o, listener = wrap(value, i, group);\r\n    if (on) for (var j = 0, m = on.length; j < m; ++j) {\r\n      if ((o = on[j]).type === typename.type && o.name === typename.name) {\r\n        this.removeEventListener(o.type, o.listener, o.capture);\r\n        this.addEventListener(o.type, o.listener = listener, o.capture = capture);\r\n        o.value = value;\r\n        return;\r\n      }\r\n    }\r\n    this.addEventListener(typename.type, listener, capture);\r\n    o = {type: typename.type, name: typename.name, value: value, listener: listener, capture: capture};\r\n    if (!on) this.__on = [o];\r\n    else on.push(o);\r\n  };\r\n}\r\n\r\nfunction selection_on(typename, value, capture) {\r\n  var typenames = parseTypenames$1(typename + \"\"), i, n = typenames.length, t;\r\n\r\n  if (arguments.length < 2) {\r\n    var on = this.node().__on;\r\n    if (on) for (var j = 0, m = on.length, o; j < m; ++j) {\r\n      for (i = 0, o = on[j]; i < n; ++i) {\r\n        if ((t = typenames[i]).type === o.type && t.name === o.name) {\r\n          return o.value;\r\n        }\r\n      }\r\n    }\r\n    return;\r\n  }\r\n\r\n  on = value ? onAdd : onRemove;\r\n  if (capture == null) capture = false;\r\n  for (i = 0; i < n; ++i) this.each(on(typenames[i], value, capture));\r\n  return this;\r\n}\r\n\r\nfunction customEvent(event1, listener, that, args) {\r\n  var event0 = exports.event;\r\n  event1.sourceEvent = exports.event;\r\n  exports.event = event1;\r\n  try {\r\n    return listener.apply(that, args);\r\n  } finally {\r\n    exports.event = event0;\r\n  }\r\n}\r\n\r\nfunction dispatchEvent(node, type, params) {\r\n  var window = defaultView(node),\r\n      event = window.CustomEvent;\r\n\r\n  if (typeof event === \"function\") {\r\n    event = new event(type, params);\r\n  } else {\r\n    event = window.document.createEvent(\"Event\");\r\n    if (params) event.initEvent(type, params.bubbles, params.cancelable), event.detail = params.detail;\r\n    else event.initEvent(type, false, false);\r\n  }\r\n\r\n  node.dispatchEvent(event);\r\n}\r\n\r\nfunction dispatchConstant(type, params) {\r\n  return function() {\r\n    return dispatchEvent(this, type, params);\r\n  };\r\n}\r\n\r\nfunction dispatchFunction(type, params) {\r\n  return function() {\r\n    return dispatchEvent(this, type, params.apply(this, arguments));\r\n  };\r\n}\r\n\r\nfunction selection_dispatch(type, params) {\r\n  return this.each((typeof params === \"function\"\r\n      ? dispatchFunction\r\n      : dispatchConstant)(type, params));\r\n}\r\n\r\nvar root = [null];\r\n\r\nfunction Selection(groups, parents) {\r\n  this._groups = groups;\r\n  this._parents = parents;\r\n}\r\n\r\nfunction selection() {\r\n  return new Selection([[document.documentElement]], root);\r\n}\r\n\r\nSelection.prototype = selection.prototype = {\r\n  constructor: Selection,\r\n  select: selection_select,\r\n  selectAll: selection_selectAll,\r\n  filter: selection_filter,\r\n  data: selection_data,\r\n  enter: selection_enter,\r\n  exit: selection_exit,\r\n  join: selection_join,\r\n  merge: selection_merge,\r\n  order: selection_order,\r\n  sort: selection_sort,\r\n  call: selection_call,\r\n  nodes: selection_nodes,\r\n  node: selection_node,\r\n  size: selection_size,\r\n  empty: selection_empty,\r\n  each: selection_each,\r\n  attr: selection_attr,\r\n  style: selection_style,\r\n  property: selection_property,\r\n  classed: selection_classed,\r\n  text: selection_text,\r\n  html: selection_html,\r\n  raise: selection_raise,\r\n  lower: selection_lower,\r\n  append: selection_append,\r\n  insert: selection_insert,\r\n  remove: selection_remove,\r\n  clone: selection_clone,\r\n  datum: selection_datum,\r\n  on: selection_on,\r\n  dispatch: selection_dispatch\r\n};\r\n\r\nfunction select(selector) {\r\n  return typeof selector === \"string\"\r\n      ? new Selection([[document.querySelector(selector)]], [document.documentElement])\r\n      : new Selection([[selector]], root);\r\n}\r\n\r\nfunction create(name) {\r\n  return select(creator(name).call(document.documentElement));\r\n}\r\n\r\nvar nextId = 0;\r\n\r\nfunction local() {\r\n  return new Local;\r\n}\r\n\r\nfunction Local() {\r\n  this._ = \"@\" + (++nextId).toString(36);\r\n}\r\n\r\nLocal.prototype = local.prototype = {\r\n  constructor: Local,\r\n  get: function(node) {\r\n    var id = this._;\r\n    while (!(id in node)) if (!(node = node.parentNode)) return;\r\n    return node[id];\r\n  },\r\n  set: function(node, value) {\r\n    return node[this._] = value;\r\n  },\r\n  remove: function(node) {\r\n    return this._ in node && delete node[this._];\r\n  },\r\n  toString: function() {\r\n    return this._;\r\n  }\r\n};\r\n\r\nfunction sourceEvent() {\r\n  var current = exports.event, source;\r\n  while (source = current.sourceEvent) current = source;\r\n  return current;\r\n}\r\n\r\nfunction point(node, event) {\r\n  var svg = node.ownerSVGElement || node;\r\n\r\n  if (svg.createSVGPoint) {\r\n    var point = svg.createSVGPoint();\r\n    point.x = event.clientX, point.y = event.clientY;\r\n    point = point.matrixTransform(node.getScreenCTM().inverse());\r\n    return [point.x, point.y];\r\n  }\r\n\r\n  var rect = node.getBoundingClientRect();\r\n  return [event.clientX - rect.left - node.clientLeft, event.clientY - rect.top - node.clientTop];\r\n}\r\n\r\nfunction mouse(node) {\r\n  var event = sourceEvent();\r\n  if (event.changedTouches) event = event.changedTouches[0];\r\n  return point(node, event);\r\n}\r\n\r\nfunction selectAll(selector) {\r\n  return typeof selector === \"string\"\r\n      ? new Selection([document.querySelectorAll(selector)], [document.documentElement])\r\n      : new Selection([selector == null ? [] : selector], root);\r\n}\r\n\r\nfunction touch(node, touches, identifier) {\r\n  if (arguments.length < 3) identifier = touches, touches = sourceEvent().changedTouches;\r\n\r\n  for (var i = 0, n = touches ? touches.length : 0, touch; i < n; ++i) {\r\n    if ((touch = touches[i]).identifier === identifier) {\r\n      return point(node, touch);\r\n    }\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\nfunction touches(node, touches) {\r\n  if (touches == null) touches = sourceEvent().touches;\r\n\r\n  for (var i = 0, n = touches ? touches.length : 0, points = new Array(n); i < n; ++i) {\r\n    points[i] = point(node, touches[i]);\r\n  }\r\n\r\n  return points;\r\n}\r\n\r\nfunction nopropagation() {\r\n  exports.event.stopImmediatePropagation();\r\n}\r\n\r\nfunction noevent() {\r\n  exports.event.preventDefault();\r\n  exports.event.stopImmediatePropagation();\r\n}\r\n\r\nfunction dragDisable(view) {\r\n  var root = view.document.documentElement,\r\n      selection = select(view).on(\"dragstart.drag\", noevent, true);\r\n  if (\"onselectstart\" in root) {\r\n    selection.on(\"selectstart.drag\", noevent, true);\r\n  } else {\r\n    root.__noselect = root.style.MozUserSelect;\r\n    root.style.MozUserSelect = \"none\";\r\n  }\r\n}\r\n\r\nfunction yesdrag(view, noclick) {\r\n  var root = view.document.documentElement,\r\n      selection = select(view).on(\"dragstart.drag\", null);\r\n  if (noclick) {\r\n    selection.on(\"click.drag\", noevent, true);\r\n    setTimeout(function() { selection.on(\"click.drag\", null); }, 0);\r\n  }\r\n  if (\"onselectstart\" in root) {\r\n    selection.on(\"selectstart.drag\", null);\r\n  } else {\r\n    root.style.MozUserSelect = root.__noselect;\r\n    delete root.__noselect;\r\n  }\r\n}\r\n\r\nfunction constant$2(x) {\r\n  return function() {\r\n    return x;\r\n  };\r\n}\r\n\r\nfunction DragEvent(target, type, subject, id, active, x, y, dx, dy, dispatch) {\r\n  this.target = target;\r\n  this.type = type;\r\n  this.subject = subject;\r\n  this.identifier = id;\r\n  this.active = active;\r\n  this.x = x;\r\n  this.y = y;\r\n  this.dx = dx;\r\n  this.dy = dy;\r\n  this._ = dispatch;\r\n}\r\n\r\nDragEvent.prototype.on = function() {\r\n  var value = this._.on.apply(this._, arguments);\r\n  return value === this._ ? this : value;\r\n};\r\n\r\n// Ignore right-click, since that should open the context menu.\r\nfunction defaultFilter() {\r\n  return !exports.event.ctrlKey && !exports.event.button;\r\n}\r\n\r\nfunction defaultContainer() {\r\n  return this.parentNode;\r\n}\r\n\r\nfunction defaultSubject(d) {\r\n  return d == null ? {x: exports.event.x, y: exports.event.y} : d;\r\n}\r\n\r\nfunction defaultTouchable() {\r\n  return navigator.maxTouchPoints || (\"ontouchstart\" in this);\r\n}\r\n\r\nfunction drag() {\r\n  var filter = defaultFilter,\r\n      container = defaultContainer,\r\n      subject = defaultSubject,\r\n      touchable = defaultTouchable,\r\n      gestures = {},\r\n      listeners = dispatch(\"start\", \"drag\", \"end\"),\r\n      active = 0,\r\n      mousedownx,\r\n      mousedowny,\r\n      mousemoving,\r\n      touchending,\r\n      clickDistance2 = 0;\r\n\r\n  function drag(selection) {\r\n    selection\r\n        .on(\"mousedown.drag\", mousedowned)\r\n      .filter(touchable)\r\n        .on(\"touchstart.drag\", touchstarted)\r\n        .on(\"touchmove.drag\", touchmoved)\r\n        .on(\"touchend.drag touchcancel.drag\", touchended)\r\n        .style(\"touch-action\", \"none\")\r\n        .style(\"-webkit-tap-highlight-color\", \"rgba(0,0,0,0)\");\r\n  }\r\n\r\n  function mousedowned() {\r\n    if (touchending || !filter.apply(this, arguments)) return;\r\n    var gesture = beforestart(\"mouse\", container.apply(this, arguments), mouse, this, arguments);\r\n    if (!gesture) return;\r\n    select(exports.event.view).on(\"mousemove.drag\", mousemoved, true).on(\"mouseup.drag\", mouseupped, true);\r\n    dragDisable(exports.event.view);\r\n    nopropagation();\r\n    mousemoving = false;\r\n    mousedownx = exports.event.clientX;\r\n    mousedowny = exports.event.clientY;\r\n    gesture(\"start\");\r\n  }\r\n\r\n  function mousemoved() {\r\n    noevent();\r\n    if (!mousemoving) {\r\n      var dx = exports.event.clientX - mousedownx, dy = exports.event.clientY - mousedowny;\r\n      mousemoving = dx * dx + dy * dy > clickDistance2;\r\n    }\r\n    gestures.mouse(\"drag\");\r\n  }\r\n\r\n  function mouseupped() {\r\n    select(exports.event.view).on(\"mousemove.drag mouseup.drag\", null);\r\n    yesdrag(exports.event.view, mousemoving);\r\n    noevent();\r\n    gestures.mouse(\"end\");\r\n  }\r\n\r\n  function touchstarted() {\r\n    if (!filter.apply(this, arguments)) return;\r\n    var touches = exports.event.changedTouches,\r\n        c = container.apply(this, arguments),\r\n        n = touches.length, i, gesture;\r\n\r\n    for (i = 0; i < n; ++i) {\r\n      if (gesture = beforestart(touches[i].identifier, c, touch, this, arguments)) {\r\n        nopropagation();\r\n        gesture(\"start\");\r\n      }\r\n    }\r\n  }\r\n\r\n  function touchmoved() {\r\n    var touches = exports.event.changedTouches,\r\n        n = touches.length, i, gesture;\r\n\r\n    for (i = 0; i < n; ++i) {\r\n      if (gesture = gestures[touches[i].identifier]) {\r\n        noevent();\r\n        gesture(\"drag\");\r\n      }\r\n    }\r\n  }\r\n\r\n  function touchended() {\r\n    var touches = exports.event.changedTouches,\r\n        n = touches.length, i, gesture;\r\n\r\n    if (touchending) clearTimeout(touchending);\r\n    touchending = setTimeout(function() { touchending = null; }, 500); // Ghost clicks are delayed!\r\n    for (i = 0; i < n; ++i) {\r\n      if (gesture = gestures[touches[i].identifier]) {\r\n        nopropagation();\r\n        gesture(\"end\");\r\n      }\r\n    }\r\n  }\r\n\r\n  function beforestart(id, container, point, that, args) {\r\n    var p = point(container, id), s, dx, dy,\r\n        sublisteners = listeners.copy();\r\n\r\n    if (!customEvent(new DragEvent(drag, \"beforestart\", s, id, active, p[0], p[1], 0, 0, sublisteners), function() {\r\n      if ((exports.event.subject = s = subject.apply(that, args)) == null) return false;\r\n      dx = s.x - p[0] || 0;\r\n      dy = s.y - p[1] || 0;\r\n      return true;\r\n    })) return;\r\n\r\n    return function gesture(type) {\r\n      var p0 = p, n;\r\n      switch (type) {\r\n        case \"start\": gestures[id] = gesture, n = active++; break;\r\n        case \"end\": delete gestures[id], --active; // nobreak\r\n        case \"drag\": p = point(container, id), n = active; break;\r\n      }\r\n      customEvent(new DragEvent(drag, type, s, id, n, p[0] + dx, p[1] + dy, p[0] - p0[0], p[1] - p0[1], sublisteners), sublisteners.apply, sublisteners, [type, that, args]);\r\n    };\r\n  }\r\n\r\n  drag.filter = function(_) {\r\n    return arguments.length ? (filter = typeof _ === \"function\" ? _ : constant$2(!!_), drag) : filter;\r\n  };\r\n\r\n  drag.container = function(_) {\r\n    return arguments.length ? (container = typeof _ === \"function\" ? _ : constant$2(_), drag) : container;\r\n  };\r\n\r\n  drag.subject = function(_) {\r\n    return arguments.length ? (subject = typeof _ === \"function\" ? _ : constant$2(_), drag) : subject;\r\n  };\r\n\r\n  drag.touchable = function(_) {\r\n    return arguments.length ? (touchable = typeof _ === \"function\" ? _ : constant$2(!!_), drag) : touchable;\r\n  };\r\n\r\n  drag.on = function() {\r\n    var value = listeners.on.apply(listeners, arguments);\r\n    return value === listeners ? drag : value;\r\n  };\r\n\r\n  drag.clickDistance = function(_) {\r\n    return arguments.length ? (clickDistance2 = (_ = +_) * _, drag) : Math.sqrt(clickDistance2);\r\n  };\r\n\r\n  return drag;\r\n}\r\n\r\nfunction define(constructor, factory, prototype) {\r\n  constructor.prototype = factory.prototype = prototype;\r\n  prototype.constructor = constructor;\r\n}\r\n\r\nfunction extend(parent, definition) {\r\n  var prototype = Object.create(parent.prototype);\r\n  for (var key in definition) prototype[key] = definition[key];\r\n  return prototype;\r\n}\r\n\r\nfunction Color() {}\r\n\r\nvar darker = 0.7;\r\nvar brighter = 1 / darker;\r\n\r\nvar reI = \"\\\\s*([+-]?\\\\d+)\\\\s*\",\r\n    reN = \"\\\\s*([+-]?\\\\d*\\\\.?\\\\d+(?:[eE][+-]?\\\\d+)?)\\\\s*\",\r\n    reP = \"\\\\s*([+-]?\\\\d*\\\\.?\\\\d+(?:[eE][+-]?\\\\d+)?)%\\\\s*\",\r\n    reHex = /^#([0-9a-f]{3,8})$/,\r\n    reRgbInteger = new RegExp(\"^rgb\\\\(\" + [reI, reI, reI] + \"\\\\)$\"),\r\n    reRgbPercent = new RegExp(\"^rgb\\\\(\" + [reP, reP, reP] + \"\\\\)$\"),\r\n    reRgbaInteger = new RegExp(\"^rgba\\\\(\" + [reI, reI, reI, reN] + \"\\\\)$\"),\r\n    reRgbaPercent = new RegExp(\"^rgba\\\\(\" + [reP, reP, reP, reN] + \"\\\\)$\"),\r\n    reHslPercent = new RegExp(\"^hsl\\\\(\" + [reN, reP, reP] + \"\\\\)$\"),\r\n    reHslaPercent = new RegExp(\"^hsla\\\\(\" + [reN, reP, reP, reN] + \"\\\\)$\");\r\n\r\nvar named = {\r\n  aliceblue: 0xf0f8ff,\r\n  antiquewhite: 0xfaebd7,\r\n  aqua: 0x00ffff,\r\n  aquamarine: 0x7fffd4,\r\n  azure: 0xf0ffff,\r\n  beige: 0xf5f5dc,\r\n  bisque: 0xffe4c4,\r\n  black: 0x000000,\r\n  blanchedalmond: 0xffebcd,\r\n  blue: 0x0000ff,\r\n  blueviolet: 0x8a2be2,\r\n  brown: 0xa52a2a,\r\n  burlywood: 0xdeb887,\r\n  cadetblue: 0x5f9ea0,\r\n  chartreuse: 0x7fff00,\r\n  chocolate: 0xd2691e,\r\n  coral: 0xff7f50,\r\n  cornflowerblue: 0x6495ed,\r\n  cornsilk: 0xfff8dc,\r\n  crimson: 0xdc143c,\r\n  cyan: 0x00ffff,\r\n  darkblue: 0x00008b,\r\n  darkcyan: 0x008b8b,\r\n  darkgoldenrod: 0xb8860b,\r\n  darkgray: 0xa9a9a9,\r\n  darkgreen: 0x006400,\r\n  darkgrey: 0xa9a9a9,\r\n  darkkhaki: 0xbdb76b,\r\n  darkmagenta: 0x8b008b,\r\n  darkolivegreen: 0x556b2f,\r\n  darkorange: 0xff8c00,\r\n  darkorchid: 0x9932cc,\r\n  darkred: 0x8b0000,\r\n  darksalmon: 0xe9967a,\r\n  darkseagreen: 0x8fbc8f,\r\n  darkslateblue: 0x483d8b,\r\n  darkslategray: 0x2f4f4f,\r\n  darkslategrey: 0x2f4f4f,\r\n  darkturquoise: 0x00ced1,\r\n  darkviolet: 0x9400d3,\r\n  deeppink: 0xff1493,\r\n  deepskyblue: 0x00bfff,\r\n  dimgray: 0x696969,\r\n  dimgrey: 0x696969,\r\n  dodgerblue: 0x1e90ff,\r\n  firebrick: 0xb22222,\r\n  floralwhite: 0xfffaf0,\r\n  forestgreen: 0x228b22,\r\n  fuchsia: 0xff00ff,\r\n  gainsboro: 0xdcdcdc,\r\n  ghostwhite: 0xf8f8ff,\r\n  gold: 0xffd700,\r\n  goldenrod: 0xdaa520,\r\n  gray: 0x808080,\r\n  green: 0x008000,\r\n  greenyellow: 0xadff2f,\r\n  grey: 0x808080,\r\n  honeydew: 0xf0fff0,\r\n  hotpink: 0xff69b4,\r\n  indianred: 0xcd5c5c,\r\n  indigo: 0x4b0082,\r\n  ivory: 0xfffff0,\r\n  khaki: 0xf0e68c,\r\n  lavender: 0xe6e6fa,\r\n  lavenderblush: 0xfff0f5,\r\n  lawngreen: 0x7cfc00,\r\n  lemonchiffon: 0xfffacd,\r\n  lightblue: 0xadd8e6,\r\n  lightcoral: 0xf08080,\r\n  lightcyan: 0xe0ffff,\r\n  lightgoldenrodyellow: 0xfafad2,\r\n  lightgray: 0xd3d3d3,\r\n  lightgreen: 0x90ee90,\r\n  lightgrey: 0xd3d3d3,\r\n  lightpink: 0xffb6c1,\r\n  lightsalmon: 0xffa07a,\r\n  lightseagreen: 0x20b2aa,\r\n  lightskyblue: 0x87cefa,\r\n  lightslategray: 0x778899,\r\n  lightslategrey: 0x778899,\r\n  lightsteelblue: 0xb0c4de,\r\n  lightyellow: 0xffffe0,\r\n  lime: 0x00ff00,\r\n  limegreen: 0x32cd32,\r\n  linen: 0xfaf0e6,\r\n  magenta: 0xff00ff,\r\n  maroon: 0x800000,\r\n  mediumaquamarine: 0x66cdaa,\r\n  mediumblue: 0x0000cd,\r\n  mediumorchid: 0xba55d3,\r\n  mediumpurple: 0x9370db,\r\n  mediumseagreen: 0x3cb371,\r\n  mediumslateblue: 0x7b68ee,\r\n  mediumspringgreen: 0x00fa9a,\r\n  mediumturquoise: 0x48d1cc,\r\n  mediumvioletred: 0xc71585,\r\n  midnightblue: 0x191970,\r\n  mintcream: 0xf5fffa,\r\n  mistyrose: 0xffe4e1,\r\n  moccasin: 0xffe4b5,\r\n  navajowhite: 0xffdead,\r\n  navy: 0x000080,\r\n  oldlace: 0xfdf5e6,\r\n  olive: 0x808000,\r\n  olivedrab: 0x6b8e23,\r\n  orange: 0xffa500,\r\n  orangered: 0xff4500,\r\n  orchid: 0xda70d6,\r\n  palegoldenrod: 0xeee8aa,\r\n  palegreen: 0x98fb98,\r\n  paleturquoise: 0xafeeee,\r\n  palevioletred: 0xdb7093,\r\n  papayawhip: 0xffefd5,\r\n  peachpuff: 0xffdab9,\r\n  peru: 0xcd853f,\r\n  pink: 0xffc0cb,\r\n  plum: 0xdda0dd,\r\n  powderblue: 0xb0e0e6,\r\n  purple: 0x800080,\r\n  rebeccapurple: 0x663399,\r\n  red: 0xff0000,\r\n  rosybrown: 0xbc8f8f,\r\n  royalblue: 0x4169e1,\r\n  saddlebrown: 0x8b4513,\r\n  salmon: 0xfa8072,\r\n  sandybrown: 0xf4a460,\r\n  seagreen: 0x2e8b57,\r\n  seashell: 0xfff5ee,\r\n  sienna: 0xa0522d,\r\n  silver: 0xc0c0c0,\r\n  skyblue: 0x87ceeb,\r\n  slateblue: 0x6a5acd,\r\n  slategray: 0x708090,\r\n  slategrey: 0x708090,\r\n  snow: 0xfffafa,\r\n  springgreen: 0x00ff7f,\r\n  steelblue: 0x4682b4,\r\n  tan: 0xd2b48c,\r\n  teal: 0x008080,\r\n  thistle: 0xd8bfd8,\r\n  tomato: 0xff6347,\r\n  turquoise: 0x40e0d0,\r\n  violet: 0xee82ee,\r\n  wheat: 0xf5deb3,\r\n  white: 0xffffff,\r\n  whitesmoke: 0xf5f5f5,\r\n  yellow: 0xffff00,\r\n  yellowgreen: 0x9acd32\r\n};\r\n\r\ndefine(Color, color, {\r\n  copy: function(channels) {\r\n    return Object.assign(new this.constructor, this, channels);\r\n  },\r\n  displayable: function() {\r\n    return this.rgb().displayable();\r\n  },\r\n  hex: color_formatHex, // Deprecated! Use color.formatHex.\r\n  formatHex: color_formatHex,\r\n  formatHsl: color_formatHsl,\r\n  formatRgb: color_formatRgb,\r\n  toString: color_formatRgb\r\n});\r\n\r\nfunction color_formatHex() {\r\n  return this.rgb().formatHex();\r\n}\r\n\r\nfunction color_formatHsl() {\r\n  return hslConvert(this).formatHsl();\r\n}\r\n\r\nfunction color_formatRgb() {\r\n  return this.rgb().formatRgb();\r\n}\r\n\r\nfunction color(format) {\r\n  var m, l;\r\n  format = (format + \"\").trim().toLowerCase();\r\n  return (m = reHex.exec(format)) ? (l = m[1].length, m = parseInt(m[1], 16), l === 6 ? rgbn(m) // #ff0000\r\n      : l === 3 ? new Rgb((m >> 8 & 0xf) | (m >> 4 & 0xf0), (m >> 4 & 0xf) | (m & 0xf0), ((m & 0xf) << 4) | (m & 0xf), 1) // #f00\r\n      : l === 8 ? new Rgb(m >> 24 & 0xff, m >> 16 & 0xff, m >> 8 & 0xff, (m & 0xff) / 0xff) // #ff000000\r\n      : l === 4 ? new Rgb((m >> 12 & 0xf) | (m >> 8 & 0xf0), (m >> 8 & 0xf) | (m >> 4 & 0xf0), (m >> 4 & 0xf) | (m & 0xf0), (((m & 0xf) << 4) | (m & 0xf)) / 0xff) // #f000\r\n      : null) // invalid hex\r\n      : (m = reRgbInteger.exec(format)) ? new Rgb(m[1], m[2], m[3], 1) // rgb(255, 0, 0)\r\n      : (m = reRgbPercent.exec(format)) ? new Rgb(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1) // rgb(100%, 0%, 0%)\r\n      : (m = reRgbaInteger.exec(format)) ? rgba(m[1], m[2], m[3], m[4]) // rgba(255, 0, 0, 1)\r\n      : (m = reRgbaPercent.exec(format)) ? rgba(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]) // rgb(100%, 0%, 0%, 1)\r\n      : (m = reHslPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, 1) // hsl(120, 50%, 50%)\r\n      : (m = reHslaPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, m[4]) // hsla(120, 50%, 50%, 1)\r\n      : named.hasOwnProperty(format) ? rgbn(named[format]) // eslint-disable-line no-prototype-builtins\r\n      : format === \"transparent\" ? new Rgb(NaN, NaN, NaN, 0)\r\n      : null;\r\n}\r\n\r\nfunction rgbn(n) {\r\n  return new Rgb(n >> 16 & 0xff, n >> 8 & 0xff, n & 0xff, 1);\r\n}\r\n\r\nfunction rgba(r, g, b, a) {\r\n  if (a <= 0) r = g = b = NaN;\r\n  return new Rgb(r, g, b, a);\r\n}\r\n\r\nfunction rgbConvert(o) {\r\n  if (!(o instanceof Color)) o = color(o);\r\n  if (!o) return new Rgb;\r\n  o = o.rgb();\r\n  return new Rgb(o.r, o.g, o.b, o.opacity);\r\n}\r\n\r\nfunction rgb(r, g, b, opacity) {\r\n  return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity == null ? 1 : opacity);\r\n}\r\n\r\nfunction Rgb(r, g, b, opacity) {\r\n  this.r = +r;\r\n  this.g = +g;\r\n  this.b = +b;\r\n  this.opacity = +opacity;\r\n}\r\n\r\ndefine(Rgb, rgb, extend(Color, {\r\n  brighter: function(k) {\r\n    k = k == null ? brighter : Math.pow(brighter, k);\r\n    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);\r\n  },\r\n  darker: function(k) {\r\n    k = k == null ? darker : Math.pow(darker, k);\r\n    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);\r\n  },\r\n  rgb: function() {\r\n    return this;\r\n  },\r\n  displayable: function() {\r\n    return (-0.5 <= this.r && this.r < 255.5)\r\n        && (-0.5 <= this.g && this.g < 255.5)\r\n        && (-0.5 <= this.b && this.b < 255.5)\r\n        && (0 <= this.opacity && this.opacity <= 1);\r\n  },\r\n  hex: rgb_formatHex, // Deprecated! Use color.formatHex.\r\n  formatHex: rgb_formatHex,\r\n  formatRgb: rgb_formatRgb,\r\n  toString: rgb_formatRgb\r\n}));\r\n\r\nfunction rgb_formatHex() {\r\n  return \"#\" + hex(this.r) + hex(this.g) + hex(this.b);\r\n}\r\n\r\nfunction rgb_formatRgb() {\r\n  var a = this.opacity; a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));\r\n  return (a === 1 ? \"rgb(\" : \"rgba(\")\r\n      + Math.max(0, Math.min(255, Math.round(this.r) || 0)) + \", \"\r\n      + Math.max(0, Math.min(255, Math.round(this.g) || 0)) + \", \"\r\n      + Math.max(0, Math.min(255, Math.round(this.b) || 0))\r\n      + (a === 1 ? \")\" : \", \" + a + \")\");\r\n}\r\n\r\nfunction hex(value) {\r\n  value = Math.max(0, Math.min(255, Math.round(value) || 0));\r\n  return (value < 16 ? \"0\" : \"\") + value.toString(16);\r\n}\r\n\r\nfunction hsla(h, s, l, a) {\r\n  if (a <= 0) h = s = l = NaN;\r\n  else if (l <= 0 || l >= 1) h = s = NaN;\r\n  else if (s <= 0) h = NaN;\r\n  return new Hsl(h, s, l, a);\r\n}\r\n\r\nfunction hslConvert(o) {\r\n  if (o instanceof Hsl) return new Hsl(o.h, o.s, o.l, o.opacity);\r\n  if (!(o instanceof Color)) o = color(o);\r\n  if (!o) return new Hsl;\r\n  if (o instanceof Hsl) return o;\r\n  o = o.rgb();\r\n  var r = o.r / 255,\r\n      g = o.g / 255,\r\n      b = o.b / 255,\r\n      min = Math.min(r, g, b),\r\n      max = Math.max(r, g, b),\r\n      h = NaN,\r\n      s = max - min,\r\n      l = (max + min) / 2;\r\n  if (s) {\r\n    if (r === max) h = (g - b) / s + (g < b) * 6;\r\n    else if (g === max) h = (b - r) / s + 2;\r\n    else h = (r - g) / s + 4;\r\n    s /= l < 0.5 ? max + min : 2 - max - min;\r\n    h *= 60;\r\n  } else {\r\n    s = l > 0 && l < 1 ? 0 : h;\r\n  }\r\n  return new Hsl(h, s, l, o.opacity);\r\n}\r\n\r\nfunction hsl(h, s, l, opacity) {\r\n  return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s, l, opacity == null ? 1 : opacity);\r\n}\r\n\r\nfunction Hsl(h, s, l, opacity) {\r\n  this.h = +h;\r\n  this.s = +s;\r\n  this.l = +l;\r\n  this.opacity = +opacity;\r\n}\r\n\r\ndefine(Hsl, hsl, extend(Color, {\r\n  brighter: function(k) {\r\n    k = k == null ? brighter : Math.pow(brighter, k);\r\n    return new Hsl(this.h, this.s, this.l * k, this.opacity);\r\n  },\r\n  darker: function(k) {\r\n    k = k == null ? darker : Math.pow(darker, k);\r\n    return new Hsl(this.h, this.s, this.l * k, this.opacity);\r\n  },\r\n  rgb: function() {\r\n    var h = this.h % 360 + (this.h < 0) * 360,\r\n        s = isNaN(h) || isNaN(this.s) ? 0 : this.s,\r\n        l = this.l,\r\n        m2 = l + (l < 0.5 ? l : 1 - l) * s,\r\n        m1 = 2 * l - m2;\r\n    return new Rgb(\r\n      hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2),\r\n      hsl2rgb(h, m1, m2),\r\n      hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2),\r\n      this.opacity\r\n    );\r\n  },\r\n  displayable: function() {\r\n    return (0 <= this.s && this.s <= 1 || isNaN(this.s))\r\n        && (0 <= this.l && this.l <= 1)\r\n        && (0 <= this.opacity && this.opacity <= 1);\r\n  },\r\n  formatHsl: function() {\r\n    var a = this.opacity; a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));\r\n    return (a === 1 ? \"hsl(\" : \"hsla(\")\r\n        + (this.h || 0) + \", \"\r\n        + (this.s || 0) * 100 + \"%, \"\r\n        + (this.l || 0) * 100 + \"%\"\r\n        + (a === 1 ? \")\" : \", \" + a + \")\");\r\n  }\r\n}));\r\n\r\n/* From FvD 13.37, CSS Color Module Level 3 */\r\nfunction hsl2rgb(h, m1, m2) {\r\n  return (h < 60 ? m1 + (m2 - m1) * h / 60\r\n      : h < 180 ? m2\r\n      : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60\r\n      : m1) * 255;\r\n}\r\n\r\nvar deg2rad = Math.PI / 180;\r\nvar rad2deg = 180 / Math.PI;\r\n\r\n// https://observablehq.com/@mbostock/lab-and-rgb\r\nvar K = 18,\r\n    Xn = 0.96422,\r\n    Yn = 1,\r\n    Zn = 0.82521,\r\n    t0 = 4 / 29,\r\n    t1 = 6 / 29,\r\n    t2 = 3 * t1 * t1,\r\n    t3 = t1 * t1 * t1;\r\n\r\nfunction labConvert(o) {\r\n  if (o instanceof Lab) return new Lab(o.l, o.a, o.b, o.opacity);\r\n  if (o instanceof Hcl) return hcl2lab(o);\r\n  if (!(o instanceof Rgb)) o = rgbConvert(o);\r\n  var r = rgb2lrgb(o.r),\r\n      g = rgb2lrgb(o.g),\r\n      b = rgb2lrgb(o.b),\r\n      y = xyz2lab((0.2225045 * r + 0.7168786 * g + 0.0606169 * b) / Yn), x, z;\r\n  if (r === g && g === b) x = z = y; else {\r\n    x = xyz2lab((0.4360747 * r + 0.3850649 * g + 0.1430804 * b) / Xn);\r\n    z = xyz2lab((0.0139322 * r + 0.0971045 * g + 0.7141733 * b) / Zn);\r\n  }\r\n  return new Lab(116 * y - 16, 500 * (x - y), 200 * (y - z), o.opacity);\r\n}\r\n\r\nfunction gray(l, opacity) {\r\n  return new Lab(l, 0, 0, opacity == null ? 1 : opacity);\r\n}\r\n\r\nfunction lab(l, a, b, opacity) {\r\n  return arguments.length === 1 ? labConvert(l) : new Lab(l, a, b, opacity == null ? 1 : opacity);\r\n}\r\n\r\nfunction Lab(l, a, b, opacity) {\r\n  this.l = +l;\r\n  this.a = +a;\r\n  this.b = +b;\r\n  this.opacity = +opacity;\r\n}\r\n\r\ndefine(Lab, lab, extend(Color, {\r\n  brighter: function(k) {\r\n    return new Lab(this.l + K * (k == null ? 1 : k), this.a, this.b, this.opacity);\r\n  },\r\n  darker: function(k) {\r\n    return new Lab(this.l - K * (k == null ? 1 : k), this.a, this.b, this.opacity);\r\n  },\r\n  rgb: function() {\r\n    var y = (this.l + 16) / 116,\r\n        x = isNaN(this.a) ? y : y + this.a / 500,\r\n        z = isNaN(this.b) ? y : y - this.b / 200;\r\n    x = Xn * lab2xyz(x);\r\n    y = Yn * lab2xyz(y);\r\n    z = Zn * lab2xyz(z);\r\n    return new Rgb(\r\n      lrgb2rgb( 3.1338561 * x - 1.6168667 * y - 0.4906146 * z),\r\n      lrgb2rgb(-0.9787684 * x + 1.9161415 * y + 0.0334540 * z),\r\n      lrgb2rgb( 0.0719453 * x - 0.2289914 * y + 1.4052427 * z),\r\n      this.opacity\r\n    );\r\n  }\r\n}));\r\n\r\nfunction xyz2lab(t) {\r\n  return t > t3 ? Math.pow(t, 1 / 3) : t / t2 + t0;\r\n}\r\n\r\nfunction lab2xyz(t) {\r\n  return t > t1 ? t * t * t : t2 * (t - t0);\r\n}\r\n\r\nfunction lrgb2rgb(x) {\r\n  return 255 * (x <= 0.0031308 ? 12.92 * x : 1.055 * Math.pow(x, 1 / 2.4) - 0.055);\r\n}\r\n\r\nfunction rgb2lrgb(x) {\r\n  return (x /= 255) <= 0.04045 ? x / 12.92 : Math.pow((x + 0.055) / 1.055, 2.4);\r\n}\r\n\r\nfunction hclConvert(o) {\r\n  if (o instanceof Hcl) return new Hcl(o.h, o.c, o.l, o.opacity);\r\n  if (!(o instanceof Lab)) o = labConvert(o);\r\n  if (o.a === 0 && o.b === 0) return new Hcl(NaN, 0 < o.l && o.l < 100 ? 0 : NaN, o.l, o.opacity);\r\n  var h = Math.atan2(o.b, o.a) * rad2deg;\r\n  return new Hcl(h < 0 ? h + 360 : h, Math.sqrt(o.a * o.a + o.b * o.b), o.l, o.opacity);\r\n}\r\n\r\nfunction lch(l, c, h, opacity) {\r\n  return arguments.length === 1 ? hclConvert(l) : new Hcl(h, c, l, opacity == null ? 1 : opacity);\r\n}\r\n\r\nfunction hcl(h, c, l, opacity) {\r\n  return arguments.length === 1 ? hclConvert(h) : new Hcl(h, c, l, opacity == null ? 1 : opacity);\r\n}\r\n\r\nfunction Hcl(h, c, l, opacity) {\r\n  this.h = +h;\r\n  this.c = +c;\r\n  this.l = +l;\r\n  this.opacity = +opacity;\r\n}\r\n\r\nfunction hcl2lab(o) {\r\n  if (isNaN(o.h)) return new Lab(o.l, 0, 0, o.opacity);\r\n  var h = o.h * deg2rad;\r\n  return new Lab(o.l, Math.cos(h) * o.c, Math.sin(h) * o.c, o.opacity);\r\n}\r\n\r\ndefine(Hcl, hcl, extend(Color, {\r\n  brighter: function(k) {\r\n    return new Hcl(this.h, this.c, this.l + K * (k == null ? 1 : k), this.opacity);\r\n  },\r\n  darker: function(k) {\r\n    return new Hcl(this.h, this.c, this.l - K * (k == null ? 1 : k), this.opacity);\r\n  },\r\n  rgb: function() {\r\n    return hcl2lab(this).rgb();\r\n  }\r\n}));\r\n\r\nvar A = -0.14861,\r\n    B = +1.78277,\r\n    C = -0.29227,\r\n    D = -0.90649,\r\n    E = +1.97294,\r\n    ED = E * D,\r\n    EB = E * B,\r\n    BC_DA = B * C - D * A;\r\n\r\nfunction cubehelixConvert(o) {\r\n  if (o instanceof Cubehelix) return new Cubehelix(o.h, o.s, o.l, o.opacity);\r\n  if (!(o instanceof Rgb)) o = rgbConvert(o);\r\n  var r = o.r / 255,\r\n      g = o.g / 255,\r\n      b = o.b / 255,\r\n      l = (BC_DA * b + ED * r - EB * g) / (BC_DA + ED - EB),\r\n      bl = b - l,\r\n      k = (E * (g - l) - C * bl) / D,\r\n      s = Math.sqrt(k * k + bl * bl) / (E * l * (1 - l)), // NaN if l=0 or l=1\r\n      h = s ? Math.atan2(k, bl) * rad2deg - 120 : NaN;\r\n  return new Cubehelix(h < 0 ? h + 360 : h, s, l, o.opacity);\r\n}\r\n\r\nfunction cubehelix(h, s, l, opacity) {\r\n  return arguments.length === 1 ? cubehelixConvert(h) : new Cubehelix(h, s, l, opacity == null ? 1 : opacity);\r\n}\r\n\r\nfunction Cubehelix(h, s, l, opacity) {\r\n  this.h = +h;\r\n  this.s = +s;\r\n  this.l = +l;\r\n  this.opacity = +opacity;\r\n}\r\n\r\ndefine(Cubehelix, cubehelix, extend(Color, {\r\n  brighter: function(k) {\r\n    k = k == null ? brighter : Math.pow(brighter, k);\r\n    return new Cubehelix(this.h, this.s, this.l * k, this.opacity);\r\n  },\r\n  darker: function(k) {\r\n    k = k == null ? darker : Math.pow(darker, k);\r\n    return new Cubehelix(this.h, this.s, this.l * k, this.opacity);\r\n  },\r\n  rgb: function() {\r\n    var h = isNaN(this.h) ? 0 : (this.h + 120) * deg2rad,\r\n        l = +this.l,\r\n        a = isNaN(this.s) ? 0 : this.s * l * (1 - l),\r\n        cosh = Math.cos(h),\r\n        sinh = Math.sin(h);\r\n    return new Rgb(\r\n      255 * (l + a * (A * cosh + B * sinh)),\r\n      255 * (l + a * (C * cosh + D * sinh)),\r\n      255 * (l + a * (E * cosh)),\r\n      this.opacity\r\n    );\r\n  }\r\n}));\r\n\r\nfunction basis(t1, v0, v1, v2, v3) {\r\n  var t2 = t1 * t1, t3 = t2 * t1;\r\n  return ((1 - 3 * t1 + 3 * t2 - t3) * v0\r\n      + (4 - 6 * t2 + 3 * t3) * v1\r\n      + (1 + 3 * t1 + 3 * t2 - 3 * t3) * v2\r\n      + t3 * v3) / 6;\r\n}\r\n\r\nfunction basis$1(values) {\r\n  var n = values.length - 1;\r\n  return function(t) {\r\n    var i = t <= 0 ? (t = 0) : t >= 1 ? (t = 1, n - 1) : Math.floor(t * n),\r\n        v1 = values[i],\r\n        v2 = values[i + 1],\r\n        v0 = i > 0 ? values[i - 1] : 2 * v1 - v2,\r\n        v3 = i < n - 1 ? values[i + 2] : 2 * v2 - v1;\r\n    return basis((t - i / n) * n, v0, v1, v2, v3);\r\n  };\r\n}\r\n\r\nfunction basisClosed(values) {\r\n  var n = values.length;\r\n  return function(t) {\r\n    var i = Math.floor(((t %= 1) < 0 ? ++t : t) * n),\r\n        v0 = values[(i + n - 1) % n],\r\n        v1 = values[i % n],\r\n        v2 = values[(i + 1) % n],\r\n        v3 = values[(i + 2) % n];\r\n    return basis((t - i / n) * n, v0, v1, v2, v3);\r\n  };\r\n}\r\n\r\nfunction constant$3(x) {\r\n  return function() {\r\n    return x;\r\n  };\r\n}\r\n\r\nfunction linear(a, d) {\r\n  return function(t) {\r\n    return a + t * d;\r\n  };\r\n}\r\n\r\nfunction exponential(a, b, y) {\r\n  return a = Math.pow(a, y), b = Math.pow(b, y) - a, y = 1 / y, function(t) {\r\n    return Math.pow(a + t * b, y);\r\n  };\r\n}\r\n\r\nfunction hue(a, b) {\r\n  var d = b - a;\r\n  return d ? linear(a, d > 180 || d < -180 ? d - 360 * Math.round(d / 360) : d) : constant$3(isNaN(a) ? b : a);\r\n}\r\n\r\nfunction gamma(y) {\r\n  return (y = +y) === 1 ? nogamma : function(a, b) {\r\n    return b - a ? exponential(a, b, y) : constant$3(isNaN(a) ? b : a);\r\n  };\r\n}\r\n\r\nfunction nogamma(a, b) {\r\n  var d = b - a;\r\n  return d ? linear(a, d) : constant$3(isNaN(a) ? b : a);\r\n}\r\n\r\nvar interpolateRgb = (function rgbGamma(y) {\r\n  var color = gamma(y);\r\n\r\n  function rgb$1(start, end) {\r\n    var r = color((start = rgb(start)).r, (end = rgb(end)).r),\r\n        g = color(start.g, end.g),\r\n        b = color(start.b, end.b),\r\n        opacity = nogamma(start.opacity, end.opacity);\r\n    return function(t) {\r\n      start.r = r(t);\r\n      start.g = g(t);\r\n      start.b = b(t);\r\n      start.opacity = opacity(t);\r\n      return start + \"\";\r\n    };\r\n  }\r\n\r\n  rgb$1.gamma = rgbGamma;\r\n\r\n  return rgb$1;\r\n})(1);\r\n\r\nfunction rgbSpline(spline) {\r\n  return function(colors) {\r\n    var n = colors.length,\r\n        r = new Array(n),\r\n        g = new Array(n),\r\n        b = new Array(n),\r\n        i, color;\r\n    for (i = 0; i < n; ++i) {\r\n      color = rgb(colors[i]);\r\n      r[i] = color.r || 0;\r\n      g[i] = color.g || 0;\r\n      b[i] = color.b || 0;\r\n    }\r\n    r = spline(r);\r\n    g = spline(g);\r\n    b = spline(b);\r\n    color.opacity = 1;\r\n    return function(t) {\r\n      color.r = r(t);\r\n      color.g = g(t);\r\n      color.b = b(t);\r\n      return color + \"\";\r\n    };\r\n  };\r\n}\r\n\r\nvar rgbBasis = rgbSpline(basis$1);\r\nvar rgbBasisClosed = rgbSpline(basisClosed);\r\n\r\nfunction numberArray(a, b) {\r\n  if (!b) b = [];\r\n  var n = a ? Math.min(b.length, a.length) : 0,\r\n      c = b.slice(),\r\n      i;\r\n  return function(t) {\r\n    for (i = 0; i < n; ++i) c[i] = a[i] * (1 - t) + b[i] * t;\r\n    return c;\r\n  };\r\n}\r\n\r\nfunction isNumberArray(x) {\r\n  return ArrayBuffer.isView(x) && !(x instanceof DataView);\r\n}\r\n\r\nfunction array$1(a, b) {\r\n  return (isNumberArray(b) ? numberArray : genericArray)(a, b);\r\n}\r\n\r\nfunction genericArray(a, b) {\r\n  var nb = b ? b.length : 0,\r\n      na = a ? Math.min(nb, a.length) : 0,\r\n      x = new Array(na),\r\n      c = new Array(nb),\r\n      i;\r\n\r\n  for (i = 0; i < na; ++i) x[i] = interpolateValue(a[i], b[i]);\r\n  for (; i < nb; ++i) c[i] = b[i];\r\n\r\n  return function(t) {\r\n    for (i = 0; i < na; ++i) c[i] = x[i](t);\r\n    return c;\r\n  };\r\n}\r\n\r\nfunction date(a, b) {\r\n  var d = new Date;\r\n  return a = +a, b = +b, function(t) {\r\n    return d.setTime(a * (1 - t) + b * t), d;\r\n  };\r\n}\r\n\r\nfunction interpolateNumber(a, b) {\r\n  return a = +a, b = +b, function(t) {\r\n    return a * (1 - t) + b * t;\r\n  };\r\n}\r\n\r\nfunction object(a, b) {\r\n  var i = {},\r\n      c = {},\r\n      k;\r\n\r\n  if (a === null || typeof a !== \"object\") a = {};\r\n  if (b === null || typeof b !== \"object\") b = {};\r\n\r\n  for (k in b) {\r\n    if (k in a) {\r\n      i[k] = interpolateValue(a[k], b[k]);\r\n    } else {\r\n      c[k] = b[k];\r\n    }\r\n  }\r\n\r\n  return function(t) {\r\n    for (k in i) c[k] = i[k](t);\r\n    return c;\r\n  };\r\n}\r\n\r\nvar reA = /[-+]?(?:\\d+\\.?\\d*|\\.?\\d+)(?:[eE][-+]?\\d+)?/g,\r\n    reB = new RegExp(reA.source, \"g\");\r\n\r\nfunction zero(b) {\r\n  return function() {\r\n    return b;\r\n  };\r\n}\r\n\r\nfunction one(b) {\r\n  return function(t) {\r\n    return b(t) + \"\";\r\n  };\r\n}\r\n\r\nfunction interpolateString(a, b) {\r\n  var bi = reA.lastIndex = reB.lastIndex = 0, // scan index for next number in b\r\n      am, // current match in a\r\n      bm, // current match in b\r\n      bs, // string preceding current number in b, if any\r\n      i = -1, // index in s\r\n      s = [], // string constants and placeholders\r\n      q = []; // number interpolators\r\n\r\n  // Coerce inputs to strings.\r\n  a = a + \"\", b = b + \"\";\r\n\r\n  // Interpolate pairs of numbers in a & b.\r\n  while ((am = reA.exec(a))\r\n      && (bm = reB.exec(b))) {\r\n    if ((bs = bm.index) > bi) { // a string precedes the next number in b\r\n      bs = b.slice(bi, bs);\r\n      if (s[i]) s[i] += bs; // coalesce with previous string\r\n      else s[++i] = bs;\r\n    }\r\n    if ((am = am[0]) === (bm = bm[0])) { // numbers in a & b match\r\n      if (s[i]) s[i] += bm; // coalesce with previous string\r\n      else s[++i] = bm;\r\n    } else { // interpolate non-matching numbers\r\n      s[++i] = null;\r\n      q.push({i: i, x: interpolateNumber(am, bm)});\r\n    }\r\n    bi = reB.lastIndex;\r\n  }\r\n\r\n  // Add remains of b.\r\n  if (bi < b.length) {\r\n    bs = b.slice(bi);\r\n    if (s[i]) s[i] += bs; // coalesce with previous string\r\n    else s[++i] = bs;\r\n  }\r\n\r\n  // Special optimization for only a single match.\r\n  // Otherwise, interpolate each of the numbers and rejoin the string.\r\n  return s.length < 2 ? (q[0]\r\n      ? one(q[0].x)\r\n      : zero(b))\r\n      : (b = q.length, function(t) {\r\n          for (var i = 0, o; i < b; ++i) s[(o = q[i]).i] = o.x(t);\r\n          return s.join(\"\");\r\n        });\r\n}\r\n\r\nfunction interpolateValue(a, b) {\r\n  var t = typeof b, c;\r\n  return b == null || t === \"boolean\" ? constant$3(b)\r\n      : (t === \"number\" ? interpolateNumber\r\n      : t === \"string\" ? ((c = color(b)) ? (b = c, interpolateRgb) : interpolateString)\r\n      : b instanceof color ? interpolateRgb\r\n      : b instanceof Date ? date\r\n      : isNumberArray(b) ? numberArray\r\n      : Array.isArray(b) ? genericArray\r\n      : typeof b.valueOf !== \"function\" && typeof b.toString !== \"function\" || isNaN(b) ? object\r\n      : interpolateNumber)(a, b);\r\n}\r\n\r\nfunction discrete(range) {\r\n  var n = range.length;\r\n  return function(t) {\r\n    return range[Math.max(0, Math.min(n - 1, Math.floor(t * n)))];\r\n  };\r\n}\r\n\r\nfunction hue$1(a, b) {\r\n  var i = hue(+a, +b);\r\n  return function(t) {\r\n    var x = i(t);\r\n    return x - 360 * Math.floor(x / 360);\r\n  };\r\n}\r\n\r\nfunction interpolateRound(a, b) {\r\n  return a = +a, b = +b, function(t) {\r\n    return Math.round(a * (1 - t) + b * t);\r\n  };\r\n}\r\n\r\nvar degrees = 180 / Math.PI;\r\n\r\nvar identity$2 = {\r\n  translateX: 0,\r\n  translateY: 0,\r\n  rotate: 0,\r\n  skewX: 0,\r\n  scaleX: 1,\r\n  scaleY: 1\r\n};\r\n\r\nfunction decompose(a, b, c, d, e, f) {\r\n  var scaleX, scaleY, skewX;\r\n  if (scaleX = Math.sqrt(a * a + b * b)) a /= scaleX, b /= scaleX;\r\n  if (skewX = a * c + b * d) c -= a * skewX, d -= b * skewX;\r\n  if (scaleY = Math.sqrt(c * c + d * d)) c /= scaleY, d /= scaleY, skewX /= scaleY;\r\n  if (a * d < b * c) a = -a, b = -b, skewX = -skewX, scaleX = -scaleX;\r\n  return {\r\n    translateX: e,\r\n    translateY: f,\r\n    rotate: Math.atan2(b, a) * degrees,\r\n    skewX: Math.atan(skewX) * degrees,\r\n    scaleX: scaleX,\r\n    scaleY: scaleY\r\n  };\r\n}\r\n\r\nvar cssNode,\r\n    cssRoot,\r\n    cssView,\r\n    svgNode;\r\n\r\nfunction parseCss(value) {\r\n  if (value === \"none\") return identity$2;\r\n  if (!cssNode) cssNode = document.createElement(\"DIV\"), cssRoot = document.documentElement, cssView = document.defaultView;\r\n  cssNode.style.transform = value;\r\n  value = cssView.getComputedStyle(cssRoot.appendChild(cssNode), null).getPropertyValue(\"transform\");\r\n  cssRoot.removeChild(cssNode);\r\n  value = value.slice(7, -1).split(\",\");\r\n  return decompose(+value[0], +value[1], +value[2], +value[3], +value[4], +value[5]);\r\n}\r\n\r\nfunction parseSvg(value) {\r\n  if (value == null) return identity$2;\r\n  if (!svgNode) svgNode = document.createElementNS(\"http://www.w3.org/2000/svg\", \"g\");\r\n  svgNode.setAttribute(\"transform\", value);\r\n  if (!(value = svgNode.transform.baseVal.consolidate())) return identity$2;\r\n  value = value.matrix;\r\n  return decompose(value.a, value.b, value.c, value.d, value.e, value.f);\r\n}\r\n\r\nfunction interpolateTransform(parse, pxComma, pxParen, degParen) {\r\n\r\n  function pop(s) {\r\n    return s.length ? s.pop() + \" \" : \"\";\r\n  }\r\n\r\n  function translate(xa, ya, xb, yb, s, q) {\r\n    if (xa !== xb || ya !== yb) {\r\n      var i = s.push(\"translate(\", null, pxComma, null, pxParen);\r\n      q.push({i: i - 4, x: interpolateNumber(xa, xb)}, {i: i - 2, x: interpolateNumber(ya, yb)});\r\n    } else if (xb || yb) {\r\n      s.push(\"translate(\" + xb + pxComma + yb + pxParen);\r\n    }\r\n  }\r\n\r\n  function rotate(a, b, s, q) {\r\n    if (a !== b) {\r\n      if (a - b > 180) b += 360; else if (b - a > 180) a += 360; // shortest path\r\n      q.push({i: s.push(pop(s) + \"rotate(\", null, degParen) - 2, x: interpolateNumber(a, b)});\r\n    } else if (b) {\r\n      s.push(pop(s) + \"rotate(\" + b + degParen);\r\n    }\r\n  }\r\n\r\n  function skewX(a, b, s, q) {\r\n    if (a !== b) {\r\n      q.push({i: s.push(pop(s) + \"skewX(\", null, degParen) - 2, x: interpolateNumber(a, b)});\r\n    } else if (b) {\r\n      s.push(pop(s) + \"skewX(\" + b + degParen);\r\n    }\r\n  }\r\n\r\n  function scale(xa, ya, xb, yb, s, q) {\r\n    if (xa !== xb || ya !== yb) {\r\n      var i = s.push(pop(s) + \"scale(\", null, \",\", null, \")\");\r\n      q.push({i: i - 4, x: interpolateNumber(xa, xb)}, {i: i - 2, x: interpolateNumber(ya, yb)});\r\n    } else if (xb !== 1 || yb !== 1) {\r\n      s.push(pop(s) + \"scale(\" + xb + \",\" + yb + \")\");\r\n    }\r\n  }\r\n\r\n  return function(a, b) {\r\n    var s = [], // string constants and placeholders\r\n        q = []; // number interpolators\r\n    a = parse(a), b = parse(b);\r\n    translate(a.translateX, a.translateY, b.translateX, b.translateY, s, q);\r\n    rotate(a.rotate, b.rotate, s, q);\r\n    skewX(a.skewX, b.skewX, s, q);\r\n    scale(a.scaleX, a.scaleY, b.scaleX, b.scaleY, s, q);\r\n    a = b = null; // gc\r\n    return function(t) {\r\n      var i = -1, n = q.length, o;\r\n      while (++i < n) s[(o = q[i]).i] = o.x(t);\r\n      return s.join(\"\");\r\n    };\r\n  };\r\n}\r\n\r\nvar interpolateTransformCss = interpolateTransform(parseCss, \"px, \", \"px)\", \"deg)\");\r\nvar interpolateTransformSvg = interpolateTransform(parseSvg, \", \", \")\", \")\");\r\n\r\nvar rho = Math.SQRT2,\r\n    rho2 = 2,\r\n    rho4 = 4,\r\n    epsilon2 = 1e-12;\r\n\r\nfunction cosh(x) {\r\n  return ((x = Math.exp(x)) + 1 / x) / 2;\r\n}\r\n\r\nfunction sinh(x) {\r\n  return ((x = Math.exp(x)) - 1 / x) / 2;\r\n}\r\n\r\nfunction tanh(x) {\r\n  return ((x = Math.exp(2 * x)) - 1) / (x + 1);\r\n}\r\n\r\n// p0 = [ux0, uy0, w0]\r\n// p1 = [ux1, uy1, w1]\r\nfunction interpolateZoom(p0, p1) {\r\n  var ux0 = p0[0], uy0 = p0[1], w0 = p0[2],\r\n      ux1 = p1[0], uy1 = p1[1], w1 = p1[2],\r\n      dx = ux1 - ux0,\r\n      dy = uy1 - uy0,\r\n      d2 = dx * dx + dy * dy,\r\n      i,\r\n      S;\r\n\r\n  // Special case for u0 ≅ u1.\r\n  if (d2 < epsilon2) {\r\n    S = Math.log(w1 / w0) / rho;\r\n    i = function(t) {\r\n      return [\r\n        ux0 + t * dx,\r\n        uy0 + t * dy,\r\n        w0 * Math.exp(rho * t * S)\r\n      ];\r\n    };\r\n  }\r\n\r\n  // General case.\r\n  else {\r\n    var d1 = Math.sqrt(d2),\r\n        b0 = (w1 * w1 - w0 * w0 + rho4 * d2) / (2 * w0 * rho2 * d1),\r\n        b1 = (w1 * w1 - w0 * w0 - rho4 * d2) / (2 * w1 * rho2 * d1),\r\n        r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0),\r\n        r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);\r\n    S = (r1 - r0) / rho;\r\n    i = function(t) {\r\n      var s = t * S,\r\n          coshr0 = cosh(r0),\r\n          u = w0 / (rho2 * d1) * (coshr0 * tanh(rho * s + r0) - sinh(r0));\r\n      return [\r\n        ux0 + u * dx,\r\n        uy0 + u * dy,\r\n        w0 * coshr0 / cosh(rho * s + r0)\r\n      ];\r\n    };\r\n  }\r\n\r\n  i.duration = S * 1000;\r\n\r\n  return i;\r\n}\r\n\r\nfunction hsl$1(hue) {\r\n  return function(start, end) {\r\n    var h = hue((start = hsl(start)).h, (end = hsl(end)).h),\r\n        s = nogamma(start.s, end.s),\r\n        l = nogamma(start.l, end.l),\r\n        opacity = nogamma(start.opacity, end.opacity);\r\n    return function(t) {\r\n      start.h = h(t);\r\n      start.s = s(t);\r\n      start.l = l(t);\r\n      start.opacity = opacity(t);\r\n      return start + \"\";\r\n    };\r\n  }\r\n}\r\n\r\nvar hsl$2 = hsl$1(hue);\r\nvar hslLong = hsl$1(nogamma);\r\n\r\nfunction lab$1(start, end) {\r\n  var l = nogamma((start = lab(start)).l, (end = lab(end)).l),\r\n      a = nogamma(start.a, end.a),\r\n      b = nogamma(start.b, end.b),\r\n      opacity = nogamma(start.opacity, end.opacity);\r\n  return function(t) {\r\n    start.l = l(t);\r\n    start.a = a(t);\r\n    start.b = b(t);\r\n    start.opacity = opacity(t);\r\n    return start + \"\";\r\n  };\r\n}\r\n\r\nfunction hcl$1(hue) {\r\n  return function(start, end) {\r\n    var h = hue((start = hcl(start)).h, (end = hcl(end)).h),\r\n        c = nogamma(start.c, end.c),\r\n        l = nogamma(start.l, end.l),\r\n        opacity = nogamma(start.opacity, end.opacity);\r\n    return function(t) {\r\n      start.h = h(t);\r\n      start.c = c(t);\r\n      start.l = l(t);\r\n      start.opacity = opacity(t);\r\n      return start + \"\";\r\n    };\r\n  }\r\n}\r\n\r\nvar hcl$2 = hcl$1(hue);\r\nvar hclLong = hcl$1(nogamma);\r\n\r\nfunction cubehelix$1(hue) {\r\n  return (function cubehelixGamma(y) {\r\n    y = +y;\r\n\r\n    function cubehelix$1(start, end) {\r\n      var h = hue((start = cubehelix(start)).h, (end = cubehelix(end)).h),\r\n          s = nogamma(start.s, end.s),\r\n          l = nogamma(start.l, end.l),\r\n          opacity = nogamma(start.opacity, end.opacity);\r\n      return function(t) {\r\n        start.h = h(t);\r\n        start.s = s(t);\r\n        start.l = l(Math.pow(t, y));\r\n        start.opacity = opacity(t);\r\n        return start + \"\";\r\n      };\r\n    }\r\n\r\n    cubehelix$1.gamma = cubehelixGamma;\r\n\r\n    return cubehelix$1;\r\n  })(1);\r\n}\r\n\r\nvar cubehelix$2 = cubehelix$1(hue);\r\nvar cubehelixLong = cubehelix$1(nogamma);\r\n\r\nfunction piecewise(interpolate, values) {\r\n  var i = 0, n = values.length - 1, v = values[0], I = new Array(n < 0 ? 0 : n);\r\n  while (i < n) I[i] = interpolate(v, v = values[++i]);\r\n  return function(t) {\r\n    var i = Math.max(0, Math.min(n - 1, Math.floor(t *= n)));\r\n    return I[i](t - i);\r\n  };\r\n}\r\n\r\nfunction quantize(interpolator, n) {\r\n  var samples = new Array(n);\r\n  for (var i = 0; i < n; ++i) samples[i] = interpolator(i / (n - 1));\r\n  return samples;\r\n}\r\n\r\nvar frame = 0, // is an animation frame pending?\r\n    timeout = 0, // is a timeout pending?\r\n    interval = 0, // are any timers active?\r\n    pokeDelay = 1000, // how frequently we check for clock skew\r\n    taskHead,\r\n    taskTail,\r\n    clockLast = 0,\r\n    clockNow = 0,\r\n    clockSkew = 0,\r\n    clock = typeof performance === \"object\" && performance.now ? performance : Date,\r\n    setFrame = typeof window === \"object\" && window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : function(f) { setTimeout(f, 17); };\r\n\r\nfunction now() {\r\n  return clockNow || (setFrame(clearNow), clockNow = clock.now() + clockSkew);\r\n}\r\n\r\nfunction clearNow() {\r\n  clockNow = 0;\r\n}\r\n\r\nfunction Timer() {\r\n  this._call =\r\n  this._time =\r\n  this._next = null;\r\n}\r\n\r\nTimer.prototype = timer.prototype = {\r\n  constructor: Timer,\r\n  restart: function(callback, delay, time) {\r\n    if (typeof callback !== \"function\") throw new TypeError(\"callback is not a function\");\r\n    time = (time == null ? now() : +time) + (delay == null ? 0 : +delay);\r\n    if (!this._next && taskTail !== this) {\r\n      if (taskTail) taskTail._next = this;\r\n      else taskHead = this;\r\n      taskTail = this;\r\n    }\r\n    this._call = callback;\r\n    this._time = time;\r\n    sleep();\r\n  },\r\n  stop: function() {\r\n    if (this._call) {\r\n      this._call = null;\r\n      this._time = Infinity;\r\n      sleep();\r\n    }\r\n  }\r\n};\r\n\r\nfunction timer(callback, delay, time) {\r\n  var t = new Timer;\r\n  t.restart(callback, delay, time);\r\n  return t;\r\n}\r\n\r\nfunction timerFlush() {\r\n  now(); // Get the current time, if not already set.\r\n  ++frame; // Pretend we’ve set an alarm, if we haven’t already.\r\n  var t = taskHead, e;\r\n  while (t) {\r\n    if ((e = clockNow - t._time) >= 0) t._call.call(null, e);\r\n    t = t._next;\r\n  }\r\n  --frame;\r\n}\r\n\r\nfunction wake() {\r\n  clockNow = (clockLast = clock.now()) + clockSkew;\r\n  frame = timeout = 0;\r\n  try {\r\n    timerFlush();\r\n  } finally {\r\n    frame = 0;\r\n    nap();\r\n    clockNow = 0;\r\n  }\r\n}\r\n\r\nfunction poke() {\r\n  var now = clock.now(), delay = now - clockLast;\r\n  if (delay > pokeDelay) clockSkew -= delay, clockLast = now;\r\n}\r\n\r\nfunction nap() {\r\n  var t0, t1 = taskHead, t2, time = Infinity;\r\n  while (t1) {\r\n    if (t1._call) {\r\n      if (time > t1._time) time = t1._time;\r\n      t0 = t1, t1 = t1._next;\r\n    } else {\r\n      t2 = t1._next, t1._next = null;\r\n      t1 = t0 ? t0._next = t2 : taskHead = t2;\r\n    }\r\n  }\r\n  taskTail = t0;\r\n  sleep(time);\r\n}\r\n\r\nfunction sleep(time) {\r\n  if (frame) return; // Soonest alarm already set, or will be.\r\n  if (timeout) timeout = clearTimeout(timeout);\r\n  var delay = time - clockNow; // Strictly less than if we recomputed clockNow.\r\n  if (delay > 24) {\r\n    if (time < Infinity) timeout = setTimeout(wake, time - clock.now() - clockSkew);\r\n    if (interval) interval = clearInterval(interval);\r\n  } else {\r\n    if (!interval) clockLast = clock.now(), interval = setInterval(poke, pokeDelay);\r\n    frame = 1, setFrame(wake);\r\n  }\r\n}\r\n\r\nfunction timeout$1(callback, delay, time) {\r\n  var t = new Timer;\r\n  delay = delay == null ? 0 : +delay;\r\n  t.restart(function(elapsed) {\r\n    t.stop();\r\n    callback(elapsed + delay);\r\n  }, delay, time);\r\n  return t;\r\n}\r\n\r\nfunction interval$1(callback, delay, time) {\r\n  var t = new Timer, total = delay;\r\n  if (delay == null) return t.restart(callback, delay, time), t;\r\n  delay = +delay, time = time == null ? now() : +time;\r\n  t.restart(function tick(elapsed) {\r\n    elapsed += total;\r\n    t.restart(tick, total += delay, time);\r\n    callback(elapsed);\r\n  }, delay, time);\r\n  return t;\r\n}\r\n\r\nvar emptyOn = dispatch(\"start\", \"end\", \"cancel\", \"interrupt\");\r\nvar emptyTween = [];\r\n\r\nvar CREATED = 0;\r\nvar SCHEDULED = 1;\r\nvar STARTING = 2;\r\nvar STARTED = 3;\r\nvar RUNNING = 4;\r\nvar ENDING = 5;\r\nvar ENDED = 6;\r\n\r\nfunction schedule(node, name, id, index, group, timing) {\r\n  var schedules = node.__transition;\r\n  if (!schedules) node.__transition = {};\r\n  else if (id in schedules) return;\r\n  create$1(node, id, {\r\n    name: name,\r\n    index: index, // For context during callback.\r\n    group: group, // For context during callback.\r\n    on: emptyOn,\r\n    tween: emptyTween,\r\n    time: timing.time,\r\n    delay: timing.delay,\r\n    duration: timing.duration,\r\n    ease: timing.ease,\r\n    timer: null,\r\n    state: CREATED\r\n  });\r\n}\r\n\r\nfunction init(node, id) {\r\n  var schedule = get$1(node, id);\r\n  if (schedule.state > CREATED) throw new Error(\"too late; already scheduled\");\r\n  return schedule;\r\n}\r\n\r\nfunction set$1(node, id) {\r\n  var schedule = get$1(node, id);\r\n  if (schedule.state > STARTED) throw new Error(\"too late; already running\");\r\n  return schedule;\r\n}\r\n\r\nfunction get$1(node, id) {\r\n  var schedule = node.__transition;\r\n  if (!schedule || !(schedule = schedule[id])) throw new Error(\"transition not found\");\r\n  return schedule;\r\n}\r\n\r\nfunction create$1(node, id, self) {\r\n  var schedules = node.__transition,\r\n      tween;\r\n\r\n  // Initialize the self timer when the transition is created.\r\n  // Note the actual delay is not known until the first callback!\r\n  schedules[id] = self;\r\n  self.timer = timer(schedule, 0, self.time);\r\n\r\n  function schedule(elapsed) {\r\n    self.state = SCHEDULED;\r\n    self.timer.restart(start, self.delay, self.time);\r\n\r\n    // If the elapsed delay is less than our first sleep, start immediately.\r\n    if (self.delay <= elapsed) start(elapsed - self.delay);\r\n  }\r\n\r\n  function start(elapsed) {\r\n    var i, j, n, o;\r\n\r\n    // If the state is not SCHEDULED, then we previously errored on start.\r\n    if (self.state !== SCHEDULED) return stop();\r\n\r\n    for (i in schedules) {\r\n      o = schedules[i];\r\n      if (o.name !== self.name) continue;\r\n\r\n      // While this element already has a starting transition during this frame,\r\n      // defer starting an interrupting transition until that transition has a\r\n      // chance to tick (and possibly end); see d3/d3-transition#54!\r\n      if (o.state === STARTED) return timeout$1(start);\r\n\r\n      // Interrupt the active transition, if any.\r\n      if (o.state === RUNNING) {\r\n        o.state = ENDED;\r\n        o.timer.stop();\r\n        o.on.call(\"interrupt\", node, node.__data__, o.index, o.group);\r\n        delete schedules[i];\r\n      }\r\n\r\n      // Cancel any pre-empted transitions.\r\n      else if (+i < id) {\r\n        o.state = ENDED;\r\n        o.timer.stop();\r\n        o.on.call(\"cancel\", node, node.__data__, o.index, o.group);\r\n        delete schedules[i];\r\n      }\r\n    }\r\n\r\n    // Defer the first tick to end of the current frame; see d3/d3#1576.\r\n    // Note the transition may be canceled after start and before the first tick!\r\n    // Note this must be scheduled before the start event; see d3/d3-transition#16!\r\n    // Assuming this is successful, subsequent callbacks go straight to tick.\r\n    timeout$1(function() {\r\n      if (self.state === STARTED) {\r\n        self.state = RUNNING;\r\n        self.timer.restart(tick, self.delay, self.time);\r\n        tick(elapsed);\r\n      }\r\n    });\r\n\r\n    // Dispatch the start event.\r\n    // Note this must be done before the tween are initialized.\r\n    self.state = STARTING;\r\n    self.on.call(\"start\", node, node.__data__, self.index, self.group);\r\n    if (self.state !== STARTING) return; // interrupted\r\n    self.state = STARTED;\r\n\r\n    // Initialize the tween, deleting null tween.\r\n    tween = new Array(n = self.tween.length);\r\n    for (i = 0, j = -1; i < n; ++i) {\r\n      if (o = self.tween[i].value.call(node, node.__data__, self.index, self.group)) {\r\n        tween[++j] = o;\r\n      }\r\n    }\r\n    tween.length = j + 1;\r\n  }\r\n\r\n  function tick(elapsed) {\r\n    var t = elapsed < self.duration ? self.ease.call(null, elapsed / self.duration) : (self.timer.restart(stop), self.state = ENDING, 1),\r\n        i = -1,\r\n        n = tween.length;\r\n\r\n    while (++i < n) {\r\n      tween[i].call(node, t);\r\n    }\r\n\r\n    // Dispatch the end event.\r\n    if (self.state === ENDING) {\r\n      self.on.call(\"end\", node, node.__data__, self.index, self.group);\r\n      stop();\r\n    }\r\n  }\r\n\r\n  function stop() {\r\n    self.state = ENDED;\r\n    self.timer.stop();\r\n    delete schedules[id];\r\n    for (var i in schedules) return; // eslint-disable-line no-unused-vars\r\n    delete node.__transition;\r\n  }\r\n}\r\n\r\nfunction interrupt(node, name) {\r\n  var schedules = node.__transition,\r\n      schedule,\r\n      active,\r\n      empty = true,\r\n      i;\r\n\r\n  if (!schedules) return;\r\n\r\n  name = name == null ? null : name + \"\";\r\n\r\n  for (i in schedules) {\r\n    if ((schedule = schedules[i]).name !== name) { empty = false; continue; }\r\n    active = schedule.state > STARTING && schedule.state < ENDING;\r\n    schedule.state = ENDED;\r\n    schedule.timer.stop();\r\n    schedule.on.call(active ? \"interrupt\" : \"cancel\", node, node.__data__, schedule.index, schedule.group);\r\n    delete schedules[i];\r\n  }\r\n\r\n  if (empty) delete node.__transition;\r\n}\r\n\r\nfunction selection_interrupt(name) {\r\n  return this.each(function() {\r\n    interrupt(this, name);\r\n  });\r\n}\r\n\r\nfunction tweenRemove(id, name) {\r\n  var tween0, tween1;\r\n  return function() {\r\n    var schedule = set$1(this, id),\r\n        tween = schedule.tween;\r\n\r\n    // If this node shared tween with the previous node,\r\n    // just assign the updated shared tween and we’re done!\r\n    // Otherwise, copy-on-write.\r\n    if (tween !== tween0) {\r\n      tween1 = tween0 = tween;\r\n      for (var i = 0, n = tween1.length; i < n; ++i) {\r\n        if (tween1[i].name === name) {\r\n          tween1 = tween1.slice();\r\n          tween1.splice(i, 1);\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    schedule.tween = tween1;\r\n  };\r\n}\r\n\r\nfunction tweenFunction(id, name, value) {\r\n  var tween0, tween1;\r\n  if (typeof value !== \"function\") throw new Error;\r\n  return function() {\r\n    var schedule = set$1(this, id),\r\n        tween = schedule.tween;\r\n\r\n    // If this node shared tween with the previous node,\r\n    // just assign the updated shared tween and we’re done!\r\n    // Otherwise, copy-on-write.\r\n    if (tween !== tween0) {\r\n      tween1 = (tween0 = tween).slice();\r\n      for (var t = {name: name, value: value}, i = 0, n = tween1.length; i < n; ++i) {\r\n        if (tween1[i].name === name) {\r\n          tween1[i] = t;\r\n          break;\r\n        }\r\n      }\r\n      if (i === n) tween1.push(t);\r\n    }\r\n\r\n    schedule.tween = tween1;\r\n  };\r\n}\r\n\r\nfunction transition_tween(name, value) {\r\n  var id = this._id;\r\n\r\n  name += \"\";\r\n\r\n  if (arguments.length < 2) {\r\n    var tween = get$1(this.node(), id).tween;\r\n    for (var i = 0, n = tween.length, t; i < n; ++i) {\r\n      if ((t = tween[i]).name === name) {\r\n        return t.value;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  return this.each((value == null ? tweenRemove : tweenFunction)(id, name, value));\r\n}\r\n\r\nfunction tweenValue(transition, name, value) {\r\n  var id = transition._id;\r\n\r\n  transition.each(function() {\r\n    var schedule = set$1(this, id);\r\n    (schedule.value || (schedule.value = {}))[name] = value.apply(this, arguments);\r\n  });\r\n\r\n  return function(node) {\r\n    return get$1(node, id).value[name];\r\n  };\r\n}\r\n\r\nfunction interpolate(a, b) {\r\n  var c;\r\n  return (typeof b === \"number\" ? interpolateNumber\r\n      : b instanceof color ? interpolateRgb\r\n      : (c = color(b)) ? (b = c, interpolateRgb)\r\n      : interpolateString)(a, b);\r\n}\r\n\r\nfunction attrRemove$1(name) {\r\n  return function() {\r\n    this.removeAttribute(name);\r\n  };\r\n}\r\n\r\nfunction attrRemoveNS$1(fullname) {\r\n  return function() {\r\n    this.removeAttributeNS(fullname.space, fullname.local);\r\n  };\r\n}\r\n\r\nfunction attrConstant$1(name, interpolate, value1) {\r\n  var string00,\r\n      string1 = value1 + \"\",\r\n      interpolate0;\r\n  return function() {\r\n    var string0 = this.getAttribute(name);\r\n    return string0 === string1 ? null\r\n        : string0 === string00 ? interpolate0\r\n        : interpolate0 = interpolate(string00 = string0, value1);\r\n  };\r\n}\r\n\r\nfunction attrConstantNS$1(fullname, interpolate, value1) {\r\n  var string00,\r\n      string1 = value1 + \"\",\r\n      interpolate0;\r\n  return function() {\r\n    var string0 = this.getAttributeNS(fullname.space, fullname.local);\r\n    return string0 === string1 ? null\r\n        : string0 === string00 ? interpolate0\r\n        : interpolate0 = interpolate(string00 = string0, value1);\r\n  };\r\n}\r\n\r\nfunction attrFunction$1(name, interpolate, value) {\r\n  var string00,\r\n      string10,\r\n      interpolate0;\r\n  return function() {\r\n    var string0, value1 = value(this), string1;\r\n    if (value1 == null) return void this.removeAttribute(name);\r\n    string0 = this.getAttribute(name);\r\n    string1 = value1 + \"\";\r\n    return string0 === string1 ? null\r\n        : string0 === string00 && string1 === string10 ? interpolate0\r\n        : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));\r\n  };\r\n}\r\n\r\nfunction attrFunctionNS$1(fullname, interpolate, value) {\r\n  var string00,\r\n      string10,\r\n      interpolate0;\r\n  return function() {\r\n    var string0, value1 = value(this), string1;\r\n    if (value1 == null) return void this.removeAttributeNS(fullname.space, fullname.local);\r\n    string0 = this.getAttributeNS(fullname.space, fullname.local);\r\n    string1 = value1 + \"\";\r\n    return string0 === string1 ? null\r\n        : string0 === string00 && string1 === string10 ? interpolate0\r\n        : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));\r\n  };\r\n}\r\n\r\nfunction transition_attr(name, value) {\r\n  var fullname = namespace(name), i = fullname === \"transform\" ? interpolateTransformSvg : interpolate;\r\n  return this.attrTween(name, typeof value === \"function\"\r\n      ? (fullname.local ? attrFunctionNS$1 : attrFunction$1)(fullname, i, tweenValue(this, \"attr.\" + name, value))\r\n      : value == null ? (fullname.local ? attrRemoveNS$1 : attrRemove$1)(fullname)\r\n      : (fullname.local ? attrConstantNS$1 : attrConstant$1)(fullname, i, value));\r\n}\r\n\r\nfunction attrInterpolate(name, i) {\r\n  return function(t) {\r\n    this.setAttribute(name, i.call(this, t));\r\n  };\r\n}\r\n\r\nfunction attrInterpolateNS(fullname, i) {\r\n  return function(t) {\r\n    this.setAttributeNS(fullname.space, fullname.local, i.call(this, t));\r\n  };\r\n}\r\n\r\nfunction attrTweenNS(fullname, value) {\r\n  var t0, i0;\r\n  function tween() {\r\n    var i = value.apply(this, arguments);\r\n    if (i !== i0) t0 = (i0 = i) && attrInterpolateNS(fullname, i);\r\n    return t0;\r\n  }\r\n  tween._value = value;\r\n  return tween;\r\n}\r\n\r\nfunction attrTween(name, value) {\r\n  var t0, i0;\r\n  function tween() {\r\n    var i = value.apply(this, arguments);\r\n    if (i !== i0) t0 = (i0 = i) && attrInterpolate(name, i);\r\n    return t0;\r\n  }\r\n  tween._value = value;\r\n  return tween;\r\n}\r\n\r\nfunction transition_attrTween(name, value) {\r\n  var key = \"attr.\" + name;\r\n  if (arguments.length < 2) return (key = this.tween(key)) && key._value;\r\n  if (value == null) return this.tween(key, null);\r\n  if (typeof value !== \"function\") throw new Error;\r\n  var fullname = namespace(name);\r\n  return this.tween(key, (fullname.local ? attrTweenNS : attrTween)(fullname, value));\r\n}\r\n\r\nfunction delayFunction(id, value) {\r\n  return function() {\r\n    init(this, id).delay = +value.apply(this, arguments);\r\n  };\r\n}\r\n\r\nfunction delayConstant(id, value) {\r\n  return value = +value, function() {\r\n    init(this, id).delay = value;\r\n  };\r\n}\r\n\r\nfunction transition_delay(value) {\r\n  var id = this._id;\r\n\r\n  return arguments.length\r\n      ? this.each((typeof value === \"function\"\r\n          ? delayFunction\r\n          : delayConstant)(id, value))\r\n      : get$1(this.node(), id).delay;\r\n}\r\n\r\nfunction durationFunction(id, value) {\r\n  return function() {\r\n    set$1(this, id).duration = +value.apply(this, arguments);\r\n  };\r\n}\r\n\r\nfunction durationConstant(id, value) {\r\n  return value = +value, function() {\r\n    set$1(this, id).duration = value;\r\n  };\r\n}\r\n\r\nfunction transition_duration(value) {\r\n  var id = this._id;\r\n\r\n  return arguments.length\r\n      ? this.each((typeof value === \"function\"\r\n          ? durationFunction\r\n          : durationConstant)(id, value))\r\n      : get$1(this.node(), id).duration;\r\n}\r\n\r\nfunction easeConstant(id, value) {\r\n  if (typeof value !== \"function\") throw new Error;\r\n  return function() {\r\n    set$1(this, id).ease = value;\r\n  };\r\n}\r\n\r\nfunction transition_ease(value) {\r\n  var id = this._id;\r\n\r\n  return arguments.length\r\n      ? this.each(easeConstant(id, value))\r\n      : get$1(this.node(), id).ease;\r\n}\r\n\r\nfunction transition_filter(match) {\r\n  if (typeof match !== \"function\") match = matcher(match);\r\n\r\n  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {\r\n    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {\r\n      if ((node = group[i]) && match.call(node, node.__data__, i, group)) {\r\n        subgroup.push(node);\r\n      }\r\n    }\r\n  }\r\n\r\n  return new Transition(subgroups, this._parents, this._name, this._id);\r\n}\r\n\r\nfunction transition_merge(transition) {\r\n  if (transition._id !== this._id) throw new Error;\r\n\r\n  for (var groups0 = this._groups, groups1 = transition._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {\r\n    for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {\r\n      if (node = group0[i] || group1[i]) {\r\n        merge[i] = node;\r\n      }\r\n    }\r\n  }\r\n\r\n  for (; j < m0; ++j) {\r\n    merges[j] = groups0[j];\r\n  }\r\n\r\n  return new Transition(merges, this._parents, this._name, this._id);\r\n}\r\n\r\nfunction start(name) {\r\n  return (name + \"\").trim().split(/^|\\s+/).every(function(t) {\r\n    var i = t.indexOf(\".\");\r\n    if (i >= 0) t = t.slice(0, i);\r\n    return !t || t === \"start\";\r\n  });\r\n}\r\n\r\nfunction onFunction(id, name, listener) {\r\n  var on0, on1, sit = start(name) ? init : set$1;\r\n  return function() {\r\n    var schedule = sit(this, id),\r\n        on = schedule.on;\r\n\r\n    // If this node shared a dispatch with the previous node,\r\n    // just assign the updated shared dispatch and we’re done!\r\n    // Otherwise, copy-on-write.\r\n    if (on !== on0) (on1 = (on0 = on).copy()).on(name, listener);\r\n\r\n    schedule.on = on1;\r\n  };\r\n}\r\n\r\nfunction transition_on(name, listener) {\r\n  var id = this._id;\r\n\r\n  return arguments.length < 2\r\n      ? get$1(this.node(), id).on.on(name)\r\n      : this.each(onFunction(id, name, listener));\r\n}\r\n\r\nfunction removeFunction(id) {\r\n  return function() {\r\n    var parent = this.parentNode;\r\n    for (var i in this.__transition) if (+i !== id) return;\r\n    if (parent) parent.removeChild(this);\r\n  };\r\n}\r\n\r\nfunction transition_remove() {\r\n  return this.on(\"end.remove\", removeFunction(this._id));\r\n}\r\n\r\nfunction transition_select(select) {\r\n  var name = this._name,\r\n      id = this._id;\r\n\r\n  if (typeof select !== \"function\") select = selector(select);\r\n\r\n  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {\r\n    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {\r\n      if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {\r\n        if (\"__data__\" in node) subnode.__data__ = node.__data__;\r\n        subgroup[i] = subnode;\r\n        schedule(subgroup[i], name, id, i, subgroup, get$1(node, id));\r\n      }\r\n    }\r\n  }\r\n\r\n  return new Transition(subgroups, this._parents, name, id);\r\n}\r\n\r\nfunction transition_selectAll(select) {\r\n  var name = this._name,\r\n      id = this._id;\r\n\r\n  if (typeof select !== \"function\") select = selectorAll(select);\r\n\r\n  for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {\r\n    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {\r\n      if (node = group[i]) {\r\n        for (var children = select.call(node, node.__data__, i, group), child, inherit = get$1(node, id), k = 0, l = children.length; k < l; ++k) {\r\n          if (child = children[k]) {\r\n            schedule(child, name, id, k, children, inherit);\r\n          }\r\n        }\r\n        subgroups.push(children);\r\n        parents.push(node);\r\n      }\r\n    }\r\n  }\r\n\r\n  return new Transition(subgroups, parents, name, id);\r\n}\r\n\r\nvar Selection$1 = selection.prototype.constructor;\r\n\r\nfunction transition_selection() {\r\n  return new Selection$1(this._groups, this._parents);\r\n}\r\n\r\nfunction styleNull(name, interpolate) {\r\n  var string00,\r\n      string10,\r\n      interpolate0;\r\n  return function() {\r\n    var string0 = styleValue(this, name),\r\n        string1 = (this.style.removeProperty(name), styleValue(this, name));\r\n    return string0 === string1 ? null\r\n        : string0 === string00 && string1 === string10 ? interpolate0\r\n        : interpolate0 = interpolate(string00 = string0, string10 = string1);\r\n  };\r\n}\r\n\r\nfunction styleRemove$1(name) {\r\n  return function() {\r\n    this.style.removeProperty(name);\r\n  };\r\n}\r\n\r\nfunction styleConstant$1(name, interpolate, value1) {\r\n  var string00,\r\n      string1 = value1 + \"\",\r\n      interpolate0;\r\n  return function() {\r\n    var string0 = styleValue(this, name);\r\n    return string0 === string1 ? null\r\n        : string0 === string00 ? interpolate0\r\n        : interpolate0 = interpolate(string00 = string0, value1);\r\n  };\r\n}\r\n\r\nfunction styleFunction$1(name, interpolate, value) {\r\n  var string00,\r\n      string10,\r\n      interpolate0;\r\n  return function() {\r\n    var string0 = styleValue(this, name),\r\n        value1 = value(this),\r\n        string1 = value1 + \"\";\r\n    if (value1 == null) string1 = value1 = (this.style.removeProperty(name), styleValue(this, name));\r\n    return string0 === string1 ? null\r\n        : string0 === string00 && string1 === string10 ? interpolate0\r\n        : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));\r\n  };\r\n}\r\n\r\nfunction styleMaybeRemove(id, name) {\r\n  var on0, on1, listener0, key = \"style.\" + name, event = \"end.\" + key, remove;\r\n  return function() {\r\n    var schedule = set$1(this, id),\r\n        on = schedule.on,\r\n        listener = schedule.value[key] == null ? remove || (remove = styleRemove$1(name)) : undefined;\r\n\r\n    // If this node shared a dispatch with the previous node,\r\n    // just assign the updated shared dispatch and we’re done!\r\n    // Otherwise, copy-on-write.\r\n    if (on !== on0 || listener0 !== listener) (on1 = (on0 = on).copy()).on(event, listener0 = listener);\r\n\r\n    schedule.on = on1;\r\n  };\r\n}\r\n\r\nfunction transition_style(name, value, priority) {\r\n  var i = (name += \"\") === \"transform\" ? interpolateTransformCss : interpolate;\r\n  return value == null ? this\r\n      .styleTween(name, styleNull(name, i))\r\n      .on(\"end.style.\" + name, styleRemove$1(name))\r\n    : typeof value === \"function\" ? this\r\n      .styleTween(name, styleFunction$1(name, i, tweenValue(this, \"style.\" + name, value)))\r\n      .each(styleMaybeRemove(this._id, name))\r\n    : this\r\n      .styleTween(name, styleConstant$1(name, i, value), priority)\r\n      .on(\"end.style.\" + name, null);\r\n}\r\n\r\nfunction styleInterpolate(name, i, priority) {\r\n  return function(t) {\r\n    this.style.setProperty(name, i.call(this, t), priority);\r\n  };\r\n}\r\n\r\nfunction styleTween(name, value, priority) {\r\n  var t, i0;\r\n  function tween() {\r\n    var i = value.apply(this, arguments);\r\n    if (i !== i0) t = (i0 = i) && styleInterpolate(name, i, priority);\r\n    return t;\r\n  }\r\n  tween._value = value;\r\n  return tween;\r\n}\r\n\r\nfunction transition_styleTween(name, value, priority) {\r\n  var key = \"style.\" + (name += \"\");\r\n  if (arguments.length < 2) return (key = this.tween(key)) && key._value;\r\n  if (value == null) return this.tween(key, null);\r\n  if (typeof value !== \"function\") throw new Error;\r\n  return this.tween(key, styleTween(name, value, priority == null ? \"\" : priority));\r\n}\r\n\r\nfunction textConstant$1(value) {\r\n  return function() {\r\n    this.textContent = value;\r\n  };\r\n}\r\n\r\nfunction textFunction$1(value) {\r\n  return function() {\r\n    var value1 = value(this);\r\n    this.textContent = value1 == null ? \"\" : value1;\r\n  };\r\n}\r\n\r\nfunction transition_text(value) {\r\n  return this.tween(\"text\", typeof value === \"function\"\r\n      ? textFunction$1(tweenValue(this, \"text\", value))\r\n      : textConstant$1(value == null ? \"\" : value + \"\"));\r\n}\r\n\r\nfunction textInterpolate(i) {\r\n  return function(t) {\r\n    this.textContent = i.call(this, t);\r\n  };\r\n}\r\n\r\nfunction textTween(value) {\r\n  var t0, i0;\r\n  function tween() {\r\n    var i = value.apply(this, arguments);\r\n    if (i !== i0) t0 = (i0 = i) && textInterpolate(i);\r\n    return t0;\r\n  }\r\n  tween._value = value;\r\n  return tween;\r\n}\r\n\r\nfunction transition_textTween(value) {\r\n  var key = \"text\";\r\n  if (arguments.length < 1) return (key = this.tween(key)) && key._value;\r\n  if (value == null) return this.tween(key, null);\r\n  if (typeof value !== \"function\") throw new Error;\r\n  return this.tween(key, textTween(value));\r\n}\r\n\r\nfunction transition_transition() {\r\n  var name = this._name,\r\n      id0 = this._id,\r\n      id1 = newId();\r\n\r\n  for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {\r\n    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {\r\n      if (node = group[i]) {\r\n        var inherit = get$1(node, id0);\r\n        schedule(node, name, id1, i, group, {\r\n          time: inherit.time + inherit.delay + inherit.duration,\r\n          delay: 0,\r\n          duration: inherit.duration,\r\n          ease: inherit.ease\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  return new Transition(groups, this._parents, name, id1);\r\n}\r\n\r\nfunction transition_end() {\r\n  var on0, on1, that = this, id = that._id, size = that.size();\r\n  return new Promise(function(resolve, reject) {\r\n    var cancel = {value: reject},\r\n        end = {value: function() { if (--size === 0) resolve(); }};\r\n\r\n    that.each(function() {\r\n      var schedule = set$1(this, id),\r\n          on = schedule.on;\r\n\r\n      // If this node shared a dispatch with the previous node,\r\n      // just assign the updated shared dispatch and we’re done!\r\n      // Otherwise, copy-on-write.\r\n      if (on !== on0) {\r\n        on1 = (on0 = on).copy();\r\n        on1._.cancel.push(cancel);\r\n        on1._.interrupt.push(cancel);\r\n        on1._.end.push(end);\r\n      }\r\n\r\n      schedule.on = on1;\r\n    });\r\n  });\r\n}\r\n\r\nvar id = 0;\r\n\r\nfunction Transition(groups, parents, name, id) {\r\n  this._groups = groups;\r\n  this._parents = parents;\r\n  this._name = name;\r\n  this._id = id;\r\n}\r\n\r\nfunction transition(name) {\r\n  return selection().transition(name);\r\n}\r\n\r\nfunction newId() {\r\n  return ++id;\r\n}\r\n\r\nvar selection_prototype = selection.prototype;\r\n\r\nTransition.prototype = transition.prototype = {\r\n  constructor: Transition,\r\n  select: transition_select,\r\n  selectAll: transition_selectAll,\r\n  filter: transition_filter,\r\n  merge: transition_merge,\r\n  selection: transition_selection,\r\n  transition: transition_transition,\r\n  call: selection_prototype.call,\r\n  nodes: selection_prototype.nodes,\r\n  node: selection_prototype.node,\r\n  size: selection_prototype.size,\r\n  empty: selection_prototype.empty,\r\n  each: selection_prototype.each,\r\n  on: transition_on,\r\n  attr: transition_attr,\r\n  attrTween: transition_attrTween,\r\n  style: transition_style,\r\n  styleTween: transition_styleTween,\r\n  text: transition_text,\r\n  textTween: transition_textTween,\r\n  remove: transition_remove,\r\n  tween: transition_tween,\r\n  delay: transition_delay,\r\n  duration: transition_duration,\r\n  ease: transition_ease,\r\n  end: transition_end\r\n};\r\n\r\nfunction linear$1(t) {\r\n  return +t;\r\n}\r\n\r\nfunction quadIn(t) {\r\n  return t * t;\r\n}\r\n\r\nfunction quadOut(t) {\r\n  return t * (2 - t);\r\n}\r\n\r\nfunction quadInOut(t) {\r\n  return ((t *= 2) <= 1 ? t * t : --t * (2 - t) + 1) / 2;\r\n}\r\n\r\nfunction cubicIn(t) {\r\n  return t * t * t;\r\n}\r\n\r\nfunction cubicOut(t) {\r\n  return --t * t * t + 1;\r\n}\r\n\r\nfunction cubicInOut(t) {\r\n  return ((t *= 2) <= 1 ? t * t * t : (t -= 2) * t * t + 2) / 2;\r\n}\r\n\r\nvar exponent = 3;\r\n\r\nvar polyIn = (function custom(e) {\r\n  e = +e;\r\n\r\n  function polyIn(t) {\r\n    return Math.pow(t, e);\r\n  }\r\n\r\n  polyIn.exponent = custom;\r\n\r\n  return polyIn;\r\n})(exponent);\r\n\r\nvar polyOut = (function custom(e) {\r\n  e = +e;\r\n\r\n  function polyOut(t) {\r\n    return 1 - Math.pow(1 - t, e);\r\n  }\r\n\r\n  polyOut.exponent = custom;\r\n\r\n  return polyOut;\r\n})(exponent);\r\n\r\nvar polyInOut = (function custom(e) {\r\n  e = +e;\r\n\r\n  function polyInOut(t) {\r\n    return ((t *= 2) <= 1 ? Math.pow(t, e) : 2 - Math.pow(2 - t, e)) / 2;\r\n  }\r\n\r\n  polyInOut.exponent = custom;\r\n\r\n  return polyInOut;\r\n})(exponent);\r\n\r\nvar pi = Math.PI,\r\n    halfPi = pi / 2;\r\n\r\nfunction sinIn(t) {\r\n  return 1 - Math.cos(t * halfPi);\r\n}\r\n\r\nfunction sinOut(t) {\r\n  return Math.sin(t * halfPi);\r\n}\r\n\r\nfunction sinInOut(t) {\r\n  return (1 - Math.cos(pi * t)) / 2;\r\n}\r\n\r\nfunction expIn(t) {\r\n  return Math.pow(2, 10 * t - 10);\r\n}\r\n\r\nfunction expOut(t) {\r\n  return 1 - Math.pow(2, -10 * t);\r\n}\r\n\r\nfunction expInOut(t) {\r\n  return ((t *= 2) <= 1 ? Math.pow(2, 10 * t - 10) : 2 - Math.pow(2, 10 - 10 * t)) / 2;\r\n}\r\n\r\nfunction circleIn(t) {\r\n  return 1 - Math.sqrt(1 - t * t);\r\n}\r\n\r\nfunction circleOut(t) {\r\n  return Math.sqrt(1 - --t * t);\r\n}\r\n\r\nfunction circleInOut(t) {\r\n  return ((t *= 2) <= 1 ? 1 - Math.sqrt(1 - t * t) : Math.sqrt(1 - (t -= 2) * t) + 1) / 2;\r\n}\r\n\r\nvar b1 = 4 / 11,\r\n    b2 = 6 / 11,\r\n    b3 = 8 / 11,\r\n    b4 = 3 / 4,\r\n    b5 = 9 / 11,\r\n    b6 = 10 / 11,\r\n    b7 = 15 / 16,\r\n    b8 = 21 / 22,\r\n    b9 = 63 / 64,\r\n    b0 = 1 / b1 / b1;\r\n\r\nfunction bounceIn(t) {\r\n  return 1 - bounceOut(1 - t);\r\n}\r\n\r\nfunction bounceOut(t) {\r\n  return (t = +t) < b1 ? b0 * t * t : t < b3 ? b0 * (t -= b2) * t + b4 : t < b6 ? b0 * (t -= b5) * t + b7 : b0 * (t -= b8) * t + b9;\r\n}\r\n\r\nfunction bounceInOut(t) {\r\n  return ((t *= 2) <= 1 ? 1 - bounceOut(1 - t) : bounceOut(t - 1) + 1) / 2;\r\n}\r\n\r\nvar overshoot = 1.70158;\r\n\r\nvar backIn = (function custom(s) {\r\n  s = +s;\r\n\r\n  function backIn(t) {\r\n    return t * t * ((s + 1) * t - s);\r\n  }\r\n\r\n  backIn.overshoot = custom;\r\n\r\n  return backIn;\r\n})(overshoot);\r\n\r\nvar backOut = (function custom(s) {\r\n  s = +s;\r\n\r\n  function backOut(t) {\r\n    return --t * t * ((s + 1) * t + s) + 1;\r\n  }\r\n\r\n  backOut.overshoot = custom;\r\n\r\n  return backOut;\r\n})(overshoot);\r\n\r\nvar backInOut = (function custom(s) {\r\n  s = +s;\r\n\r\n  function backInOut(t) {\r\n    return ((t *= 2) < 1 ? t * t * ((s + 1) * t - s) : (t -= 2) * t * ((s + 1) * t + s) + 2) / 2;\r\n  }\r\n\r\n  backInOut.overshoot = custom;\r\n\r\n  return backInOut;\r\n})(overshoot);\r\n\r\nvar tau = 2 * Math.PI,\r\n    amplitude = 1,\r\n    period = 0.3;\r\n\r\nvar elasticIn = (function custom(a, p) {\r\n  var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);\r\n\r\n  function elasticIn(t) {\r\n    return a * Math.pow(2, 10 * --t) * Math.sin((s - t) / p);\r\n  }\r\n\r\n  elasticIn.amplitude = function(a) { return custom(a, p * tau); };\r\n  elasticIn.period = function(p) { return custom(a, p); };\r\n\r\n  return elasticIn;\r\n})(amplitude, period);\r\n\r\nvar elasticOut = (function custom(a, p) {\r\n  var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);\r\n\r\n  function elasticOut(t) {\r\n    return 1 - a * Math.pow(2, -10 * (t = +t)) * Math.sin((t + s) / p);\r\n  }\r\n\r\n  elasticOut.amplitude = function(a) { return custom(a, p * tau); };\r\n  elasticOut.period = function(p) { return custom(a, p); };\r\n\r\n  return elasticOut;\r\n})(amplitude, period);\r\n\r\nvar elasticInOut = (function custom(a, p) {\r\n  var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);\r\n\r\n  function elasticInOut(t) {\r\n    return ((t = t * 2 - 1) < 0\r\n        ? a * Math.pow(2, 10 * t) * Math.sin((s - t) / p)\r\n        : 2 - a * Math.pow(2, -10 * t) * Math.sin((s + t) / p)) / 2;\r\n  }\r\n\r\n  elasticInOut.amplitude = function(a) { return custom(a, p * tau); };\r\n  elasticInOut.period = function(p) { return custom(a, p); };\r\n\r\n  return elasticInOut;\r\n})(amplitude, period);\r\n\r\nvar defaultTiming = {\r\n  time: null, // Set on use.\r\n  delay: 0,\r\n  duration: 250,\r\n  ease: cubicInOut\r\n};\r\n\r\nfunction inherit(node, id) {\r\n  var timing;\r\n  while (!(timing = node.__transition) || !(timing = timing[id])) {\r\n    if (!(node = node.parentNode)) {\r\n      return defaultTiming.time = now(), defaultTiming;\r\n    }\r\n  }\r\n  return timing;\r\n}\r\n\r\nfunction selection_transition(name) {\r\n  var id,\r\n      timing;\r\n\r\n  if (name instanceof Transition) {\r\n    id = name._id, name = name._name;\r\n  } else {\r\n    id = newId(), (timing = defaultTiming).time = now(), name = name == null ? null : name + \"\";\r\n  }\r\n\r\n  for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {\r\n    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {\r\n      if (node = group[i]) {\r\n        schedule(node, name, id, i, group, timing || inherit(node, id));\r\n      }\r\n    }\r\n  }\r\n\r\n  return new Transition(groups, this._parents, name, id);\r\n}\r\n\r\nselection.prototype.interrupt = selection_interrupt;\r\nselection.prototype.transition = selection_transition;\r\n\r\nvar root$1 = [null];\r\n\r\nfunction active(node, name) {\r\n  var schedules = node.__transition,\r\n      schedule,\r\n      i;\r\n\r\n  if (schedules) {\r\n    name = name == null ? null : name + \"\";\r\n    for (i in schedules) {\r\n      if ((schedule = schedules[i]).state > SCHEDULED && schedule.name === name) {\r\n        return new Transition([[node]], root$1, name, +i);\r\n      }\r\n    }\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\nfunction constant$4(x) {\r\n  return function() {\r\n    return x;\r\n  };\r\n}\r\n\r\nfunction BrushEvent(target, type, selection) {\r\n  this.target = target;\r\n  this.type = type;\r\n  this.selection = selection;\r\n}\r\n\r\nfunction nopropagation$1() {\r\n  exports.event.stopImmediatePropagation();\r\n}\r\n\r\nfunction noevent$1() {\r\n  exports.event.preventDefault();\r\n  exports.event.stopImmediatePropagation();\r\n}\r\n\r\nvar MODE_DRAG = {name: \"drag\"},\r\n    MODE_SPACE = {name: \"space\"},\r\n    MODE_HANDLE = {name: \"handle\"},\r\n    MODE_CENTER = {name: \"center\"};\r\n\r\nfunction number1(e) {\r\n  return [+e[0], +e[1]];\r\n}\r\n\r\nfunction number2(e) {\r\n  return [number1(e[0]), number1(e[1])];\r\n}\r\n\r\nfunction toucher(identifier) {\r\n  return function(target) {\r\n    return touch(target, exports.event.touches, identifier);\r\n  };\r\n}\r\n\r\nvar X = {\r\n  name: \"x\",\r\n  handles: [\"w\", \"e\"].map(type),\r\n  input: function(x, e) { return x == null ? null : [[+x[0], e[0][1]], [+x[1], e[1][1]]]; },\r\n  output: function(xy) { return xy && [xy[0][0], xy[1][0]]; }\r\n};\r\n\r\nvar Y = {\r\n  name: \"y\",\r\n  handles: [\"n\", \"s\"].map(type),\r\n  input: function(y, e) { return y == null ? null : [[e[0][0], +y[0]], [e[1][0], +y[1]]]; },\r\n  output: function(xy) { return xy && [xy[0][1], xy[1][1]]; }\r\n};\r\n\r\nvar XY = {\r\n  name: \"xy\",\r\n  handles: [\"n\", \"w\", \"e\", \"s\", \"nw\", \"ne\", \"sw\", \"se\"].map(type),\r\n  input: function(xy) { return xy == null ? null : number2(xy); },\r\n  output: function(xy) { return xy; }\r\n};\r\n\r\nvar cursors = {\r\n  overlay: \"crosshair\",\r\n  selection: \"move\",\r\n  n: \"ns-resize\",\r\n  e: \"ew-resize\",\r\n  s: \"ns-resize\",\r\n  w: \"ew-resize\",\r\n  nw: \"nwse-resize\",\r\n  ne: \"nesw-resize\",\r\n  se: \"nwse-resize\",\r\n  sw: \"nesw-resize\"\r\n};\r\n\r\nvar flipX = {\r\n  e: \"w\",\r\n  w: \"e\",\r\n  nw: \"ne\",\r\n  ne: \"nw\",\r\n  se: \"sw\",\r\n  sw: \"se\"\r\n};\r\n\r\nvar flipY = {\r\n  n: \"s\",\r\n  s: \"n\",\r\n  nw: \"sw\",\r\n  ne: \"se\",\r\n  se: \"ne\",\r\n  sw: \"nw\"\r\n};\r\n\r\nvar signsX = {\r\n  overlay: +1,\r\n  selection: +1,\r\n  n: null,\r\n  e: +1,\r\n  s: null,\r\n  w: -1,\r\n  nw: -1,\r\n  ne: +1,\r\n  se: +1,\r\n  sw: -1\r\n};\r\n\r\nvar signsY = {\r\n  overlay: +1,\r\n  selection: +1,\r\n  n: -1,\r\n  e: null,\r\n  s: +1,\r\n  w: null,\r\n  nw: -1,\r\n  ne: -1,\r\n  se: +1,\r\n  sw: +1\r\n};\r\n\r\nfunction type(t) {\r\n  return {type: t};\r\n}\r\n\r\n// Ignore right-click, since that should open the context menu.\r\nfunction defaultFilter$1() {\r\n  return !exports.event.ctrlKey && !exports.event.button;\r\n}\r\n\r\nfunction defaultExtent() {\r\n  var svg = this.ownerSVGElement || this;\r\n  if (svg.hasAttribute(\"viewBox\")) {\r\n    svg = svg.viewBox.baseVal;\r\n    return [[svg.x, svg.y], [svg.x + svg.width, svg.y + svg.height]];\r\n  }\r\n  return [[0, 0], [svg.width.baseVal.value, svg.height.baseVal.value]];\r\n}\r\n\r\nfunction defaultTouchable$1() {\r\n  return navigator.maxTouchPoints || (\"ontouchstart\" in this);\r\n}\r\n\r\n// Like d3.local, but with the name “__brush” rather than auto-generated.\r\nfunction local$1(node) {\r\n  while (!node.__brush) if (!(node = node.parentNode)) return;\r\n  return node.__brush;\r\n}\r\n\r\nfunction empty$1(extent) {\r\n  return extent[0][0] === extent[1][0]\r\n      || extent[0][1] === extent[1][1];\r\n}\r\n\r\nfunction brushSelection(node) {\r\n  var state = node.__brush;\r\n  return state ? state.dim.output(state.selection) : null;\r\n}\r\n\r\nfunction brushX() {\r\n  return brush$1(X);\r\n}\r\n\r\nfunction brushY() {\r\n  return brush$1(Y);\r\n}\r\n\r\nfunction brush() {\r\n  return brush$1(XY);\r\n}\r\n\r\nfunction brush$1(dim) {\r\n  var extent = defaultExtent,\r\n      filter = defaultFilter$1,\r\n      touchable = defaultTouchable$1,\r\n      keys = true,\r\n      listeners = dispatch(\"start\", \"brush\", \"end\"),\r\n      handleSize = 6,\r\n      touchending;\r\n\r\n  function brush(group) {\r\n    var overlay = group\r\n        .property(\"__brush\", initialize)\r\n      .selectAll(\".overlay\")\r\n      .data([type(\"overlay\")]);\r\n\r\n    overlay.enter().append(\"rect\")\r\n        .attr(\"class\", \"overlay\")\r\n        .attr(\"pointer-events\", \"all\")\r\n        .attr(\"cursor\", cursors.overlay)\r\n      .merge(overlay)\r\n        .each(function() {\r\n          var extent = local$1(this).extent;\r\n          select(this)\r\n              .attr(\"x\", extent[0][0])\r\n              .attr(\"y\", extent[0][1])\r\n              .attr(\"width\", extent[1][0] - extent[0][0])\r\n              .attr(\"height\", extent[1][1] - extent[0][1]);\r\n        });\r\n\r\n    group.selectAll(\".selection\")\r\n      .data([type(\"selection\")])\r\n      .enter().append(\"rect\")\r\n        .attr(\"class\", \"selection\")\r\n        .attr(\"cursor\", cursors.selection)\r\n        .attr(\"fill\", \"#777\")\r\n        .attr(\"fill-opacity\", 0.3)\r\n        .attr(\"stroke\", \"#fff\")\r\n        .attr(\"shape-rendering\", \"crispEdges\");\r\n\r\n    var handle = group.selectAll(\".handle\")\r\n      .data(dim.handles, function(d) { return d.type; });\r\n\r\n    handle.exit().remove();\r\n\r\n    handle.enter().append(\"rect\")\r\n        .attr(\"class\", function(d) { return \"handle handle--\" + d.type; })\r\n        .attr(\"cursor\", function(d) { return cursors[d.type]; });\r\n\r\n    group\r\n        .each(redraw)\r\n        .attr(\"fill\", \"none\")\r\n        .attr(\"pointer-events\", \"all\")\r\n        .on(\"mousedown.brush\", started)\r\n      .filter(touchable)\r\n        .on(\"touchstart.brush\", started)\r\n        .on(\"touchmove.brush\", touchmoved)\r\n        .on(\"touchend.brush touchcancel.brush\", touchended)\r\n        .style(\"touch-action\", \"none\")\r\n        .style(\"-webkit-tap-highlight-color\", \"rgba(0,0,0,0)\");\r\n  }\r\n\r\n  brush.move = function(group, selection) {\r\n    if (group.selection) {\r\n      group\r\n          .on(\"start.brush\", function() { emitter(this, arguments).beforestart().start(); })\r\n          .on(\"interrupt.brush end.brush\", function() { emitter(this, arguments).end(); })\r\n          .tween(\"brush\", function() {\r\n            var that = this,\r\n                state = that.__brush,\r\n                emit = emitter(that, arguments),\r\n                selection0 = state.selection,\r\n                selection1 = dim.input(typeof selection === \"function\" ? selection.apply(this, arguments) : selection, state.extent),\r\n                i = interpolateValue(selection0, selection1);\r\n\r\n            function tween(t) {\r\n              state.selection = t === 1 && selection1 === null ? null : i(t);\r\n              redraw.call(that);\r\n              emit.brush();\r\n            }\r\n\r\n            return selection0 !== null && selection1 !== null ? tween : tween(1);\r\n          });\r\n    } else {\r\n      group\r\n          .each(function() {\r\n            var that = this,\r\n                args = arguments,\r\n                state = that.__brush,\r\n                selection1 = dim.input(typeof selection === \"function\" ? selection.apply(that, args) : selection, state.extent),\r\n                emit = emitter(that, args).beforestart();\r\n\r\n            interrupt(that);\r\n            state.selection = selection1 === null ? null : selection1;\r\n            redraw.call(that);\r\n            emit.start().brush().end();\r\n          });\r\n    }\r\n  };\r\n\r\n  brush.clear = function(group) {\r\n    brush.move(group, null);\r\n  };\r\n\r\n  function redraw() {\r\n    var group = select(this),\r\n        selection = local$1(this).selection;\r\n\r\n    if (selection) {\r\n      group.selectAll(\".selection\")\r\n          .style(\"display\", null)\r\n          .attr(\"x\", selection[0][0])\r\n          .attr(\"y\", selection[0][1])\r\n          .attr(\"width\", selection[1][0] - selection[0][0])\r\n          .attr(\"height\", selection[1][1] - selection[0][1]);\r\n\r\n      group.selectAll(\".handle\")\r\n          .style(\"display\", null)\r\n          .attr(\"x\", function(d) { return d.type[d.type.length - 1] === \"e\" ? selection[1][0] - handleSize / 2 : selection[0][0] - handleSize / 2; })\r\n          .attr(\"y\", function(d) { return d.type[0] === \"s\" ? selection[1][1] - handleSize / 2 : selection[0][1] - handleSize / 2; })\r\n          .attr(\"width\", function(d) { return d.type === \"n\" || d.type === \"s\" ? selection[1][0] - selection[0][0] + handleSize : handleSize; })\r\n          .attr(\"height\", function(d) { return d.type === \"e\" || d.type === \"w\" ? selection[1][1] - selection[0][1] + handleSize : handleSize; });\r\n    }\r\n\r\n    else {\r\n      group.selectAll(\".selection,.handle\")\r\n          .style(\"display\", \"none\")\r\n          .attr(\"x\", null)\r\n          .attr(\"y\", null)\r\n          .attr(\"width\", null)\r\n          .attr(\"height\", null);\r\n    }\r\n  }\r\n\r\n  function emitter(that, args, clean) {\r\n    return (!clean && that.__brush.emitter) || new Emitter(that, args);\r\n  }\r\n\r\n  function Emitter(that, args) {\r\n    this.that = that;\r\n    this.args = args;\r\n    this.state = that.__brush;\r\n    this.active = 0;\r\n  }\r\n\r\n  Emitter.prototype = {\r\n    beforestart: function() {\r\n      if (++this.active === 1) this.state.emitter = this, this.starting = true;\r\n      return this;\r\n    },\r\n    start: function() {\r\n      if (this.starting) this.starting = false, this.emit(\"start\");\r\n      else this.emit(\"brush\");\r\n      return this;\r\n    },\r\n    brush: function() {\r\n      this.emit(\"brush\");\r\n      return this;\r\n    },\r\n    end: function() {\r\n      if (--this.active === 0) delete this.state.emitter, this.emit(\"end\");\r\n      return this;\r\n    },\r\n    emit: function(type) {\r\n      customEvent(new BrushEvent(brush, type, dim.output(this.state.selection)), listeners.apply, listeners, [type, this.that, this.args]);\r\n    }\r\n  };\r\n\r\n  function started() {\r\n    if (touchending && !exports.event.touches) return;\r\n    if (!filter.apply(this, arguments)) return;\r\n\r\n    var that = this,\r\n        type = exports.event.target.__data__.type,\r\n        mode = (keys && exports.event.metaKey ? type = \"overlay\" : type) === \"selection\" ? MODE_DRAG : (keys && exports.event.altKey ? MODE_CENTER : MODE_HANDLE),\r\n        signX = dim === Y ? null : signsX[type],\r\n        signY = dim === X ? null : signsY[type],\r\n        state = local$1(that),\r\n        extent = state.extent,\r\n        selection = state.selection,\r\n        W = extent[0][0], w0, w1,\r\n        N = extent[0][1], n0, n1,\r\n        E = extent[1][0], e0, e1,\r\n        S = extent[1][1], s0, s1,\r\n        dx = 0,\r\n        dy = 0,\r\n        moving,\r\n        shifting = signX && signY && keys && exports.event.shiftKey,\r\n        lockX,\r\n        lockY,\r\n        pointer = exports.event.touches ? toucher(exports.event.changedTouches[0].identifier) : mouse,\r\n        point0 = pointer(that),\r\n        point = point0,\r\n        emit = emitter(that, arguments, true).beforestart();\r\n\r\n    if (type === \"overlay\") {\r\n      if (selection) moving = true;\r\n      state.selection = selection = [\r\n        [w0 = dim === Y ? W : point0[0], n0 = dim === X ? N : point0[1]],\r\n        [e0 = dim === Y ? E : w0, s0 = dim === X ? S : n0]\r\n      ];\r\n    } else {\r\n      w0 = selection[0][0];\r\n      n0 = selection[0][1];\r\n      e0 = selection[1][0];\r\n      s0 = selection[1][1];\r\n    }\r\n\r\n    w1 = w0;\r\n    n1 = n0;\r\n    e1 = e0;\r\n    s1 = s0;\r\n\r\n    var group = select(that)\r\n        .attr(\"pointer-events\", \"none\");\r\n\r\n    var overlay = group.selectAll(\".overlay\")\r\n        .attr(\"cursor\", cursors[type]);\r\n\r\n    if (exports.event.touches) {\r\n      emit.moved = moved;\r\n      emit.ended = ended;\r\n    } else {\r\n      var view = select(exports.event.view)\r\n          .on(\"mousemove.brush\", moved, true)\r\n          .on(\"mouseup.brush\", ended, true);\r\n      if (keys) view\r\n          .on(\"keydown.brush\", keydowned, true)\r\n          .on(\"keyup.brush\", keyupped, true);\r\n\r\n      dragDisable(exports.event.view);\r\n    }\r\n\r\n    nopropagation$1();\r\n    interrupt(that);\r\n    redraw.call(that);\r\n    emit.start();\r\n\r\n    function moved() {\r\n      var point1 = pointer(that);\r\n      if (shifting && !lockX && !lockY) {\r\n        if (Math.abs(point1[0] - point[0]) > Math.abs(point1[1] - point[1])) lockY = true;\r\n        else lockX = true;\r\n      }\r\n      point = point1;\r\n      moving = true;\r\n      noevent$1();\r\n      move();\r\n    }\r\n\r\n    function move() {\r\n      var t;\r\n\r\n      dx = point[0] - point0[0];\r\n      dy = point[1] - point0[1];\r\n\r\n      switch (mode) {\r\n        case MODE_SPACE:\r\n        case MODE_DRAG: {\r\n          if (signX) dx = Math.max(W - w0, Math.min(E - e0, dx)), w1 = w0 + dx, e1 = e0 + dx;\r\n          if (signY) dy = Math.max(N - n0, Math.min(S - s0, dy)), n1 = n0 + dy, s1 = s0 + dy;\r\n          break;\r\n        }\r\n        case MODE_HANDLE: {\r\n          if (signX < 0) dx = Math.max(W - w0, Math.min(E - w0, dx)), w1 = w0 + dx, e1 = e0;\r\n          else if (signX > 0) dx = Math.max(W - e0, Math.min(E - e0, dx)), w1 = w0, e1 = e0 + dx;\r\n          if (signY < 0) dy = Math.max(N - n0, Math.min(S - n0, dy)), n1 = n0 + dy, s1 = s0;\r\n          else if (signY > 0) dy = Math.max(N - s0, Math.min(S - s0, dy)), n1 = n0, s1 = s0 + dy;\r\n          break;\r\n        }\r\n        case MODE_CENTER: {\r\n          if (signX) w1 = Math.max(W, Math.min(E, w0 - dx * signX)), e1 = Math.max(W, Math.min(E, e0 + dx * signX));\r\n          if (signY) n1 = Math.max(N, Math.min(S, n0 - dy * signY)), s1 = Math.max(N, Math.min(S, s0 + dy * signY));\r\n          break;\r\n        }\r\n      }\r\n\r\n      if (e1 < w1) {\r\n        signX *= -1;\r\n        t = w0, w0 = e0, e0 = t;\r\n        t = w1, w1 = e1, e1 = t;\r\n        if (type in flipX) overlay.attr(\"cursor\", cursors[type = flipX[type]]);\r\n      }\r\n\r\n      if (s1 < n1) {\r\n        signY *= -1;\r\n        t = n0, n0 = s0, s0 = t;\r\n        t = n1, n1 = s1, s1 = t;\r\n        if (type in flipY) overlay.attr(\"cursor\", cursors[type = flipY[type]]);\r\n      }\r\n\r\n      if (state.selection) selection = state.selection; // May be set by brush.move!\r\n      if (lockX) w1 = selection[0][0], e1 = selection[1][0];\r\n      if (lockY) n1 = selection[0][1], s1 = selection[1][1];\r\n\r\n      if (selection[0][0] !== w1\r\n          || selection[0][1] !== n1\r\n          || selection[1][0] !== e1\r\n          || selection[1][1] !== s1) {\r\n        state.selection = [[w1, n1], [e1, s1]];\r\n        redraw.call(that);\r\n        emit.brush();\r\n      }\r\n    }\r\n\r\n    function ended() {\r\n      nopropagation$1();\r\n      if (exports.event.touches) {\r\n        if (exports.event.touches.length) return;\r\n        if (touchending) clearTimeout(touchending);\r\n        touchending = setTimeout(function() { touchending = null; }, 500); // Ghost clicks are delayed!\r\n      } else {\r\n        yesdrag(exports.event.view, moving);\r\n        view.on(\"keydown.brush keyup.brush mousemove.brush mouseup.brush\", null);\r\n      }\r\n      group.attr(\"pointer-events\", \"all\");\r\n      overlay.attr(\"cursor\", cursors.overlay);\r\n      if (state.selection) selection = state.selection; // May be set by brush.move (on start)!\r\n      if (empty$1(selection)) state.selection = null, redraw.call(that);\r\n      emit.end();\r\n    }\r\n\r\n    function keydowned() {\r\n      switch (exports.event.keyCode) {\r\n        case 16: { // SHIFT\r\n          shifting = signX && signY;\r\n          break;\r\n        }\r\n        case 18: { // ALT\r\n          if (mode === MODE_HANDLE) {\r\n            if (signX) e0 = e1 - dx * signX, w0 = w1 + dx * signX;\r\n            if (signY) s0 = s1 - dy * signY, n0 = n1 + dy * signY;\r\n            mode = MODE_CENTER;\r\n            move();\r\n          }\r\n          break;\r\n        }\r\n        case 32: { // SPACE; takes priority over ALT\r\n          if (mode === MODE_HANDLE || mode === MODE_CENTER) {\r\n            if (signX < 0) e0 = e1 - dx; else if (signX > 0) w0 = w1 - dx;\r\n            if (signY < 0) s0 = s1 - dy; else if (signY > 0) n0 = n1 - dy;\r\n            mode = MODE_SPACE;\r\n            overlay.attr(\"cursor\", cursors.selection);\r\n            move();\r\n          }\r\n          break;\r\n        }\r\n        default: return;\r\n      }\r\n      noevent$1();\r\n    }\r\n\r\n    function keyupped() {\r\n      switch (exports.event.keyCode) {\r\n        case 16: { // SHIFT\r\n          if (shifting) {\r\n            lockX = lockY = shifting = false;\r\n            move();\r\n          }\r\n          break;\r\n        }\r\n        case 18: { // ALT\r\n          if (mode === MODE_CENTER) {\r\n            if (signX < 0) e0 = e1; else if (signX > 0) w0 = w1;\r\n            if (signY < 0) s0 = s1; else if (signY > 0) n0 = n1;\r\n            mode = MODE_HANDLE;\r\n            move();\r\n          }\r\n          break;\r\n        }\r\n        case 32: { // SPACE\r\n          if (mode === MODE_SPACE) {\r\n            if (exports.event.altKey) {\r\n              if (signX) e0 = e1 - dx * signX, w0 = w1 + dx * signX;\r\n              if (signY) s0 = s1 - dy * signY, n0 = n1 + dy * signY;\r\n              mode = MODE_CENTER;\r\n            } else {\r\n              if (signX < 0) e0 = e1; else if (signX > 0) w0 = w1;\r\n              if (signY < 0) s0 = s1; else if (signY > 0) n0 = n1;\r\n              mode = MODE_HANDLE;\r\n            }\r\n            overlay.attr(\"cursor\", cursors[type]);\r\n            move();\r\n          }\r\n          break;\r\n        }\r\n        default: return;\r\n      }\r\n      noevent$1();\r\n    }\r\n  }\r\n\r\n  function touchmoved() {\r\n    emitter(this, arguments).moved();\r\n  }\r\n\r\n  function touchended() {\r\n    emitter(this, arguments).ended();\r\n  }\r\n\r\n  function initialize() {\r\n    var state = this.__brush || {selection: null};\r\n    state.extent = number2(extent.apply(this, arguments));\r\n    state.dim = dim;\r\n    return state;\r\n  }\r\n\r\n  brush.extent = function(_) {\r\n    return arguments.length ? (extent = typeof _ === \"function\" ? _ : constant$4(number2(_)), brush) : extent;\r\n  };\r\n\r\n  brush.filter = function(_) {\r\n    return arguments.length ? (filter = typeof _ === \"function\" ? _ : constant$4(!!_), brush) : filter;\r\n  };\r\n\r\n  brush.touchable = function(_) {\r\n    return arguments.length ? (touchable = typeof _ === \"function\" ? _ : constant$4(!!_), brush) : touchable;\r\n  };\r\n\r\n  brush.handleSize = function(_) {\r\n    return arguments.length ? (handleSize = +_, brush) : handleSize;\r\n  };\r\n\r\n  brush.keyModifiers = function(_) {\r\n    return arguments.length ? (keys = !!_, brush) : keys;\r\n  };\r\n\r\n  brush.on = function() {\r\n    var value = listeners.on.apply(listeners, arguments);\r\n    return value === listeners ? brush : value;\r\n  };\r\n\r\n  return brush;\r\n}\r\n\r\nvar cos = Math.cos;\r\nvar sin = Math.sin;\r\nvar pi$1 = Math.PI;\r\nvar halfPi$1 = pi$1 / 2;\r\nvar tau$1 = pi$1 * 2;\r\nvar max$1 = Math.max;\r\n\r\nfunction compareValue(compare) {\r\n  return function(a, b) {\r\n    return compare(\r\n      a.source.value + a.target.value,\r\n      b.source.value + b.target.value\r\n    );\r\n  };\r\n}\r\n\r\nfunction chord() {\r\n  var padAngle = 0,\r\n      sortGroups = null,\r\n      sortSubgroups = null,\r\n      sortChords = null;\r\n\r\n  function chord(matrix) {\r\n    var n = matrix.length,\r\n        groupSums = [],\r\n        groupIndex = sequence(n),\r\n        subgroupIndex = [],\r\n        chords = [],\r\n        groups = chords.groups = new Array(n),\r\n        subgroups = new Array(n * n),\r\n        k,\r\n        x,\r\n        x0,\r\n        dx,\r\n        i,\r\n        j;\r\n\r\n    // Compute the sum.\r\n    k = 0, i = -1; while (++i < n) {\r\n      x = 0, j = -1; while (++j < n) {\r\n        x += matrix[i][j];\r\n      }\r\n      groupSums.push(x);\r\n      subgroupIndex.push(sequence(n));\r\n      k += x;\r\n    }\r\n\r\n    // Sort groups…\r\n    if (sortGroups) groupIndex.sort(function(a, b) {\r\n      return sortGroups(groupSums[a], groupSums[b]);\r\n    });\r\n\r\n    // Sort subgroups…\r\n    if (sortSubgroups) subgroupIndex.forEach(function(d, i) {\r\n      d.sort(function(a, b) {\r\n        return sortSubgroups(matrix[i][a], matrix[i][b]);\r\n      });\r\n    });\r\n\r\n    // Convert the sum to scaling factor for [0, 2pi].\r\n    // TODO Allow start and end angle to be specified?\r\n    // TODO Allow padding to be specified as percentage?\r\n    k = max$1(0, tau$1 - padAngle * n) / k;\r\n    dx = k ? padAngle : tau$1 / n;\r\n\r\n    // Compute the start and end angle for each group and subgroup.\r\n    // Note: Opera has a bug reordering object literal properties!\r\n    x = 0, i = -1; while (++i < n) {\r\n      x0 = x, j = -1; while (++j < n) {\r\n        var di = groupIndex[i],\r\n            dj = subgroupIndex[di][j],\r\n            v = matrix[di][dj],\r\n            a0 = x,\r\n            a1 = x += v * k;\r\n        subgroups[dj * n + di] = {\r\n          index: di,\r\n          subindex: dj,\r\n          startAngle: a0,\r\n          endAngle: a1,\r\n          value: v\r\n        };\r\n      }\r\n      groups[di] = {\r\n        index: di,\r\n        startAngle: x0,\r\n        endAngle: x,\r\n        value: groupSums[di]\r\n      };\r\n      x += dx;\r\n    }\r\n\r\n    // Generate chords for each (non-empty) subgroup-subgroup link.\r\n    i = -1; while (++i < n) {\r\n      j = i - 1; while (++j < n) {\r\n        var source = subgroups[j * n + i],\r\n            target = subgroups[i * n + j];\r\n        if (source.value || target.value) {\r\n          chords.push(source.value < target.value\r\n              ? {source: target, target: source}\r\n              : {source: source, target: target});\r\n        }\r\n      }\r\n    }\r\n\r\n    return sortChords ? chords.sort(sortChords) : chords;\r\n  }\r\n\r\n  chord.padAngle = function(_) {\r\n    return arguments.length ? (padAngle = max$1(0, _), chord) : padAngle;\r\n  };\r\n\r\n  chord.sortGroups = function(_) {\r\n    return arguments.length ? (sortGroups = _, chord) : sortGroups;\r\n  };\r\n\r\n  chord.sortSubgroups = function(_) {\r\n    return arguments.length ? (sortSubgroups = _, chord) : sortSubgroups;\r\n  };\r\n\r\n  chord.sortChords = function(_) {\r\n    return arguments.length ? (_ == null ? sortChords = null : (sortChords = compareValue(_))._ = _, chord) : sortChords && sortChords._;\r\n  };\r\n\r\n  return chord;\r\n}\r\n\r\nvar slice$2 = Array.prototype.slice;\r\n\r\nfunction constant$5(x) {\r\n  return function() {\r\n    return x;\r\n  };\r\n}\r\n\r\nvar pi$2 = Math.PI,\r\n    tau$2 = 2 * pi$2,\r\n    epsilon$1 = 1e-6,\r\n    tauEpsilon = tau$2 - epsilon$1;\r\n\r\nfunction Path() {\r\n  this._x0 = this._y0 = // start of current subpath\r\n  this._x1 = this._y1 = null; // end of current subpath\r\n  this._ = \"\";\r\n}\r\n\r\nfunction path() {\r\n  return new Path;\r\n}\r\n\r\nPath.prototype = path.prototype = {\r\n  constructor: Path,\r\n  moveTo: function(x, y) {\r\n    this._ += \"M\" + (this._x0 = this._x1 = +x) + \",\" + (this._y0 = this._y1 = +y);\r\n  },\r\n  closePath: function() {\r\n    if (this._x1 !== null) {\r\n      this._x1 = this._x0, this._y1 = this._y0;\r\n      this._ += \"Z\";\r\n    }\r\n  },\r\n  lineTo: function(x, y) {\r\n    this._ += \"L\" + (this._x1 = +x) + \",\" + (this._y1 = +y);\r\n  },\r\n  quadraticCurveTo: function(x1, y1, x, y) {\r\n    this._ += \"Q\" + (+x1) + \",\" + (+y1) + \",\" + (this._x1 = +x) + \",\" + (this._y1 = +y);\r\n  },\r\n  bezierCurveTo: function(x1, y1, x2, y2, x, y) {\r\n    this._ += \"C\" + (+x1) + \",\" + (+y1) + \",\" + (+x2) + \",\" + (+y2) + \",\" + (this._x1 = +x) + \",\" + (this._y1 = +y);\r\n  },\r\n  arcTo: function(x1, y1, x2, y2, r) {\r\n    x1 = +x1, y1 = +y1, x2 = +x2, y2 = +y2, r = +r;\r\n    var x0 = this._x1,\r\n        y0 = this._y1,\r\n        x21 = x2 - x1,\r\n        y21 = y2 - y1,\r\n        x01 = x0 - x1,\r\n        y01 = y0 - y1,\r\n        l01_2 = x01 * x01 + y01 * y01;\r\n\r\n    // Is the radius negative? Error.\r\n    if (r < 0) throw new Error(\"negative radius: \" + r);\r\n\r\n    // Is this path empty? Move to (x1,y1).\r\n    if (this._x1 === null) {\r\n      this._ += \"M\" + (this._x1 = x1) + \",\" + (this._y1 = y1);\r\n    }\r\n\r\n    // Or, is (x1,y1) coincident with (x0,y0)? Do nothing.\r\n    else if (!(l01_2 > epsilon$1));\r\n\r\n    // Or, are (x0,y0), (x1,y1) and (x2,y2) collinear?\r\n    // Equivalently, is (x1,y1) coincident with (x2,y2)?\r\n    // Or, is the radius zero? Line to (x1,y1).\r\n    else if (!(Math.abs(y01 * x21 - y21 * x01) > epsilon$1) || !r) {\r\n      this._ += \"L\" + (this._x1 = x1) + \",\" + (this._y1 = y1);\r\n    }\r\n\r\n    // Otherwise, draw an arc!\r\n    else {\r\n      var x20 = x2 - x0,\r\n          y20 = y2 - y0,\r\n          l21_2 = x21 * x21 + y21 * y21,\r\n          l20_2 = x20 * x20 + y20 * y20,\r\n          l21 = Math.sqrt(l21_2),\r\n          l01 = Math.sqrt(l01_2),\r\n          l = r * Math.tan((pi$2 - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2),\r\n          t01 = l / l01,\r\n          t21 = l / l21;\r\n\r\n      // If the start tangent is not coincident with (x0,y0), line to.\r\n      if (Math.abs(t01 - 1) > epsilon$1) {\r\n        this._ += \"L\" + (x1 + t01 * x01) + \",\" + (y1 + t01 * y01);\r\n      }\r\n\r\n      this._ += \"A\" + r + \",\" + r + \",0,0,\" + (+(y01 * x20 > x01 * y20)) + \",\" + (this._x1 = x1 + t21 * x21) + \",\" + (this._y1 = y1 + t21 * y21);\r\n    }\r\n  },\r\n  arc: function(x, y, r, a0, a1, ccw) {\r\n    x = +x, y = +y, r = +r, ccw = !!ccw;\r\n    var dx = r * Math.cos(a0),\r\n        dy = r * Math.sin(a0),\r\n        x0 = x + dx,\r\n        y0 = y + dy,\r\n        cw = 1 ^ ccw,\r\n        da = ccw ? a0 - a1 : a1 - a0;\r\n\r\n    // Is the radius negative? Error.\r\n    if (r < 0) throw new Error(\"negative radius: \" + r);\r\n\r\n    // Is this path empty? Move to (x0,y0).\r\n    if (this._x1 === null) {\r\n      this._ += \"M\" + x0 + \",\" + y0;\r\n    }\r\n\r\n    // Or, is (x0,y0) not coincident with the previous point? Line to (x0,y0).\r\n    else if (Math.abs(this._x1 - x0) > epsilon$1 || Math.abs(this._y1 - y0) > epsilon$1) {\r\n      this._ += \"L\" + x0 + \",\" + y0;\r\n    }\r\n\r\n    // Is this arc empty? We’re done.\r\n    if (!r) return;\r\n\r\n    // Does the angle go the wrong way? Flip the direction.\r\n    if (da < 0) da = da % tau$2 + tau$2;\r\n\r\n    // Is this a complete circle? Draw two arcs to complete the circle.\r\n    if (da > tauEpsilon) {\r\n      this._ += \"A\" + r + \",\" + r + \",0,1,\" + cw + \",\" + (x - dx) + \",\" + (y - dy) + \"A\" + r + \",\" + r + \",0,1,\" + cw + \",\" + (this._x1 = x0) + \",\" + (this._y1 = y0);\r\n    }\r\n\r\n    // Is this arc non-empty? Draw an arc!\r\n    else if (da > epsilon$1) {\r\n      this._ += \"A\" + r + \",\" + r + \",0,\" + (+(da >= pi$2)) + \",\" + cw + \",\" + (this._x1 = x + r * Math.cos(a1)) + \",\" + (this._y1 = y + r * Math.sin(a1));\r\n    }\r\n  },\r\n  rect: function(x, y, w, h) {\r\n    this._ += \"M\" + (this._x0 = this._x1 = +x) + \",\" + (this._y0 = this._y1 = +y) + \"h\" + (+w) + \"v\" + (+h) + \"h\" + (-w) + \"Z\";\r\n  },\r\n  toString: function() {\r\n    return this._;\r\n  }\r\n};\r\n\r\nfunction defaultSource(d) {\r\n  return d.source;\r\n}\r\n\r\nfunction defaultTarget(d) {\r\n  return d.target;\r\n}\r\n\r\nfunction defaultRadius(d) {\r\n  return d.radius;\r\n}\r\n\r\nfunction defaultStartAngle(d) {\r\n  return d.startAngle;\r\n}\r\n\r\nfunction defaultEndAngle(d) {\r\n  return d.endAngle;\r\n}\r\n\r\nfunction ribbon() {\r\n  var source = defaultSource,\r\n      target = defaultTarget,\r\n      radius = defaultRadius,\r\n      startAngle = defaultStartAngle,\r\n      endAngle = defaultEndAngle,\r\n      context = null;\r\n\r\n  function ribbon() {\r\n    var buffer,\r\n        argv = slice$2.call(arguments),\r\n        s = source.apply(this, argv),\r\n        t = target.apply(this, argv),\r\n        sr = +radius.apply(this, (argv[0] = s, argv)),\r\n        sa0 = startAngle.apply(this, argv) - halfPi$1,\r\n        sa1 = endAngle.apply(this, argv) - halfPi$1,\r\n        sx0 = sr * cos(sa0),\r\n        sy0 = sr * sin(sa0),\r\n        tr = +radius.apply(this, (argv[0] = t, argv)),\r\n        ta0 = startAngle.apply(this, argv) - halfPi$1,\r\n        ta1 = endAngle.apply(this, argv) - halfPi$1;\r\n\r\n    if (!context) context = buffer = path();\r\n\r\n    context.moveTo(sx0, sy0);\r\n    context.arc(0, 0, sr, sa0, sa1);\r\n    if (sa0 !== ta0 || sa1 !== ta1) { // TODO sr !== tr?\r\n      context.quadraticCurveTo(0, 0, tr * cos(ta0), tr * sin(ta0));\r\n      context.arc(0, 0, tr, ta0, ta1);\r\n    }\r\n    context.quadraticCurveTo(0, 0, sx0, sy0);\r\n    context.closePath();\r\n\r\n    if (buffer) return context = null, buffer + \"\" || null;\r\n  }\r\n\r\n  ribbon.radius = function(_) {\r\n    return arguments.length ? (radius = typeof _ === \"function\" ? _ : constant$5(+_), ribbon) : radius;\r\n  };\r\n\r\n  ribbon.startAngle = function(_) {\r\n    return arguments.length ? (startAngle = typeof _ === \"function\" ? _ : constant$5(+_), ribbon) : startAngle;\r\n  };\r\n\r\n  ribbon.endAngle = function(_) {\r\n    return arguments.length ? (endAngle = typeof _ === \"function\" ? _ : constant$5(+_), ribbon) : endAngle;\r\n  };\r\n\r\n  ribbon.source = function(_) {\r\n    return arguments.length ? (source = _, ribbon) : source;\r\n  };\r\n\r\n  ribbon.target = function(_) {\r\n    return arguments.length ? (target = _, ribbon) : target;\r\n  };\r\n\r\n  ribbon.context = function(_) {\r\n    return arguments.length ? ((context = _ == null ? null : _), ribbon) : context;\r\n  };\r\n\r\n  return ribbon;\r\n}\r\n\r\nvar prefix = \"$\";\r\n\r\nfunction Map() {}\r\n\r\nMap.prototype = map$1.prototype = {\r\n  constructor: Map,\r\n  has: function(key) {\r\n    return (prefix + key) in this;\r\n  },\r\n  get: function(key) {\r\n    return this[prefix + key];\r\n  },\r\n  set: function(key, value) {\r\n    this[prefix + key] = value;\r\n    return this;\r\n  },\r\n  remove: function(key) {\r\n    var property = prefix + key;\r\n    return property in this && delete this[property];\r\n  },\r\n  clear: function() {\r\n    for (var property in this) if (property[0] === prefix) delete this[property];\r\n  },\r\n  keys: function() {\r\n    var keys = [];\r\n    for (var property in this) if (property[0] === prefix) keys.push(property.slice(1));\r\n    return keys;\r\n  },\r\n  values: function() {\r\n    var values = [];\r\n    for (var property in this) if (property[0] === prefix) values.push(this[property]);\r\n    return values;\r\n  },\r\n  entries: function() {\r\n    var entries = [];\r\n    for (var property in this) if (property[0] === prefix) entries.push({key: property.slice(1), value: this[property]});\r\n    return entries;\r\n  },\r\n  size: function() {\r\n    var size = 0;\r\n    for (var property in this) if (property[0] === prefix) ++size;\r\n    return size;\r\n  },\r\n  empty: function() {\r\n    for (var property in this) if (property[0] === prefix) return false;\r\n    return true;\r\n  },\r\n  each: function(f) {\r\n    for (var property in this) if (property[0] === prefix) f(this[property], property.slice(1), this);\r\n  }\r\n};\r\n\r\nfunction map$1(object, f) {\r\n  var map = new Map;\r\n\r\n  // Copy constructor.\r\n  if (object instanceof Map) object.each(function(value, key) { map.set(key, value); });\r\n\r\n  // Index array by numeric index or specified key function.\r\n  else if (Array.isArray(object)) {\r\n    var i = -1,\r\n        n = object.length,\r\n        o;\r\n\r\n    if (f == null) while (++i < n) map.set(i, object[i]);\r\n    else while (++i < n) map.set(f(o = object[i], i, object), o);\r\n  }\r\n\r\n  // Convert object to map.\r\n  else if (object) for (var key in object) map.set(key, object[key]);\r\n\r\n  return map;\r\n}\r\n\r\nfunction nest() {\r\n  var keys = [],\r\n      sortKeys = [],\r\n      sortValues,\r\n      rollup,\r\n      nest;\r\n\r\n  function apply(array, depth, createResult, setResult) {\r\n    if (depth >= keys.length) {\r\n      if (sortValues != null) array.sort(sortValues);\r\n      return rollup != null ? rollup(array) : array;\r\n    }\r\n\r\n    var i = -1,\r\n        n = array.length,\r\n        key = keys[depth++],\r\n        keyValue,\r\n        value,\r\n        valuesByKey = map$1(),\r\n        values,\r\n        result = createResult();\r\n\r\n    while (++i < n) {\r\n      if (values = valuesByKey.get(keyValue = key(value = array[i]) + \"\")) {\r\n        values.push(value);\r\n      } else {\r\n        valuesByKey.set(keyValue, [value]);\r\n      }\r\n    }\r\n\r\n    valuesByKey.each(function(values, key) {\r\n      setResult(result, key, apply(values, depth, createResult, setResult));\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  function entries(map, depth) {\r\n    if (++depth > keys.length) return map;\r\n    var array, sortKey = sortKeys[depth - 1];\r\n    if (rollup != null && depth >= keys.length) array = map.entries();\r\n    else array = [], map.each(function(v, k) { array.push({key: k, values: entries(v, depth)}); });\r\n    return sortKey != null ? array.sort(function(a, b) { return sortKey(a.key, b.key); }) : array;\r\n  }\r\n\r\n  return nest = {\r\n    object: function(array) { return apply(array, 0, createObject, setObject); },\r\n    map: function(array) { return apply(array, 0, createMap, setMap); },\r\n    entries: function(array) { return entries(apply(array, 0, createMap, setMap), 0); },\r\n    key: function(d) { keys.push(d); return nest; },\r\n    sortKeys: function(order) { sortKeys[keys.length - 1] = order; return nest; },\r\n    sortValues: function(order) { sortValues = order; return nest; },\r\n    rollup: function(f) { rollup = f; return nest; }\r\n  };\r\n}\r\n\r\nfunction createObject() {\r\n  return {};\r\n}\r\n\r\nfunction setObject(object, key, value) {\r\n  object[key] = value;\r\n}\r\n\r\nfunction createMap() {\r\n  return map$1();\r\n}\r\n\r\nfunction setMap(map, key, value) {\r\n  map.set(key, value);\r\n}\r\n\r\nfunction Set() {}\r\n\r\nvar proto = map$1.prototype;\r\n\r\nSet.prototype = set$2.prototype = {\r\n  constructor: Set,\r\n  has: proto.has,\r\n  add: function(value) {\r\n    value += \"\";\r\n    this[prefix + value] = value;\r\n    return this;\r\n  },\r\n  remove: proto.remove,\r\n  clear: proto.clear,\r\n  values: proto.keys,\r\n  size: proto.size,\r\n  empty: proto.empty,\r\n  each: proto.each\r\n};\r\n\r\nfunction set$2(object, f) {\r\n  var set = new Set;\r\n\r\n  // Copy constructor.\r\n  if (object instanceof Set) object.each(function(value) { set.add(value); });\r\n\r\n  // Otherwise, assume it’s an array.\r\n  else if (object) {\r\n    var i = -1, n = object.length;\r\n    if (f == null) while (++i < n) set.add(object[i]);\r\n    else while (++i < n) set.add(f(object[i], i, object));\r\n  }\r\n\r\n  return set;\r\n}\r\n\r\nfunction keys(map) {\r\n  var keys = [];\r\n  for (var key in map) keys.push(key);\r\n  return keys;\r\n}\r\n\r\nfunction values(map) {\r\n  var values = [];\r\n  for (var key in map) values.push(map[key]);\r\n  return values;\r\n}\r\n\r\nfunction entries(map) {\r\n  var entries = [];\r\n  for (var key in map) entries.push({key: key, value: map[key]});\r\n  return entries;\r\n}\r\n\r\nvar array$2 = Array.prototype;\r\n\r\nvar slice$3 = array$2.slice;\r\n\r\nfunction ascending$2(a, b) {\r\n  return a - b;\r\n}\r\n\r\nfunction area(ring) {\r\n  var i = 0, n = ring.length, area = ring[n - 1][1] * ring[0][0] - ring[n - 1][0] * ring[0][1];\r\n  while (++i < n) area += ring[i - 1][1] * ring[i][0] - ring[i - 1][0] * ring[i][1];\r\n  return area;\r\n}\r\n\r\nfunction constant$6(x) {\r\n  return function() {\r\n    return x;\r\n  };\r\n}\r\n\r\nfunction contains(ring, hole) {\r\n  var i = -1, n = hole.length, c;\r\n  while (++i < n) if (c = ringContains(ring, hole[i])) return c;\r\n  return 0;\r\n}\r\n\r\nfunction ringContains(ring, point) {\r\n  var x = point[0], y = point[1], contains = -1;\r\n  for (var i = 0, n = ring.length, j = n - 1; i < n; j = i++) {\r\n    var pi = ring[i], xi = pi[0], yi = pi[1], pj = ring[j], xj = pj[0], yj = pj[1];\r\n    if (segmentContains(pi, pj, point)) return 0;\r\n    if (((yi > y) !== (yj > y)) && ((x < (xj - xi) * (y - yi) / (yj - yi) + xi))) contains = -contains;\r\n  }\r\n  return contains;\r\n}\r\n\r\nfunction segmentContains(a, b, c) {\r\n  var i; return collinear(a, b, c) && within(a[i = +(a[0] === b[0])], c[i], b[i]);\r\n}\r\n\r\nfunction collinear(a, b, c) {\r\n  return (b[0] - a[0]) * (c[1] - a[1]) === (c[0] - a[0]) * (b[1] - a[1]);\r\n}\r\n\r\nfunction within(p, q, r) {\r\n  return p <= q && q <= r || r <= q && q <= p;\r\n}\r\n\r\nfunction noop$1() {}\r\n\r\nvar cases = [\r\n  [],\r\n  [[[1.0, 1.5], [0.5, 1.0]]],\r\n  [[[1.5, 1.0], [1.0, 1.5]]],\r\n  [[[1.5, 1.0], [0.5, 1.0]]],\r\n  [[[1.0, 0.5], [1.5, 1.0]]],\r\n  [[[1.0, 1.5], [0.5, 1.0]], [[1.0, 0.5], [1.5, 1.0]]],\r\n  [[[1.0, 0.5], [1.0, 1.5]]],\r\n  [[[1.0, 0.5], [0.5, 1.0]]],\r\n  [[[0.5, 1.0], [1.0, 0.5]]],\r\n  [[[1.0, 1.5], [1.0, 0.5]]],\r\n  [[[0.5, 1.0], [1.0, 0.5]], [[1.5, 1.0], [1.0, 1.5]]],\r\n  [[[1.5, 1.0], [1.0, 0.5]]],\r\n  [[[0.5, 1.0], [1.5, 1.0]]],\r\n  [[[1.0, 1.5], [1.5, 1.0]]],\r\n  [[[0.5, 1.0], [1.0, 1.5]]],\r\n  []\r\n];\r\n\r\nfunction contours() {\r\n  var dx = 1,\r\n      dy = 1,\r\n      threshold = thresholdSturges,\r\n      smooth = smoothLinear;\r\n\r\n  function contours(values) {\r\n    var tz = threshold(values);\r\n\r\n    // Convert number of thresholds into uniform thresholds.\r\n    if (!Array.isArray(tz)) {\r\n      var domain = extent(values), start = domain[0], stop = domain[1];\r\n      tz = tickStep(start, stop, tz);\r\n      tz = sequence(Math.floor(start / tz) * tz, Math.floor(stop / tz) * tz, tz);\r\n    } else {\r\n      tz = tz.slice().sort(ascending$2);\r\n    }\r\n\r\n    return tz.map(function(value) {\r\n      return contour(values, value);\r\n    });\r\n  }\r\n\r\n  // Accumulate, smooth contour rings, assign holes to exterior rings.\r\n  // Based on https://github.com/mbostock/shapefile/blob/v0.6.2/shp/polygon.js\r\n  function contour(values, value) {\r\n    var polygons = [],\r\n        holes = [];\r\n\r\n    isorings(values, value, function(ring) {\r\n      smooth(ring, values, value);\r\n      if (area(ring) > 0) polygons.push([ring]);\r\n      else holes.push(ring);\r\n    });\r\n\r\n    holes.forEach(function(hole) {\r\n      for (var i = 0, n = polygons.length, polygon; i < n; ++i) {\r\n        if (contains((polygon = polygons[i])[0], hole) !== -1) {\r\n          polygon.push(hole);\r\n          return;\r\n        }\r\n      }\r\n    });\r\n\r\n    return {\r\n      type: \"MultiPolygon\",\r\n      value: value,\r\n      coordinates: polygons\r\n    };\r\n  }\r\n\r\n  // Marching squares with isolines stitched into rings.\r\n  // Based on https://github.com/topojson/topojson-client/blob/v3.0.0/src/stitch.js\r\n  function isorings(values, value, callback) {\r\n    var fragmentByStart = new Array,\r\n        fragmentByEnd = new Array,\r\n        x, y, t0, t1, t2, t3;\r\n\r\n    // Special case for the first row (y = -1, t2 = t3 = 0).\r\n    x = y = -1;\r\n    t1 = values[0] >= value;\r\n    cases[t1 << 1].forEach(stitch);\r\n    while (++x < dx - 1) {\r\n      t0 = t1, t1 = values[x + 1] >= value;\r\n      cases[t0 | t1 << 1].forEach(stitch);\r\n    }\r\n    cases[t1 << 0].forEach(stitch);\r\n\r\n    // General case for the intermediate rows.\r\n    while (++y < dy - 1) {\r\n      x = -1;\r\n      t1 = values[y * dx + dx] >= value;\r\n      t2 = values[y * dx] >= value;\r\n      cases[t1 << 1 | t2 << 2].forEach(stitch);\r\n      while (++x < dx - 1) {\r\n        t0 = t1, t1 = values[y * dx + dx + x + 1] >= value;\r\n        t3 = t2, t2 = values[y * dx + x + 1] >= value;\r\n        cases[t0 | t1 << 1 | t2 << 2 | t3 << 3].forEach(stitch);\r\n      }\r\n      cases[t1 | t2 << 3].forEach(stitch);\r\n    }\r\n\r\n    // Special case for the last row (y = dy - 1, t0 = t1 = 0).\r\n    x = -1;\r\n    t2 = values[y * dx] >= value;\r\n    cases[t2 << 2].forEach(stitch);\r\n    while (++x < dx - 1) {\r\n      t3 = t2, t2 = values[y * dx + x + 1] >= value;\r\n      cases[t2 << 2 | t3 << 3].forEach(stitch);\r\n    }\r\n    cases[t2 << 3].forEach(stitch);\r\n\r\n    function stitch(line) {\r\n      var start = [line[0][0] + x, line[0][1] + y],\r\n          end = [line[1][0] + x, line[1][1] + y],\r\n          startIndex = index(start),\r\n          endIndex = index(end),\r\n          f, g;\r\n      if (f = fragmentByEnd[startIndex]) {\r\n        if (g = fragmentByStart[endIndex]) {\r\n          delete fragmentByEnd[f.end];\r\n          delete fragmentByStart[g.start];\r\n          if (f === g) {\r\n            f.ring.push(end);\r\n            callback(f.ring);\r\n          } else {\r\n            fragmentByStart[f.start] = fragmentByEnd[g.end] = {start: f.start, end: g.end, ring: f.ring.concat(g.ring)};\r\n          }\r\n        } else {\r\n          delete fragmentByEnd[f.end];\r\n          f.ring.push(end);\r\n          fragmentByEnd[f.end = endIndex] = f;\r\n        }\r\n      } else if (f = fragmentByStart[endIndex]) {\r\n        if (g = fragmentByEnd[startIndex]) {\r\n          delete fragmentByStart[f.start];\r\n          delete fragmentByEnd[g.end];\r\n          if (f === g) {\r\n            f.ring.push(end);\r\n            callback(f.ring);\r\n          } else {\r\n            fragmentByStart[g.start] = fragmentByEnd[f.end] = {start: g.start, end: f.end, ring: g.ring.concat(f.ring)};\r\n          }\r\n        } else {\r\n          delete fragmentByStart[f.start];\r\n          f.ring.unshift(start);\r\n          fragmentByStart[f.start = startIndex] = f;\r\n        }\r\n      } else {\r\n        fragmentByStart[startIndex] = fragmentByEnd[endIndex] = {start: startIndex, end: endIndex, ring: [start, end]};\r\n      }\r\n    }\r\n  }\r\n\r\n  function index(point) {\r\n    return point[0] * 2 + point[1] * (dx + 1) * 4;\r\n  }\r\n\r\n  function smoothLinear(ring, values, value) {\r\n    ring.forEach(function(point) {\r\n      var x = point[0],\r\n          y = point[1],\r\n          xt = x | 0,\r\n          yt = y | 0,\r\n          v0,\r\n          v1 = values[yt * dx + xt];\r\n      if (x > 0 && x < dx && xt === x) {\r\n        v0 = values[yt * dx + xt - 1];\r\n        point[0] = x + (value - v0) / (v1 - v0) - 0.5;\r\n      }\r\n      if (y > 0 && y < dy && yt === y) {\r\n        v0 = values[(yt - 1) * dx + xt];\r\n        point[1] = y + (value - v0) / (v1 - v0) - 0.5;\r\n      }\r\n    });\r\n  }\r\n\r\n  contours.contour = contour;\r\n\r\n  contours.size = function(_) {\r\n    if (!arguments.length) return [dx, dy];\r\n    var _0 = Math.ceil(_[0]), _1 = Math.ceil(_[1]);\r\n    if (!(_0 > 0) || !(_1 > 0)) throw new Error(\"invalid size\");\r\n    return dx = _0, dy = _1, contours;\r\n  };\r\n\r\n  contours.thresholds = function(_) {\r\n    return arguments.length ? (threshold = typeof _ === \"function\" ? _ : Array.isArray(_) ? constant$6(slice$3.call(_)) : constant$6(_), contours) : threshold;\r\n  };\r\n\r\n  contours.smooth = function(_) {\r\n    return arguments.length ? (smooth = _ ? smoothLinear : noop$1, contours) : smooth === smoothLinear;\r\n  };\r\n\r\n  return contours;\r\n}\r\n\r\n// TODO Optimize edge cases.\r\n// TODO Optimize index calculation.\r\n// TODO Optimize arguments.\r\nfunction blurX(source, target, r) {\r\n  var n = source.width,\r\n      m = source.height,\r\n      w = (r << 1) + 1;\r\n  for (var j = 0; j < m; ++j) {\r\n    for (var i = 0, sr = 0; i < n + r; ++i) {\r\n      if (i < n) {\r\n        sr += source.data[i + j * n];\r\n      }\r\n      if (i >= r) {\r\n        if (i >= w) {\r\n          sr -= source.data[i - w + j * n];\r\n        }\r\n        target.data[i - r + j * n] = sr / Math.min(i + 1, n - 1 + w - i, w);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// TODO Optimize edge cases.\r\n// TODO Optimize index calculation.\r\n// TODO Optimize arguments.\r\nfunction blurY(source, target, r) {\r\n  var n = source.width,\r\n      m = source.height,\r\n      w = (r << 1) + 1;\r\n  for (var i = 0; i < n; ++i) {\r\n    for (var j = 0, sr = 0; j < m + r; ++j) {\r\n      if (j < m) {\r\n        sr += source.data[i + j * n];\r\n      }\r\n      if (j >= r) {\r\n        if (j >= w) {\r\n          sr -= source.data[i + (j - w) * n];\r\n        }\r\n        target.data[i + (j - r) * n] = sr / Math.min(j + 1, m - 1 + w - j, w);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction defaultX(d) {\r\n  return d[0];\r\n}\r\n\r\nfunction defaultY(d) {\r\n  return d[1];\r\n}\r\n\r\nfunction defaultWeight() {\r\n  return 1;\r\n}\r\n\r\nfunction density() {\r\n  var x = defaultX,\r\n      y = defaultY,\r\n      weight = defaultWeight,\r\n      dx = 960,\r\n      dy = 500,\r\n      r = 20, // blur radius\r\n      k = 2, // log2(grid cell size)\r\n      o = r * 3, // grid offset, to pad for blur\r\n      n = (dx + o * 2) >> k, // grid width\r\n      m = (dy + o * 2) >> k, // grid height\r\n      threshold = constant$6(20);\r\n\r\n  function density(data) {\r\n    var values0 = new Float32Array(n * m),\r\n        values1 = new Float32Array(n * m);\r\n\r\n    data.forEach(function(d, i, data) {\r\n      var xi = (+x(d, i, data) + o) >> k,\r\n          yi = (+y(d, i, data) + o) >> k,\r\n          wi = +weight(d, i, data);\r\n      if (xi >= 0 && xi < n && yi >= 0 && yi < m) {\r\n        values0[xi + yi * n] += wi;\r\n      }\r\n    });\r\n\r\n    // TODO Optimize.\r\n    blurX({width: n, height: m, data: values0}, {width: n, height: m, data: values1}, r >> k);\r\n    blurY({width: n, height: m, data: values1}, {width: n, height: m, data: values0}, r >> k);\r\n    blurX({width: n, height: m, data: values0}, {width: n, height: m, data: values1}, r >> k);\r\n    blurY({width: n, height: m, data: values1}, {width: n, height: m, data: values0}, r >> k);\r\n    blurX({width: n, height: m, data: values0}, {width: n, height: m, data: values1}, r >> k);\r\n    blurY({width: n, height: m, data: values1}, {width: n, height: m, data: values0}, r >> k);\r\n\r\n    var tz = threshold(values0);\r\n\r\n    // Convert number of thresholds into uniform thresholds.\r\n    if (!Array.isArray(tz)) {\r\n      var stop = max(values0);\r\n      tz = tickStep(0, stop, tz);\r\n      tz = sequence(0, Math.floor(stop / tz) * tz, tz);\r\n      tz.shift();\r\n    }\r\n\r\n    return contours()\r\n        .thresholds(tz)\r\n        .size([n, m])\r\n      (values0)\r\n        .map(transform);\r\n  }\r\n\r\n  function transform(geometry) {\r\n    geometry.value *= Math.pow(2, -2 * k); // Density in points per square pixel.\r\n    geometry.coordinates.forEach(transformPolygon);\r\n    return geometry;\r\n  }\r\n\r\n  function transformPolygon(coordinates) {\r\n    coordinates.forEach(transformRing);\r\n  }\r\n\r\n  function transformRing(coordinates) {\r\n    coordinates.forEach(transformPoint);\r\n  }\r\n\r\n  // TODO Optimize.\r\n  function transformPoint(coordinates) {\r\n    coordinates[0] = coordinates[0] * Math.pow(2, k) - o;\r\n    coordinates[1] = coordinates[1] * Math.pow(2, k) - o;\r\n  }\r\n\r\n  function resize() {\r\n    o = r * 3;\r\n    n = (dx + o * 2) >> k;\r\n    m = (dy + o * 2) >> k;\r\n    return density;\r\n  }\r\n\r\n  density.x = function(_) {\r\n    return arguments.length ? (x = typeof _ === \"function\" ? _ : constant$6(+_), density) : x;\r\n  };\r\n\r\n  density.y = function(_) {\r\n    return arguments.length ? (y = typeof _ === \"function\" ? _ : constant$6(+_), density) : y;\r\n  };\r\n\r\n  density.weight = function(_) {\r\n    return arguments.length ? (weight = typeof _ === \"function\" ? _ : constant$6(+_), density) : weight;\r\n  };\r\n\r\n  density.size = function(_) {\r\n    if (!arguments.length) return [dx, dy];\r\n    var _0 = Math.ceil(_[0]), _1 = Math.ceil(_[1]);\r\n    if (!(_0 >= 0) && !(_0 >= 0)) throw new Error(\"invalid size\");\r\n    return dx = _0, dy = _1, resize();\r\n  };\r\n\r\n  density.cellSize = function(_) {\r\n    if (!arguments.length) return 1 << k;\r\n    if (!((_ = +_) >= 1)) throw new Error(\"invalid cell size\");\r\n    return k = Math.floor(Math.log(_) / Math.LN2), resize();\r\n  };\r\n\r\n  density.thresholds = function(_) {\r\n    return arguments.length ? (threshold = typeof _ === \"function\" ? _ : Array.isArray(_) ? constant$6(slice$3.call(_)) : constant$6(_), density) : threshold;\r\n  };\r\n\r\n  density.bandwidth = function(_) {\r\n    if (!arguments.length) return Math.sqrt(r * (r + 1));\r\n    if (!((_ = +_) >= 0)) throw new Error(\"invalid bandwidth\");\r\n    return r = Math.round((Math.sqrt(4 * _ * _ + 1) - 1) / 2), resize();\r\n  };\r\n\r\n  return density;\r\n}\r\n\r\nvar EOL = {},\r\n    EOF = {},\r\n    QUOTE = 34,\r\n    NEWLINE = 10,\r\n    RETURN = 13;\r\n\r\nfunction objectConverter(columns) {\r\n  return new Function(\"d\", \"return {\" + columns.map(function(name, i) {\r\n    return JSON.stringify(name) + \": d[\" + i + \"] || \\\"\\\"\";\r\n  }).join(\",\") + \"}\");\r\n}\r\n\r\nfunction customConverter(columns, f) {\r\n  var object = objectConverter(columns);\r\n  return function(row, i) {\r\n    return f(object(row), i, columns);\r\n  };\r\n}\r\n\r\n// Compute unique columns in order of discovery.\r\nfunction inferColumns(rows) {\r\n  var columnSet = Object.create(null),\r\n      columns = [];\r\n\r\n  rows.forEach(function(row) {\r\n    for (var column in row) {\r\n      if (!(column in columnSet)) {\r\n        columns.push(columnSet[column] = column);\r\n      }\r\n    }\r\n  });\r\n\r\n  return columns;\r\n}\r\n\r\nfunction pad(value, width) {\r\n  var s = value + \"\", length = s.length;\r\n  return length < width ? new Array(width - length + 1).join(0) + s : s;\r\n}\r\n\r\nfunction formatYear(year) {\r\n  return year < 0 ? \"-\" + pad(-year, 6)\r\n    : year > 9999 ? \"+\" + pad(year, 6)\r\n    : pad(year, 4);\r\n}\r\n\r\nfunction formatDate(date) {\r\n  var hours = date.getUTCHours(),\r\n      minutes = date.getUTCMinutes(),\r\n      seconds = date.getUTCSeconds(),\r\n      milliseconds = date.getUTCMilliseconds();\r\n  return isNaN(date) ? \"Invalid Date\"\r\n      : formatYear(date.getUTCFullYear()) + \"-\" + pad(date.getUTCMonth() + 1, 2) + \"-\" + pad(date.getUTCDate(), 2)\r\n      + (milliseconds ? \"T\" + pad(hours, 2) + \":\" + pad(minutes, 2) + \":\" + pad(seconds, 2) + \".\" + pad(milliseconds, 3) + \"Z\"\r\n      : seconds ? \"T\" + pad(hours, 2) + \":\" + pad(minutes, 2) + \":\" + pad(seconds, 2) + \"Z\"\r\n      : minutes || hours ? \"T\" + pad(hours, 2) + \":\" + pad(minutes, 2) + \"Z\"\r\n      : \"\");\r\n}\r\n\r\nfunction dsvFormat(delimiter) {\r\n  var reFormat = new RegExp(\"[\\\"\" + delimiter + \"\\n\\r]\"),\r\n      DELIMITER = delimiter.charCodeAt(0);\r\n\r\n  function parse(text, f) {\r\n    var convert, columns, rows = parseRows(text, function(row, i) {\r\n      if (convert) return convert(row, i - 1);\r\n      columns = row, convert = f ? customConverter(row, f) : objectConverter(row);\r\n    });\r\n    rows.columns = columns || [];\r\n    return rows;\r\n  }\r\n\r\n  function parseRows(text, f) {\r\n    var rows = [], // output rows\r\n        N = text.length,\r\n        I = 0, // current character index\r\n        n = 0, // current line number\r\n        t, // current token\r\n        eof = N <= 0, // current token followed by EOF?\r\n        eol = false; // current token followed by EOL?\r\n\r\n    // Strip the trailing newline.\r\n    if (text.charCodeAt(N - 1) === NEWLINE) --N;\r\n    if (text.charCodeAt(N - 1) === RETURN) --N;\r\n\r\n    function token() {\r\n      if (eof) return EOF;\r\n      if (eol) return eol = false, EOL;\r\n\r\n      // Unescape quotes.\r\n      var i, j = I, c;\r\n      if (text.charCodeAt(j) === QUOTE) {\r\n        while (I++ < N && text.charCodeAt(I) !== QUOTE || text.charCodeAt(++I) === QUOTE);\r\n        if ((i = I) >= N) eof = true;\r\n        else if ((c = text.charCodeAt(I++)) === NEWLINE) eol = true;\r\n        else if (c === RETURN) { eol = true; if (text.charCodeAt(I) === NEWLINE) ++I; }\r\n        return text.slice(j + 1, i - 1).replace(/\"\"/g, \"\\\"\");\r\n      }\r\n\r\n      // Find next delimiter or newline.\r\n      while (I < N) {\r\n        if ((c = text.charCodeAt(i = I++)) === NEWLINE) eol = true;\r\n        else if (c === RETURN) { eol = true; if (text.charCodeAt(I) === NEWLINE) ++I; }\r\n        else if (c !== DELIMITER) continue;\r\n        return text.slice(j, i);\r\n      }\r\n\r\n      // Return last token before EOF.\r\n      return eof = true, text.slice(j, N);\r\n    }\r\n\r\n    while ((t = token()) !== EOF) {\r\n      var row = [];\r\n      while (t !== EOL && t !== EOF) row.push(t), t = token();\r\n      if (f && (row = f(row, n++)) == null) continue;\r\n      rows.push(row);\r\n    }\r\n\r\n    return rows;\r\n  }\r\n\r\n  function preformatBody(rows, columns) {\r\n    return rows.map(function(row) {\r\n      return columns.map(function(column) {\r\n        return formatValue(row[column]);\r\n      }).join(delimiter);\r\n    });\r\n  }\r\n\r\n  function format(rows, columns) {\r\n    if (columns == null) columns = inferColumns(rows);\r\n    return [columns.map(formatValue).join(delimiter)].concat(preformatBody(rows, columns)).join(\"\\n\");\r\n  }\r\n\r\n  function formatBody(rows, columns) {\r\n    if (columns == null) columns = inferColumns(rows);\r\n    return preformatBody(rows, columns).join(\"\\n\");\r\n  }\r\n\r\n  function formatRows(rows) {\r\n    return rows.map(formatRow).join(\"\\n\");\r\n  }\r\n\r\n  function formatRow(row) {\r\n    return row.map(formatValue).join(delimiter);\r\n  }\r\n\r\n  function formatValue(value) {\r\n    return value == null ? \"\"\r\n        : value instanceof Date ? formatDate(value)\r\n        : reFormat.test(value += \"\") ? \"\\\"\" + value.replace(/\"/g, \"\\\"\\\"\") + \"\\\"\"\r\n        : value;\r\n  }\r\n\r\n  return {\r\n    parse: parse,\r\n    parseRows: parseRows,\r\n    format: format,\r\n    formatBody: formatBody,\r\n    formatRows: formatRows,\r\n    formatRow: formatRow,\r\n    formatValue: formatValue\r\n  };\r\n}\r\n\r\nvar csv = dsvFormat(\",\");\r\n\r\nvar csvParse = csv.parse;\r\nvar csvParseRows = csv.parseRows;\r\nvar csvFormat = csv.format;\r\nvar csvFormatBody = csv.formatBody;\r\nvar csvFormatRows = csv.formatRows;\r\nvar csvFormatRow = csv.formatRow;\r\nvar csvFormatValue = csv.formatValue;\r\n\r\nvar tsv = dsvFormat(\"\\t\");\r\n\r\nvar tsvParse = tsv.parse;\r\nvar tsvParseRows = tsv.parseRows;\r\nvar tsvFormat = tsv.format;\r\nvar tsvFormatBody = tsv.formatBody;\r\nvar tsvFormatRows = tsv.formatRows;\r\nvar tsvFormatRow = tsv.formatRow;\r\nvar tsvFormatValue = tsv.formatValue;\r\n\r\nfunction autoType(object) {\r\n  for (var key in object) {\r\n    var value = object[key].trim(), number, m;\r\n    if (!value) value = null;\r\n    else if (value === \"true\") value = true;\r\n    else if (value === \"false\") value = false;\r\n    else if (value === \"NaN\") value = NaN;\r\n    else if (!isNaN(number = +value)) value = number;\r\n    else if (m = value.match(/^([-+]\\d{2})?\\d{4}(-\\d{2}(-\\d{2})?)?(T\\d{2}:\\d{2}(:\\d{2}(\\.\\d{3})?)?(Z|[-+]\\d{2}:\\d{2})?)?$/)) {\r\n      if (fixtz && !!m[4] && !m[7]) value = value.replace(/-/g, \"/\").replace(/T/, \" \");\r\n      value = new Date(value);\r\n    }\r\n    else continue;\r\n    object[key] = value;\r\n  }\r\n  return object;\r\n}\r\n\r\n// https://github.com/d3/d3-dsv/issues/45\r\nvar fixtz = new Date(\"2019-01-01T00:00\").getHours() || new Date(\"2019-07-01T00:00\").getHours();\r\n\r\nfunction responseBlob(response) {\r\n  if (!response.ok) throw new Error(response.status + \" \" + response.statusText);\r\n  return response.blob();\r\n}\r\n\r\nfunction blob(input, init) {\r\n  return fetch(input, init).then(responseBlob);\r\n}\r\n\r\nfunction responseArrayBuffer(response) {\r\n  if (!response.ok) throw new Error(response.status + \" \" + response.statusText);\r\n  return response.arrayBuffer();\r\n}\r\n\r\nfunction buffer(input, init) {\r\n  return fetch(input, init).then(responseArrayBuffer);\r\n}\r\n\r\nfunction responseText(response) {\r\n  if (!response.ok) throw new Error(response.status + \" \" + response.statusText);\r\n  return response.text();\r\n}\r\n\r\nfunction text(input, init) {\r\n  return fetch(input, init).then(responseText);\r\n}\r\n\r\nfunction dsvParse(parse) {\r\n  return function(input, init, row) {\r\n    if (arguments.length === 2 && typeof init === \"function\") row = init, init = undefined;\r\n    return text(input, init).then(function(response) {\r\n      return parse(response, row);\r\n    });\r\n  };\r\n}\r\n\r\nfunction dsv(delimiter, input, init, row) {\r\n  if (arguments.length === 3 && typeof init === \"function\") row = init, init = undefined;\r\n  var format = dsvFormat(delimiter);\r\n  return text(input, init).then(function(response) {\r\n    return format.parse(response, row);\r\n  });\r\n}\r\n\r\nvar csv$1 = dsvParse(csvParse);\r\nvar tsv$1 = dsvParse(tsvParse);\r\n\r\nfunction image(input, init) {\r\n  return new Promise(function(resolve, reject) {\r\n    var image = new Image;\r\n    for (var key in init) image[key] = init[key];\r\n    image.onerror = reject;\r\n    image.onload = function() { resolve(image); };\r\n    image.src = input;\r\n  });\r\n}\r\n\r\nfunction responseJson(response) {\r\n  if (!response.ok) throw new Error(response.status + \" \" + response.statusText);\r\n  return response.json();\r\n}\r\n\r\nfunction json(input, init) {\r\n  return fetch(input, init).then(responseJson);\r\n}\r\n\r\nfunction parser(type) {\r\n  return function(input, init)  {\r\n    return text(input, init).then(function(text) {\r\n      return (new DOMParser).parseFromString(text, type);\r\n    });\r\n  };\r\n}\r\n\r\nvar xml = parser(\"application/xml\");\r\n\r\nvar html = parser(\"text/html\");\r\n\r\nvar svg = parser(\"image/svg+xml\");\r\n\r\nfunction center$1(x, y) {\r\n  var nodes;\r\n\r\n  if (x == null) x = 0;\r\n  if (y == null) y = 0;\r\n\r\n  function force() {\r\n    var i,\r\n        n = nodes.length,\r\n        node,\r\n        sx = 0,\r\n        sy = 0;\r\n\r\n    for (i = 0; i < n; ++i) {\r\n      node = nodes[i], sx += node.x, sy += node.y;\r\n    }\r\n\r\n    for (sx = sx / n - x, sy = sy / n - y, i = 0; i < n; ++i) {\r\n      node = nodes[i], node.x -= sx, node.y -= sy;\r\n    }\r\n  }\r\n\r\n  force.initialize = function(_) {\r\n    nodes = _;\r\n  };\r\n\r\n  force.x = function(_) {\r\n    return arguments.length ? (x = +_, force) : x;\r\n  };\r\n\r\n  force.y = function(_) {\r\n    return arguments.length ? (y = +_, force) : y;\r\n  };\r\n\r\n  return force;\r\n}\r\n\r\nfunction constant$7(x) {\r\n  return function() {\r\n    return x;\r\n  };\r\n}\r\n\r\nfunction jiggle() {\r\n  return (Math.random() - 0.5) * 1e-6;\r\n}\r\n\r\nfunction tree_add(d) {\r\n  var x = +this._x.call(null, d),\r\n      y = +this._y.call(null, d);\r\n  return add(this.cover(x, y), x, y, d);\r\n}\r\n\r\nfunction add(tree, x, y, d) {\r\n  if (isNaN(x) || isNaN(y)) return tree; // ignore invalid points\r\n\r\n  var parent,\r\n      node = tree._root,\r\n      leaf = {data: d},\r\n      x0 = tree._x0,\r\n      y0 = tree._y0,\r\n      x1 = tree._x1,\r\n      y1 = tree._y1,\r\n      xm,\r\n      ym,\r\n      xp,\r\n      yp,\r\n      right,\r\n      bottom,\r\n      i,\r\n      j;\r\n\r\n  // If the tree is empty, initialize the root as a leaf.\r\n  if (!node) return tree._root = leaf, tree;\r\n\r\n  // Find the existing leaf for the new point, or add it.\r\n  while (node.length) {\r\n    if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;\r\n    if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;\r\n    if (parent = node, !(node = node[i = bottom << 1 | right])) return parent[i] = leaf, tree;\r\n  }\r\n\r\n  // Is the new point is exactly coincident with the existing point?\r\n  xp = +tree._x.call(null, node.data);\r\n  yp = +tree._y.call(null, node.data);\r\n  if (x === xp && y === yp) return leaf.next = node, parent ? parent[i] = leaf : tree._root = leaf, tree;\r\n\r\n  // Otherwise, split the leaf node until the old and new point are separated.\r\n  do {\r\n    parent = parent ? parent[i] = new Array(4) : tree._root = new Array(4);\r\n    if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;\r\n    if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;\r\n  } while ((i = bottom << 1 | right) === (j = (yp >= ym) << 1 | (xp >= xm)));\r\n  return parent[j] = node, parent[i] = leaf, tree;\r\n}\r\n\r\nfunction addAll(data) {\r\n  var d, i, n = data.length,\r\n      x,\r\n      y,\r\n      xz = new Array(n),\r\n      yz = new Array(n),\r\n      x0 = Infinity,\r\n      y0 = Infinity,\r\n      x1 = -Infinity,\r\n      y1 = -Infinity;\r\n\r\n  // Compute the points and their extent.\r\n  for (i = 0; i < n; ++i) {\r\n    if (isNaN(x = +this._x.call(null, d = data[i])) || isNaN(y = +this._y.call(null, d))) continue;\r\n    xz[i] = x;\r\n    yz[i] = y;\r\n    if (x < x0) x0 = x;\r\n    if (x > x1) x1 = x;\r\n    if (y < y0) y0 = y;\r\n    if (y > y1) y1 = y;\r\n  }\r\n\r\n  // If there were no (valid) points, abort.\r\n  if (x0 > x1 || y0 > y1) return this;\r\n\r\n  // Expand the tree to cover the new points.\r\n  this.cover(x0, y0).cover(x1, y1);\r\n\r\n  // Add the new points.\r\n  for (i = 0; i < n; ++i) {\r\n    add(this, xz[i], yz[i], data[i]);\r\n  }\r\n\r\n  return this;\r\n}\r\n\r\nfunction tree_cover(x, y) {\r\n  if (isNaN(x = +x) || isNaN(y = +y)) return this; // ignore invalid points\r\n\r\n  var x0 = this._x0,\r\n      y0 = this._y0,\r\n      x1 = this._x1,\r\n      y1 = this._y1;\r\n\r\n  // If the quadtree has no extent, initialize them.\r\n  // Integer extent are necessary so that if we later double the extent,\r\n  // the existing quadrant boundaries don’t change due to floating point error!\r\n  if (isNaN(x0)) {\r\n    x1 = (x0 = Math.floor(x)) + 1;\r\n    y1 = (y0 = Math.floor(y)) + 1;\r\n  }\r\n\r\n  // Otherwise, double repeatedly to cover.\r\n  else {\r\n    var z = x1 - x0,\r\n        node = this._root,\r\n        parent,\r\n        i;\r\n\r\n    while (x0 > x || x >= x1 || y0 > y || y >= y1) {\r\n      i = (y < y0) << 1 | (x < x0);\r\n      parent = new Array(4), parent[i] = node, node = parent, z *= 2;\r\n      switch (i) {\r\n        case 0: x1 = x0 + z, y1 = y0 + z; break;\r\n        case 1: x0 = x1 - z, y1 = y0 + z; break;\r\n        case 2: x1 = x0 + z, y0 = y1 - z; break;\r\n        case 3: x0 = x1 - z, y0 = y1 - z; break;\r\n      }\r\n    }\r\n\r\n    if (this._root && this._root.length) this._root = node;\r\n  }\r\n\r\n  this._x0 = x0;\r\n  this._y0 = y0;\r\n  this._x1 = x1;\r\n  this._y1 = y1;\r\n  return this;\r\n}\r\n\r\nfunction tree_data() {\r\n  var data = [];\r\n  this.visit(function(node) {\r\n    if (!node.length) do data.push(node.data); while (node = node.next)\r\n  });\r\n  return data;\r\n}\r\n\r\nfunction tree_extent(_) {\r\n  return arguments.length\r\n      ? this.cover(+_[0][0], +_[0][1]).cover(+_[1][0], +_[1][1])\r\n      : isNaN(this._x0) ? undefined : [[this._x0, this._y0], [this._x1, this._y1]];\r\n}\r\n\r\nfunction Quad(node, x0, y0, x1, y1) {\r\n  this.node = node;\r\n  this.x0 = x0;\r\n  this.y0 = y0;\r\n  this.x1 = x1;\r\n  this.y1 = y1;\r\n}\r\n\r\nfunction tree_find(x, y, radius) {\r\n  var data,\r\n      x0 = this._x0,\r\n      y0 = this._y0,\r\n      x1,\r\n      y1,\r\n      x2,\r\n      y2,\r\n      x3 = this._x1,\r\n      y3 = this._y1,\r\n      quads = [],\r\n      node = this._root,\r\n      q,\r\n      i;\r\n\r\n  if (node) quads.push(new Quad(node, x0, y0, x3, y3));\r\n  if (radius == null) radius = Infinity;\r\n  else {\r\n    x0 = x - radius, y0 = y - radius;\r\n    x3 = x + radius, y3 = y + radius;\r\n    radius *= radius;\r\n  }\r\n\r\n  while (q = quads.pop()) {\r\n\r\n    // Stop searching if this quadrant can’t contain a closer node.\r\n    if (!(node = q.node)\r\n        || (x1 = q.x0) > x3\r\n        || (y1 = q.y0) > y3\r\n        || (x2 = q.x1) < x0\r\n        || (y2 = q.y1) < y0) continue;\r\n\r\n    // Bisect the current quadrant.\r\n    if (node.length) {\r\n      var xm = (x1 + x2) / 2,\r\n          ym = (y1 + y2) / 2;\r\n\r\n      quads.push(\r\n        new Quad(node[3], xm, ym, x2, y2),\r\n        new Quad(node[2], x1, ym, xm, y2),\r\n        new Quad(node[1], xm, y1, x2, ym),\r\n        new Quad(node[0], x1, y1, xm, ym)\r\n      );\r\n\r\n      // Visit the closest quadrant first.\r\n      if (i = (y >= ym) << 1 | (x >= xm)) {\r\n        q = quads[quads.length - 1];\r\n        quads[quads.length - 1] = quads[quads.length - 1 - i];\r\n        quads[quads.length - 1 - i] = q;\r\n      }\r\n    }\r\n\r\n    // Visit this point. (Visiting coincident points isn’t necessary!)\r\n    else {\r\n      var dx = x - +this._x.call(null, node.data),\r\n          dy = y - +this._y.call(null, node.data),\r\n          d2 = dx * dx + dy * dy;\r\n      if (d2 < radius) {\r\n        var d = Math.sqrt(radius = d2);\r\n        x0 = x - d, y0 = y - d;\r\n        x3 = x + d, y3 = y + d;\r\n        data = node.data;\r\n      }\r\n    }\r\n  }\r\n\r\n  return data;\r\n}\r\n\r\nfunction tree_remove(d) {\r\n  if (isNaN(x = +this._x.call(null, d)) || isNaN(y = +this._y.call(null, d))) return this; // ignore invalid points\r\n\r\n  var parent,\r\n      node = this._root,\r\n      retainer,\r\n      previous,\r\n      next,\r\n      x0 = this._x0,\r\n      y0 = this._y0,\r\n      x1 = this._x1,\r\n      y1 = this._y1,\r\n      x,\r\n      y,\r\n      xm,\r\n      ym,\r\n      right,\r\n      bottom,\r\n      i,\r\n      j;\r\n\r\n  // If the tree is empty, initialize the root as a leaf.\r\n  if (!node) return this;\r\n\r\n  // Find the leaf node for the point.\r\n  // While descending, also retain the deepest parent with a non-removed sibling.\r\n  if (node.length) while (true) {\r\n    if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;\r\n    if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;\r\n    if (!(parent = node, node = node[i = bottom << 1 | right])) return this;\r\n    if (!node.length) break;\r\n    if (parent[(i + 1) & 3] || parent[(i + 2) & 3] || parent[(i + 3) & 3]) retainer = parent, j = i;\r\n  }\r\n\r\n  // Find the point to remove.\r\n  while (node.data !== d) if (!(previous = node, node = node.next)) return this;\r\n  if (next = node.next) delete node.next;\r\n\r\n  // If there are multiple coincident points, remove just the point.\r\n  if (previous) return (next ? previous.next = next : delete previous.next), this;\r\n\r\n  // If this is the root point, remove it.\r\n  if (!parent) return this._root = next, this;\r\n\r\n  // Remove this leaf.\r\n  next ? parent[i] = next : delete parent[i];\r\n\r\n  // If the parent now contains exactly one leaf, collapse superfluous parents.\r\n  if ((node = parent[0] || parent[1] || parent[2] || parent[3])\r\n      && node === (parent[3] || parent[2] || parent[1] || parent[0])\r\n      && !node.length) {\r\n    if (retainer) retainer[j] = node;\r\n    else this._root = node;\r\n  }\r\n\r\n  return this;\r\n}\r\n\r\nfunction removeAll(data) {\r\n  for (var i = 0, n = data.length; i < n; ++i) this.remove(data[i]);\r\n  return this;\r\n}\r\n\r\nfunction tree_root() {\r\n  return this._root;\r\n}\r\n\r\nfunction tree_size() {\r\n  var size = 0;\r\n  this.visit(function(node) {\r\n    if (!node.length) do ++size; while (node = node.next)\r\n  });\r\n  return size;\r\n}\r\n\r\nfunction tree_visit(callback) {\r\n  var quads = [], q, node = this._root, child, x0, y0, x1, y1;\r\n  if (node) quads.push(new Quad(node, this._x0, this._y0, this._x1, this._y1));\r\n  while (q = quads.pop()) {\r\n    if (!callback(node = q.node, x0 = q.x0, y0 = q.y0, x1 = q.x1, y1 = q.y1) && node.length) {\r\n      var xm = (x0 + x1) / 2, ym = (y0 + y1) / 2;\r\n      if (child = node[3]) quads.push(new Quad(child, xm, ym, x1, y1));\r\n      if (child = node[2]) quads.push(new Quad(child, x0, ym, xm, y1));\r\n      if (child = node[1]) quads.push(new Quad(child, xm, y0, x1, ym));\r\n      if (child = node[0]) quads.push(new Quad(child, x0, y0, xm, ym));\r\n    }\r\n  }\r\n  return this;\r\n}\r\n\r\nfunction tree_visitAfter(callback) {\r\n  var quads = [], next = [], q;\r\n  if (this._root) quads.push(new Quad(this._root, this._x0, this._y0, this._x1, this._y1));\r\n  while (q = quads.pop()) {\r\n    var node = q.node;\r\n    if (node.length) {\r\n      var child, x0 = q.x0, y0 = q.y0, x1 = q.x1, y1 = q.y1, xm = (x0 + x1) / 2, ym = (y0 + y1) / 2;\r\n      if (child = node[0]) quads.push(new Quad(child, x0, y0, xm, ym));\r\n      if (child = node[1]) quads.push(new Quad(child, xm, y0, x1, ym));\r\n      if (child = node[2]) quads.push(new Quad(child, x0, ym, xm, y1));\r\n      if (child = node[3]) quads.push(new Quad(child, xm, ym, x1, y1));\r\n    }\r\n    next.push(q);\r\n  }\r\n  while (q = next.pop()) {\r\n    callback(q.node, q.x0, q.y0, q.x1, q.y1);\r\n  }\r\n  return this;\r\n}\r\n\r\nfunction defaultX$1(d) {\r\n  return d[0];\r\n}\r\n\r\nfunction tree_x(_) {\r\n  return arguments.length ? (this._x = _, this) : this._x;\r\n}\r\n\r\nfunction defaultY$1(d) {\r\n  return d[1];\r\n}\r\n\r\nfunction tree_y(_) {\r\n  return arguments.length ? (this._y = _, this) : this._y;\r\n}\r\n\r\nfunction quadtree(nodes, x, y) {\r\n  var tree = new Quadtree(x == null ? defaultX$1 : x, y == null ? defaultY$1 : y, NaN, NaN, NaN, NaN);\r\n  return nodes == null ? tree : tree.addAll(nodes);\r\n}\r\n\r\nfunction Quadtree(x, y, x0, y0, x1, y1) {\r\n  this._x = x;\r\n  this._y = y;\r\n  this._x0 = x0;\r\n  this._y0 = y0;\r\n  this._x1 = x1;\r\n  this._y1 = y1;\r\n  this._root = undefined;\r\n}\r\n\r\nfunction leaf_copy(leaf) {\r\n  var copy = {data: leaf.data}, next = copy;\r\n  while (leaf = leaf.next) next = next.next = {data: leaf.data};\r\n  return copy;\r\n}\r\n\r\nvar treeProto = quadtree.prototype = Quadtree.prototype;\r\n\r\ntreeProto.copy = function() {\r\n  var copy = new Quadtree(this._x, this._y, this._x0, this._y0, this._x1, this._y1),\r\n      node = this._root,\r\n      nodes,\r\n      child;\r\n\r\n  if (!node) return copy;\r\n\r\n  if (!node.length) return copy._root = leaf_copy(node), copy;\r\n\r\n  nodes = [{source: node, target: copy._root = new Array(4)}];\r\n  while (node = nodes.pop()) {\r\n    for (var i = 0; i < 4; ++i) {\r\n      if (child = node.source[i]) {\r\n        if (child.length) nodes.push({source: child, target: node.target[i] = new Array(4)});\r\n        else node.target[i] = leaf_copy(child);\r\n      }\r\n    }\r\n  }\r\n\r\n  return copy;\r\n};\r\n\r\ntreeProto.add = tree_add;\r\ntreeProto.addAll = addAll;\r\ntreeProto.cover = tree_cover;\r\ntreeProto.data = tree_data;\r\ntreeProto.extent = tree_extent;\r\ntreeProto.find = tree_find;\r\ntreeProto.remove = tree_remove;\r\ntreeProto.removeAll = removeAll;\r\ntreeProto.root = tree_root;\r\ntreeProto.size = tree_size;\r\ntreeProto.visit = tree_visit;\r\ntreeProto.visitAfter = tree_visitAfter;\r\ntreeProto.x = tree_x;\r\ntreeProto.y = tree_y;\r\n\r\nfunction x(d) {\r\n  return d.x + d.vx;\r\n}\r\n\r\nfunction y(d) {\r\n  return d.y + d.vy;\r\n}\r\n\r\nfunction collide(radius) {\r\n  var nodes,\r\n      radii,\r\n      strength = 1,\r\n      iterations = 1;\r\n\r\n  if (typeof radius !== \"function\") radius = constant$7(radius == null ? 1 : +radius);\r\n\r\n  function force() {\r\n    var i, n = nodes.length,\r\n        tree,\r\n        node,\r\n        xi,\r\n        yi,\r\n        ri,\r\n        ri2;\r\n\r\n    for (var k = 0; k < iterations; ++k) {\r\n      tree = quadtree(nodes, x, y).visitAfter(prepare);\r\n      for (i = 0; i < n; ++i) {\r\n        node = nodes[i];\r\n        ri = radii[node.index], ri2 = ri * ri;\r\n        xi = node.x + node.vx;\r\n        yi = node.y + node.vy;\r\n        tree.visit(apply);\r\n      }\r\n    }\r\n\r\n    function apply(quad, x0, y0, x1, y1) {\r\n      var data = quad.data, rj = quad.r, r = ri + rj;\r\n      if (data) {\r\n        if (data.index > node.index) {\r\n          var x = xi - data.x - data.vx,\r\n              y = yi - data.y - data.vy,\r\n              l = x * x + y * y;\r\n          if (l < r * r) {\r\n            if (x === 0) x = jiggle(), l += x * x;\r\n            if (y === 0) y = jiggle(), l += y * y;\r\n            l = (r - (l = Math.sqrt(l))) / l * strength;\r\n            node.vx += (x *= l) * (r = (rj *= rj) / (ri2 + rj));\r\n            node.vy += (y *= l) * r;\r\n            data.vx -= x * (r = 1 - r);\r\n            data.vy -= y * r;\r\n          }\r\n        }\r\n        return;\r\n      }\r\n      return x0 > xi + r || x1 < xi - r || y0 > yi + r || y1 < yi - r;\r\n    }\r\n  }\r\n\r\n  function prepare(quad) {\r\n    if (quad.data) return quad.r = radii[quad.data.index];\r\n    for (var i = quad.r = 0; i < 4; ++i) {\r\n      if (quad[i] && quad[i].r > quad.r) {\r\n        quad.r = quad[i].r;\r\n      }\r\n    }\r\n  }\r\n\r\n  function initialize() {\r\n    if (!nodes) return;\r\n    var i, n = nodes.length, node;\r\n    radii = new Array(n);\r\n    for (i = 0; i < n; ++i) node = nodes[i], radii[node.index] = +radius(node, i, nodes);\r\n  }\r\n\r\n  force.initialize = function(_) {\r\n    nodes = _;\r\n    initialize();\r\n  };\r\n\r\n  force.iterations = function(_) {\r\n    return arguments.length ? (iterations = +_, force) : iterations;\r\n  };\r\n\r\n  force.strength = function(_) {\r\n    return arguments.length ? (strength = +_, force) : strength;\r\n  };\r\n\r\n  force.radius = function(_) {\r\n    return arguments.length ? (radius = typeof _ === \"function\" ? _ : constant$7(+_), initialize(), force) : radius;\r\n  };\r\n\r\n  return force;\r\n}\r\n\r\nfunction index(d) {\r\n  return d.index;\r\n}\r\n\r\nfunction find(nodeById, nodeId) {\r\n  var node = nodeById.get(nodeId);\r\n  if (!node) throw new Error(\"missing: \" + nodeId);\r\n  return node;\r\n}\r\n\r\nfunction link(links) {\r\n  var id = index,\r\n      strength = defaultStrength,\r\n      strengths,\r\n      distance = constant$7(30),\r\n      distances,\r\n      nodes,\r\n      count,\r\n      bias,\r\n      iterations = 1;\r\n\r\n  if (links == null) links = [];\r\n\r\n  function defaultStrength(link) {\r\n    return 1 / Math.min(count[link.source.index], count[link.target.index]);\r\n  }\r\n\r\n  function force(alpha) {\r\n    for (var k = 0, n = links.length; k < iterations; ++k) {\r\n      for (var i = 0, link, source, target, x, y, l, b; i < n; ++i) {\r\n        link = links[i], source = link.source, target = link.target;\r\n        x = target.x + target.vx - source.x - source.vx || jiggle();\r\n        y = target.y + target.vy - source.y - source.vy || jiggle();\r\n        l = Math.sqrt(x * x + y * y);\r\n        l = (l - distances[i]) / l * alpha * strengths[i];\r\n        x *= l, y *= l;\r\n        target.vx -= x * (b = bias[i]);\r\n        target.vy -= y * b;\r\n        source.vx += x * (b = 1 - b);\r\n        source.vy += y * b;\r\n      }\r\n    }\r\n  }\r\n\r\n  function initialize() {\r\n    if (!nodes) return;\r\n\r\n    var i,\r\n        n = nodes.length,\r\n        m = links.length,\r\n        nodeById = map$1(nodes, id),\r\n        link;\r\n\r\n    for (i = 0, count = new Array(n); i < m; ++i) {\r\n      link = links[i], link.index = i;\r\n      if (typeof link.source !== \"object\") link.source = find(nodeById, link.source);\r\n      if (typeof link.target !== \"object\") link.target = find(nodeById, link.target);\r\n      count[link.source.index] = (count[link.source.index] || 0) + 1;\r\n      count[link.target.index] = (count[link.target.index] || 0) + 1;\r\n    }\r\n\r\n    for (i = 0, bias = new Array(m); i < m; ++i) {\r\n      link = links[i], bias[i] = count[link.source.index] / (count[link.source.index] + count[link.target.index]);\r\n    }\r\n\r\n    strengths = new Array(m), initializeStrength();\r\n    distances = new Array(m), initializeDistance();\r\n  }\r\n\r\n  function initializeStrength() {\r\n    if (!nodes) return;\r\n\r\n    for (var i = 0, n = links.length; i < n; ++i) {\r\n      strengths[i] = +strength(links[i], i, links);\r\n    }\r\n  }\r\n\r\n  function initializeDistance() {\r\n    if (!nodes) return;\r\n\r\n    for (var i = 0, n = links.length; i < n; ++i) {\r\n      distances[i] = +distance(links[i], i, links);\r\n    }\r\n  }\r\n\r\n  force.initialize = function(_) {\r\n    nodes = _;\r\n    initialize();\r\n  };\r\n\r\n  force.links = function(_) {\r\n    return arguments.length ? (links = _, initialize(), force) : links;\r\n  };\r\n\r\n  force.id = function(_) {\r\n    return arguments.length ? (id = _, force) : id;\r\n  };\r\n\r\n  force.iterations = function(_) {\r\n    return arguments.length ? (iterations = +_, force) : iterations;\r\n  };\r\n\r\n  force.strength = function(_) {\r\n    return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant$7(+_), initializeStrength(), force) : strength;\r\n  };\r\n\r\n  force.distance = function(_) {\r\n    return arguments.length ? (distance = typeof _ === \"function\" ? _ : constant$7(+_), initializeDistance(), force) : distance;\r\n  };\r\n\r\n  return force;\r\n}\r\n\r\nfunction x$1(d) {\r\n  return d.x;\r\n}\r\n\r\nfunction y$1(d) {\r\n  return d.y;\r\n}\r\n\r\nvar initialRadius = 10,\r\n    initialAngle = Math.PI * (3 - Math.sqrt(5));\r\n\r\nfunction simulation(nodes) {\r\n  var simulation,\r\n      alpha = 1,\r\n      alphaMin = 0.001,\r\n      alphaDecay = 1 - Math.pow(alphaMin, 1 / 300),\r\n      alphaTarget = 0,\r\n      velocityDecay = 0.6,\r\n      forces = map$1(),\r\n      stepper = timer(step),\r\n      event = dispatch(\"tick\", \"end\");\r\n\r\n  if (nodes == null) nodes = [];\r\n\r\n  function step() {\r\n    tick();\r\n    event.call(\"tick\", simulation);\r\n    if (alpha < alphaMin) {\r\n      stepper.stop();\r\n      event.call(\"end\", simulation);\r\n    }\r\n  }\r\n\r\n  function tick(iterations) {\r\n    var i, n = nodes.length, node;\r\n\r\n    if (iterations === undefined) iterations = 1;\r\n\r\n    for (var k = 0; k < iterations; ++k) {\r\n      alpha += (alphaTarget - alpha) * alphaDecay;\r\n\r\n      forces.each(function (force) {\r\n        force(alpha);\r\n      });\r\n\r\n      for (i = 0; i < n; ++i) {\r\n        node = nodes[i];\r\n        if (node.fx == null) node.x += node.vx *= velocityDecay;\r\n        else node.x = node.fx, node.vx = 0;\r\n        if (node.fy == null) node.y += node.vy *= velocityDecay;\r\n        else node.y = node.fy, node.vy = 0;\r\n      }\r\n    }\r\n\r\n    return simulation;\r\n  }\r\n\r\n  function initializeNodes() {\r\n    for (var i = 0, n = nodes.length, node; i < n; ++i) {\r\n      node = nodes[i], node.index = i;\r\n      if (node.fx != null) node.x = node.fx;\r\n      if (node.fy != null) node.y = node.fy;\r\n      if (isNaN(node.x) || isNaN(node.y)) {\r\n        var radius = initialRadius * Math.sqrt(i), angle = i * initialAngle;\r\n        node.x = radius * Math.cos(angle);\r\n        node.y = radius * Math.sin(angle);\r\n      }\r\n      if (isNaN(node.vx) || isNaN(node.vy)) {\r\n        node.vx = node.vy = 0;\r\n      }\r\n    }\r\n  }\r\n\r\n  function initializeForce(force) {\r\n    if (force.initialize) force.initialize(nodes);\r\n    return force;\r\n  }\r\n\r\n  initializeNodes();\r\n\r\n  return simulation = {\r\n    tick: tick,\r\n\r\n    restart: function() {\r\n      return stepper.restart(step), simulation;\r\n    },\r\n\r\n    stop: function() {\r\n      return stepper.stop(), simulation;\r\n    },\r\n\r\n    nodes: function(_) {\r\n      return arguments.length ? (nodes = _, initializeNodes(), forces.each(initializeForce), simulation) : nodes;\r\n    },\r\n\r\n    alpha: function(_) {\r\n      return arguments.length ? (alpha = +_, simulation) : alpha;\r\n    },\r\n\r\n    alphaMin: function(_) {\r\n      return arguments.length ? (alphaMin = +_, simulation) : alphaMin;\r\n    },\r\n\r\n    alphaDecay: function(_) {\r\n      return arguments.length ? (alphaDecay = +_, simulation) : +alphaDecay;\r\n    },\r\n\r\n    alphaTarget: function(_) {\r\n      return arguments.length ? (alphaTarget = +_, simulation) : alphaTarget;\r\n    },\r\n\r\n    velocityDecay: function(_) {\r\n      return arguments.length ? (velocityDecay = 1 - _, simulation) : 1 - velocityDecay;\r\n    },\r\n\r\n    force: function(name, _) {\r\n      return arguments.length > 1 ? ((_ == null ? forces.remove(name) : forces.set(name, initializeForce(_))), simulation) : forces.get(name);\r\n    },\r\n\r\n    find: function(x, y, radius) {\r\n      var i = 0,\r\n          n = nodes.length,\r\n          dx,\r\n          dy,\r\n          d2,\r\n          node,\r\n          closest;\r\n\r\n      if (radius == null) radius = Infinity;\r\n      else radius *= radius;\r\n\r\n      for (i = 0; i < n; ++i) {\r\n        node = nodes[i];\r\n        dx = x - node.x;\r\n        dy = y - node.y;\r\n        d2 = dx * dx + dy * dy;\r\n        if (d2 < radius) closest = node, radius = d2;\r\n      }\r\n\r\n      return closest;\r\n    },\r\n\r\n    on: function(name, _) {\r\n      return arguments.length > 1 ? (event.on(name, _), simulation) : event.on(name);\r\n    }\r\n  };\r\n}\r\n\r\nfunction manyBody() {\r\n  var nodes,\r\n      node,\r\n      alpha,\r\n      strength = constant$7(-30),\r\n      strengths,\r\n      distanceMin2 = 1,\r\n      distanceMax2 = Infinity,\r\n      theta2 = 0.81;\r\n\r\n  function force(_) {\r\n    var i, n = nodes.length, tree = quadtree(nodes, x$1, y$1).visitAfter(accumulate);\r\n    for (alpha = _, i = 0; i < n; ++i) node = nodes[i], tree.visit(apply);\r\n  }\r\n\r\n  function initialize() {\r\n    if (!nodes) return;\r\n    var i, n = nodes.length, node;\r\n    strengths = new Array(n);\r\n    for (i = 0; i < n; ++i) node = nodes[i], strengths[node.index] = +strength(node, i, nodes);\r\n  }\r\n\r\n  function accumulate(quad) {\r\n    var strength = 0, q, c, weight = 0, x, y, i;\r\n\r\n    // For internal nodes, accumulate forces from child quadrants.\r\n    if (quad.length) {\r\n      for (x = y = i = 0; i < 4; ++i) {\r\n        if ((q = quad[i]) && (c = Math.abs(q.value))) {\r\n          strength += q.value, weight += c, x += c * q.x, y += c * q.y;\r\n        }\r\n      }\r\n      quad.x = x / weight;\r\n      quad.y = y / weight;\r\n    }\r\n\r\n    // For leaf nodes, accumulate forces from coincident quadrants.\r\n    else {\r\n      q = quad;\r\n      q.x = q.data.x;\r\n      q.y = q.data.y;\r\n      do strength += strengths[q.data.index];\r\n      while (q = q.next);\r\n    }\r\n\r\n    quad.value = strength;\r\n  }\r\n\r\n  function apply(quad, x1, _, x2) {\r\n    if (!quad.value) return true;\r\n\r\n    var x = quad.x - node.x,\r\n        y = quad.y - node.y,\r\n        w = x2 - x1,\r\n        l = x * x + y * y;\r\n\r\n    // Apply the Barnes-Hut approximation if possible.\r\n    // Limit forces for very close nodes; randomize direction if coincident.\r\n    if (w * w / theta2 < l) {\r\n      if (l < distanceMax2) {\r\n        if (x === 0) x = jiggle(), l += x * x;\r\n        if (y === 0) y = jiggle(), l += y * y;\r\n        if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);\r\n        node.vx += x * quad.value * alpha / l;\r\n        node.vy += y * quad.value * alpha / l;\r\n      }\r\n      return true;\r\n    }\r\n\r\n    // Otherwise, process points directly.\r\n    else if (quad.length || l >= distanceMax2) return;\r\n\r\n    // Limit forces for very close nodes; randomize direction if coincident.\r\n    if (quad.data !== node || quad.next) {\r\n      if (x === 0) x = jiggle(), l += x * x;\r\n      if (y === 0) y = jiggle(), l += y * y;\r\n      if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);\r\n    }\r\n\r\n    do if (quad.data !== node) {\r\n      w = strengths[quad.data.index] * alpha / l;\r\n      node.vx += x * w;\r\n      node.vy += y * w;\r\n    } while (quad = quad.next);\r\n  }\r\n\r\n  force.initialize = function(_) {\r\n    nodes = _;\r\n    initialize();\r\n  };\r\n\r\n  force.strength = function(_) {\r\n    return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant$7(+_), initialize(), force) : strength;\r\n  };\r\n\r\n  force.distanceMin = function(_) {\r\n    return arguments.length ? (distanceMin2 = _ * _, force) : Math.sqrt(distanceMin2);\r\n  };\r\n\r\n  force.distanceMax = function(_) {\r\n    return arguments.length ? (distanceMax2 = _ * _, force) : Math.sqrt(distanceMax2);\r\n  };\r\n\r\n  force.theta = function(_) {\r\n    return arguments.length ? (theta2 = _ * _, force) : Math.sqrt(theta2);\r\n  };\r\n\r\n  return force;\r\n}\r\n\r\nfunction radial(radius, x, y) {\r\n  var nodes,\r\n      strength = constant$7(0.1),\r\n      strengths,\r\n      radiuses;\r\n\r\n  if (typeof radius !== \"function\") radius = constant$7(+radius);\r\n  if (x == null) x = 0;\r\n  if (y == null) y = 0;\r\n\r\n  function force(alpha) {\r\n    for (var i = 0, n = nodes.length; i < n; ++i) {\r\n      var node = nodes[i],\r\n          dx = node.x - x || 1e-6,\r\n          dy = node.y - y || 1e-6,\r\n          r = Math.sqrt(dx * dx + dy * dy),\r\n          k = (radiuses[i] - r) * strengths[i] * alpha / r;\r\n      node.vx += dx * k;\r\n      node.vy += dy * k;\r\n    }\r\n  }\r\n\r\n  function initialize() {\r\n    if (!nodes) return;\r\n    var i, n = nodes.length;\r\n    strengths = new Array(n);\r\n    radiuses = new Array(n);\r\n    for (i = 0; i < n; ++i) {\r\n      radiuses[i] = +radius(nodes[i], i, nodes);\r\n      strengths[i] = isNaN(radiuses[i]) ? 0 : +strength(nodes[i], i, nodes);\r\n    }\r\n  }\r\n\r\n  force.initialize = function(_) {\r\n    nodes = _, initialize();\r\n  };\r\n\r\n  force.strength = function(_) {\r\n    return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant$7(+_), initialize(), force) : strength;\r\n  };\r\n\r\n  force.radius = function(_) {\r\n    return arguments.length ? (radius = typeof _ === \"function\" ? _ : constant$7(+_), initialize(), force) : radius;\r\n  };\r\n\r\n  force.x = function(_) {\r\n    return arguments.length ? (x = +_, force) : x;\r\n  };\r\n\r\n  force.y = function(_) {\r\n    return arguments.length ? (y = +_, force) : y;\r\n  };\r\n\r\n  return force;\r\n}\r\n\r\nfunction x$2(x) {\r\n  var strength = constant$7(0.1),\r\n      nodes,\r\n      strengths,\r\n      xz;\r\n\r\n  if (typeof x !== \"function\") x = constant$7(x == null ? 0 : +x);\r\n\r\n  function force(alpha) {\r\n    for (var i = 0, n = nodes.length, node; i < n; ++i) {\r\n      node = nodes[i], node.vx += (xz[i] - node.x) * strengths[i] * alpha;\r\n    }\r\n  }\r\n\r\n  function initialize() {\r\n    if (!nodes) return;\r\n    var i, n = nodes.length;\r\n    strengths = new Array(n);\r\n    xz = new Array(n);\r\n    for (i = 0; i < n; ++i) {\r\n      strengths[i] = isNaN(xz[i] = +x(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);\r\n    }\r\n  }\r\n\r\n  force.initialize = function(_) {\r\n    nodes = _;\r\n    initialize();\r\n  };\r\n\r\n  force.strength = function(_) {\r\n    return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant$7(+_), initialize(), force) : strength;\r\n  };\r\n\r\n  force.x = function(_) {\r\n    return arguments.length ? (x = typeof _ === \"function\" ? _ : constant$7(+_), initialize(), force) : x;\r\n  };\r\n\r\n  return force;\r\n}\r\n\r\nfunction y$2(y) {\r\n  var strength = constant$7(0.1),\r\n      nodes,\r\n      strengths,\r\n      yz;\r\n\r\n  if (typeof y !== \"function\") y = constant$7(y == null ? 0 : +y);\r\n\r\n  function force(alpha) {\r\n    for (var i = 0, n = nodes.length, node; i < n; ++i) {\r\n      node = nodes[i], node.vy += (yz[i] - node.y) * strengths[i] * alpha;\r\n    }\r\n  }\r\n\r\n  function initialize() {\r\n    if (!nodes) return;\r\n    var i, n = nodes.length;\r\n    strengths = new Array(n);\r\n    yz = new Array(n);\r\n    for (i = 0; i < n; ++i) {\r\n      strengths[i] = isNaN(yz[i] = +y(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);\r\n    }\r\n  }\r\n\r\n  force.initialize = function(_) {\r\n    nodes = _;\r\n    initialize();\r\n  };\r\n\r\n  force.strength = function(_) {\r\n    return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant$7(+_), initialize(), force) : strength;\r\n  };\r\n\r\n  force.y = function(_) {\r\n    return arguments.length ? (y = typeof _ === \"function\" ? _ : constant$7(+_), initialize(), force) : y;\r\n  };\r\n\r\n  return force;\r\n}\r\n\r\n// Computes the decimal coefficient and exponent of the specified number x with\r\n// significant digits p, where x is positive and p is in [1, 21] or undefined.\r\n// For example, formatDecimal(1.23) returns [\"123\", 0].\r\nfunction formatDecimal(x, p) {\r\n  if ((i = (x = p ? x.toExponential(p - 1) : x.toExponential()).indexOf(\"e\")) < 0) return null; // NaN, ±Infinity\r\n  var i, coefficient = x.slice(0, i);\r\n\r\n  // The string returned by toExponential either has the form \\d\\.\\d+e[-+]\\d+\r\n  // (e.g., 1.2e+3) or the form \\de[-+]\\d+ (e.g., 1e+3).\r\n  return [\r\n    coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,\r\n    +x.slice(i + 1)\r\n  ];\r\n}\r\n\r\nfunction exponent$1(x) {\r\n  return x = formatDecimal(Math.abs(x)), x ? x[1] : NaN;\r\n}\r\n\r\nfunction formatGroup(grouping, thousands) {\r\n  return function(value, width) {\r\n    var i = value.length,\r\n        t = [],\r\n        j = 0,\r\n        g = grouping[0],\r\n        length = 0;\r\n\r\n    while (i > 0 && g > 0) {\r\n      if (length + g + 1 > width) g = Math.max(1, width - length);\r\n      t.push(value.substring(i -= g, i + g));\r\n      if ((length += g + 1) > width) break;\r\n      g = grouping[j = (j + 1) % grouping.length];\r\n    }\r\n\r\n    return t.reverse().join(thousands);\r\n  };\r\n}\r\n\r\nfunction formatNumerals(numerals) {\r\n  return function(value) {\r\n    return value.replace(/[0-9]/g, function(i) {\r\n      return numerals[+i];\r\n    });\r\n  };\r\n}\r\n\r\n// [[fill]align][sign][symbol][0][width][,][.precision][~][type]\r\nvar re = /^(?:(.)?([<>=^]))?([+\\-( ])?([$#])?(0)?(\\d+)?(,)?(\\.\\d+)?(~)?([a-z%])?$/i;\r\n\r\nfunction formatSpecifier(specifier) {\r\n  if (!(match = re.exec(specifier))) throw new Error(\"invalid format: \" + specifier);\r\n  var match;\r\n  return new FormatSpecifier({\r\n    fill: match[1],\r\n    align: match[2],\r\n    sign: match[3],\r\n    symbol: match[4],\r\n    zero: match[5],\r\n    width: match[6],\r\n    comma: match[7],\r\n    precision: match[8] && match[8].slice(1),\r\n    trim: match[9],\r\n    type: match[10]\r\n  });\r\n}\r\n\r\nformatSpecifier.prototype = FormatSpecifier.prototype; // instanceof\r\n\r\nfunction FormatSpecifier(specifier) {\r\n  this.fill = specifier.fill === undefined ? \" \" : specifier.fill + \"\";\r\n  this.align = specifier.align === undefined ? \">\" : specifier.align + \"\";\r\n  this.sign = specifier.sign === undefined ? \"-\" : specifier.sign + \"\";\r\n  this.symbol = specifier.symbol === undefined ? \"\" : specifier.symbol + \"\";\r\n  this.zero = !!specifier.zero;\r\n  this.width = specifier.width === undefined ? undefined : +specifier.width;\r\n  this.comma = !!specifier.comma;\r\n  this.precision = specifier.precision === undefined ? undefined : +specifier.precision;\r\n  this.trim = !!specifier.trim;\r\n  this.type = specifier.type === undefined ? \"\" : specifier.type + \"\";\r\n}\r\n\r\nFormatSpecifier.prototype.toString = function() {\r\n  return this.fill\r\n      + this.align\r\n      + this.sign\r\n      + this.symbol\r\n      + (this.zero ? \"0\" : \"\")\r\n      + (this.width === undefined ? \"\" : Math.max(1, this.width | 0))\r\n      + (this.comma ? \",\" : \"\")\r\n      + (this.precision === undefined ? \"\" : \".\" + Math.max(0, this.precision | 0))\r\n      + (this.trim ? \"~\" : \"\")\r\n      + this.type;\r\n};\r\n\r\n// Trims insignificant zeros, e.g., replaces 1.2000k with 1.2k.\r\nfunction formatTrim(s) {\r\n  out: for (var n = s.length, i = 1, i0 = -1, i1; i < n; ++i) {\r\n    switch (s[i]) {\r\n      case \".\": i0 = i1 = i; break;\r\n      case \"0\": if (i0 === 0) i0 = i; i1 = i; break;\r\n      default: if (!+s[i]) break out; if (i0 > 0) i0 = 0; break;\r\n    }\r\n  }\r\n  return i0 > 0 ? s.slice(0, i0) + s.slice(i1 + 1) : s;\r\n}\r\n\r\nvar prefixExponent;\r\n\r\nfunction formatPrefixAuto(x, p) {\r\n  var d = formatDecimal(x, p);\r\n  if (!d) return x + \"\";\r\n  var coefficient = d[0],\r\n      exponent = d[1],\r\n      i = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1,\r\n      n = coefficient.length;\r\n  return i === n ? coefficient\r\n      : i > n ? coefficient + new Array(i - n + 1).join(\"0\")\r\n      : i > 0 ? coefficient.slice(0, i) + \".\" + coefficient.slice(i)\r\n      : \"0.\" + new Array(1 - i).join(\"0\") + formatDecimal(x, Math.max(0, p + i - 1))[0]; // less than 1y!\r\n}\r\n\r\nfunction formatRounded(x, p) {\r\n  var d = formatDecimal(x, p);\r\n  if (!d) return x + \"\";\r\n  var coefficient = d[0],\r\n      exponent = d[1];\r\n  return exponent < 0 ? \"0.\" + new Array(-exponent).join(\"0\") + coefficient\r\n      : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + \".\" + coefficient.slice(exponent + 1)\r\n      : coefficient + new Array(exponent - coefficient.length + 2).join(\"0\");\r\n}\r\n\r\nvar formatTypes = {\r\n  \"%\": function(x, p) { return (x * 100).toFixed(p); },\r\n  \"b\": function(x) { return Math.round(x).toString(2); },\r\n  \"c\": function(x) { return x + \"\"; },\r\n  \"d\": function(x) { return Math.round(x).toString(10); },\r\n  \"e\": function(x, p) { return x.toExponential(p); },\r\n  \"f\": function(x, p) { return x.toFixed(p); },\r\n  \"g\": function(x, p) { return x.toPrecision(p); },\r\n  \"o\": function(x) { return Math.round(x).toString(8); },\r\n  \"p\": function(x, p) { return formatRounded(x * 100, p); },\r\n  \"r\": formatRounded,\r\n  \"s\": formatPrefixAuto,\r\n  \"X\": function(x) { return Math.round(x).toString(16).toUpperCase(); },\r\n  \"x\": function(x) { return Math.round(x).toString(16); }\r\n};\r\n\r\nfunction identity$3(x) {\r\n  return x;\r\n}\r\n\r\nvar map$2 = Array.prototype.map,\r\n    prefixes = [\"y\",\"z\",\"a\",\"f\",\"p\",\"n\",\"\\xB5\",\"m\",\"\",\"k\",\"M\",\"G\",\"T\",\"P\",\"E\",\"Z\",\"Y\"];\r\n\r\nfunction formatLocale(locale) {\r\n  var group = locale.grouping === undefined || locale.thousands === undefined ? identity$3 : formatGroup(map$2.call(locale.grouping, Number), locale.thousands + \"\"),\r\n      currencyPrefix = locale.currency === undefined ? \"\" : locale.currency[0] + \"\",\r\n      currencySuffix = locale.currency === undefined ? \"\" : locale.currency[1] + \"\",\r\n      decimal = locale.decimal === undefined ? \".\" : locale.decimal + \"\",\r\n      numerals = locale.numerals === undefined ? identity$3 : formatNumerals(map$2.call(locale.numerals, String)),\r\n      percent = locale.percent === undefined ? \"%\" : locale.percent + \"\",\r\n      minus = locale.minus === undefined ? \"-\" : locale.minus + \"\",\r\n      nan = locale.nan === undefined ? \"NaN\" : locale.nan + \"\";\r\n\r\n  function newFormat(specifier) {\r\n    specifier = formatSpecifier(specifier);\r\n\r\n    var fill = specifier.fill,\r\n        align = specifier.align,\r\n        sign = specifier.sign,\r\n        symbol = specifier.symbol,\r\n        zero = specifier.zero,\r\n        width = specifier.width,\r\n        comma = specifier.comma,\r\n        precision = specifier.precision,\r\n        trim = specifier.trim,\r\n        type = specifier.type;\r\n\r\n    // The \"n\" type is an alias for \",g\".\r\n    if (type === \"n\") comma = true, type = \"g\";\r\n\r\n    // The \"\" type, and any invalid type, is an alias for \".12~g\".\r\n    else if (!formatTypes[type]) precision === undefined && (precision = 12), trim = true, type = \"g\";\r\n\r\n    // If zero fill is specified, padding goes after sign and before digits.\r\n    if (zero || (fill === \"0\" && align === \"=\")) zero = true, fill = \"0\", align = \"=\";\r\n\r\n    // Compute the prefix and suffix.\r\n    // For SI-prefix, the suffix is lazily computed.\r\n    var prefix = symbol === \"$\" ? currencyPrefix : symbol === \"#\" && /[boxX]/.test(type) ? \"0\" + type.toLowerCase() : \"\",\r\n        suffix = symbol === \"$\" ? currencySuffix : /[%p]/.test(type) ? percent : \"\";\r\n\r\n    // What format function should we use?\r\n    // Is this an integer type?\r\n    // Can this type generate exponential notation?\r\n    var formatType = formatTypes[type],\r\n        maybeSuffix = /[defgprs%]/.test(type);\r\n\r\n    // Set the default precision if not specified,\r\n    // or clamp the specified precision to the supported range.\r\n    // For significant precision, it must be in [1, 21].\r\n    // For fixed precision, it must be in [0, 20].\r\n    precision = precision === undefined ? 6\r\n        : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision))\r\n        : Math.max(0, Math.min(20, precision));\r\n\r\n    function format(value) {\r\n      var valuePrefix = prefix,\r\n          valueSuffix = suffix,\r\n          i, n, c;\r\n\r\n      if (type === \"c\") {\r\n        valueSuffix = formatType(value) + valueSuffix;\r\n        value = \"\";\r\n      } else {\r\n        value = +value;\r\n\r\n        // Perform the initial formatting.\r\n        var valueNegative = value < 0;\r\n        value = isNaN(value) ? nan : formatType(Math.abs(value), precision);\r\n\r\n        // Trim insignificant zeros.\r\n        if (trim) value = formatTrim(value);\r\n\r\n        // If a negative value rounds to zero during formatting, treat as positive.\r\n        if (valueNegative && +value === 0) valueNegative = false;\r\n\r\n        // Compute the prefix and suffix.\r\n        valuePrefix = (valueNegative ? (sign === \"(\" ? sign : minus) : sign === \"-\" || sign === \"(\" ? \"\" : sign) + valuePrefix;\r\n\r\n        valueSuffix = (type === \"s\" ? prefixes[8 + prefixExponent / 3] : \"\") + valueSuffix + (valueNegative && sign === \"(\" ? \")\" : \"\");\r\n\r\n        // Break the formatted value into the integer “value” part that can be\r\n        // grouped, and fractional or exponential “suffix” part that is not.\r\n        if (maybeSuffix) {\r\n          i = -1, n = value.length;\r\n          while (++i < n) {\r\n            if (c = value.charCodeAt(i), 48 > c || c > 57) {\r\n              valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;\r\n              value = value.slice(0, i);\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      // If the fill character is not \"0\", grouping is applied before padding.\r\n      if (comma && !zero) value = group(value, Infinity);\r\n\r\n      // Compute the padding.\r\n      var length = valuePrefix.length + value.length + valueSuffix.length,\r\n          padding = length < width ? new Array(width - length + 1).join(fill) : \"\";\r\n\r\n      // If the fill character is \"0\", grouping is applied after padding.\r\n      if (comma && zero) value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = \"\";\r\n\r\n      // Reconstruct the final output based on the desired alignment.\r\n      switch (align) {\r\n        case \"<\": value = valuePrefix + value + valueSuffix + padding; break;\r\n        case \"=\": value = valuePrefix + padding + value + valueSuffix; break;\r\n        case \"^\": value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length); break;\r\n        default: value = padding + valuePrefix + value + valueSuffix; break;\r\n      }\r\n\r\n      return numerals(value);\r\n    }\r\n\r\n    format.toString = function() {\r\n      return specifier + \"\";\r\n    };\r\n\r\n    return format;\r\n  }\r\n\r\n  function formatPrefix(specifier, value) {\r\n    var f = newFormat((specifier = formatSpecifier(specifier), specifier.type = \"f\", specifier)),\r\n        e = Math.max(-8, Math.min(8, Math.floor(exponent$1(value) / 3))) * 3,\r\n        k = Math.pow(10, -e),\r\n        prefix = prefixes[8 + e / 3];\r\n    return function(value) {\r\n      return f(k * value) + prefix;\r\n    };\r\n  }\r\n\r\n  return {\r\n    format: newFormat,\r\n    formatPrefix: formatPrefix\r\n  };\r\n}\r\n\r\nvar locale;\r\n\r\ndefaultLocale({\r\n  decimal: \".\",\r\n  thousands: \",\",\r\n  grouping: [3],\r\n  currency: [\"$\", \"\"],\r\n  minus: \"-\"\r\n});\r\n\r\nfunction defaultLocale(definition) {\r\n  locale = formatLocale(definition);\r\n  exports.format = locale.format;\r\n  exports.formatPrefix = locale.formatPrefix;\r\n  return locale;\r\n}\r\n\r\nfunction precisionFixed(step) {\r\n  return Math.max(0, -exponent$1(Math.abs(step)));\r\n}\r\n\r\nfunction precisionPrefix(step, value) {\r\n  return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent$1(value) / 3))) * 3 - exponent$1(Math.abs(step)));\r\n}\r\n\r\nfunction precisionRound(step, max) {\r\n  step = Math.abs(step), max = Math.abs(max) - step;\r\n  return Math.max(0, exponent$1(max) - exponent$1(step)) + 1;\r\n}\r\n\r\n// Adds floating point numbers with twice the normal precision.\r\n// Reference: J. R. Shewchuk, Adaptive Precision Floating-Point Arithmetic and\r\n// Fast Robust Geometric Predicates, Discrete & Computational Geometry 18(3)\r\n// 305–363 (1997).\r\n// Code adapted from GeographicLib by Charles F. F. Karney,\r\n// http://geographiclib.sourceforge.net/\r\n\r\nfunction adder() {\r\n  return new Adder;\r\n}\r\n\r\nfunction Adder() {\r\n  this.reset();\r\n}\r\n\r\nAdder.prototype = {\r\n  constructor: Adder,\r\n  reset: function() {\r\n    this.s = // rounded value\r\n    this.t = 0; // exact error\r\n  },\r\n  add: function(y) {\r\n    add$1(temp, y, this.t);\r\n    add$1(this, temp.s, this.s);\r\n    if (this.s) this.t += temp.t;\r\n    else this.s = temp.t;\r\n  },\r\n  valueOf: function() {\r\n    return this.s;\r\n  }\r\n};\r\n\r\nvar temp = new Adder;\r\n\r\nfunction add$1(adder, a, b) {\r\n  var x = adder.s = a + b,\r\n      bv = x - a,\r\n      av = x - bv;\r\n  adder.t = (a - av) + (b - bv);\r\n}\r\n\r\nvar epsilon$2 = 1e-6;\r\nvar epsilon2$1 = 1e-12;\r\nvar pi$3 = Math.PI;\r\nvar halfPi$2 = pi$3 / 2;\r\nvar quarterPi = pi$3 / 4;\r\nvar tau$3 = pi$3 * 2;\r\n\r\nvar degrees$1 = 180 / pi$3;\r\nvar radians = pi$3 / 180;\r\n\r\nvar abs = Math.abs;\r\nvar atan = Math.atan;\r\nvar atan2 = Math.atan2;\r\nvar cos$1 = Math.cos;\r\nvar ceil = Math.ceil;\r\nvar exp = Math.exp;\r\nvar log = Math.log;\r\nvar pow = Math.pow;\r\nvar sin$1 = Math.sin;\r\nvar sign = Math.sign || function(x) { return x > 0 ? 1 : x < 0 ? -1 : 0; };\r\nvar sqrt = Math.sqrt;\r\nvar tan = Math.tan;\r\n\r\nfunction acos(x) {\r\n  return x > 1 ? 0 : x < -1 ? pi$3 : Math.acos(x);\r\n}\r\n\r\nfunction asin(x) {\r\n  return x > 1 ? halfPi$2 : x < -1 ? -halfPi$2 : Math.asin(x);\r\n}\r\n\r\nfunction haversin(x) {\r\n  return (x = sin$1(x / 2)) * x;\r\n}\r\n\r\nfunction noop$2() {}\r\n\r\nfunction streamGeometry(geometry, stream) {\r\n  if (geometry && streamGeometryType.hasOwnProperty(geometry.type)) {\r\n    streamGeometryType[geometry.type](geometry, stream);\r\n  }\r\n}\r\n\r\nvar streamObjectType = {\r\n  Feature: function(object, stream) {\r\n    streamGeometry(object.geometry, stream);\r\n  },\r\n  FeatureCollection: function(object, stream) {\r\n    var features = object.features, i = -1, n = features.length;\r\n    while (++i < n) streamGeometry(features[i].geometry, stream);\r\n  }\r\n};\r\n\r\nvar streamGeometryType = {\r\n  Sphere: function(object, stream) {\r\n    stream.sphere();\r\n  },\r\n  Point: function(object, stream) {\r\n    object = object.coordinates;\r\n    stream.point(object[0], object[1], object[2]);\r\n  },\r\n  MultiPoint: function(object, stream) {\r\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\r\n    while (++i < n) object = coordinates[i], stream.point(object[0], object[1], object[2]);\r\n  },\r\n  LineString: function(object, stream) {\r\n    streamLine(object.coordinates, stream, 0);\r\n  },\r\n  MultiLineString: function(object, stream) {\r\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\r\n    while (++i < n) streamLine(coordinates[i], stream, 0);\r\n  },\r\n  Polygon: function(object, stream) {\r\n    streamPolygon(object.coordinates, stream);\r\n  },\r\n  MultiPolygon: function(object, stream) {\r\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\r\n    while (++i < n) streamPolygon(coordinates[i], stream);\r\n  },\r\n  GeometryCollection: function(object, stream) {\r\n    var geometries = object.geometries, i = -1, n = geometries.length;\r\n    while (++i < n) streamGeometry(geometries[i], stream);\r\n  }\r\n};\r\n\r\nfunction streamLine(coordinates, stream, closed) {\r\n  var i = -1, n = coordinates.length - closed, coordinate;\r\n  stream.lineStart();\r\n  while (++i < n) coordinate = coordinates[i], stream.point(coordinate[0], coordinate[1], coordinate[2]);\r\n  stream.lineEnd();\r\n}\r\n\r\nfunction streamPolygon(coordinates, stream) {\r\n  var i = -1, n = coordinates.length;\r\n  stream.polygonStart();\r\n  while (++i < n) streamLine(coordinates[i], stream, 1);\r\n  stream.polygonEnd();\r\n}\r\n\r\nfunction geoStream(object, stream) {\r\n  if (object && streamObjectType.hasOwnProperty(object.type)) {\r\n    streamObjectType[object.type](object, stream);\r\n  } else {\r\n    streamGeometry(object, stream);\r\n  }\r\n}\r\n\r\nvar areaRingSum = adder();\r\n\r\nvar areaSum = adder(),\r\n    lambda00,\r\n    phi00,\r\n    lambda0,\r\n    cosPhi0,\r\n    sinPhi0;\r\n\r\nvar areaStream = {\r\n  point: noop$2,\r\n  lineStart: noop$2,\r\n  lineEnd: noop$2,\r\n  polygonStart: function() {\r\n    areaRingSum.reset();\r\n    areaStream.lineStart = areaRingStart;\r\n    areaStream.lineEnd = areaRingEnd;\r\n  },\r\n  polygonEnd: function() {\r\n    var areaRing = +areaRingSum;\r\n    areaSum.add(areaRing < 0 ? tau$3 + areaRing : areaRing);\r\n    this.lineStart = this.lineEnd = this.point = noop$2;\r\n  },\r\n  sphere: function() {\r\n    areaSum.add(tau$3);\r\n  }\r\n};\r\n\r\nfunction areaRingStart() {\r\n  areaStream.point = areaPointFirst;\r\n}\r\n\r\nfunction areaRingEnd() {\r\n  areaPoint(lambda00, phi00);\r\n}\r\n\r\nfunction areaPointFirst(lambda, phi) {\r\n  areaStream.point = areaPoint;\r\n  lambda00 = lambda, phi00 = phi;\r\n  lambda *= radians, phi *= radians;\r\n  lambda0 = lambda, cosPhi0 = cos$1(phi = phi / 2 + quarterPi), sinPhi0 = sin$1(phi);\r\n}\r\n\r\nfunction areaPoint(lambda, phi) {\r\n  lambda *= radians, phi *= radians;\r\n  phi = phi / 2 + quarterPi; // half the angular distance from south pole\r\n\r\n  // Spherical excess E for a spherical triangle with vertices: south pole,\r\n  // previous point, current point.  Uses a formula derived from Cagnoli’s\r\n  // theorem.  See Todhunter, Spherical Trig. (1871), Sec. 103, Eq. (2).\r\n  var dLambda = lambda - lambda0,\r\n      sdLambda = dLambda >= 0 ? 1 : -1,\r\n      adLambda = sdLambda * dLambda,\r\n      cosPhi = cos$1(phi),\r\n      sinPhi = sin$1(phi),\r\n      k = sinPhi0 * sinPhi,\r\n      u = cosPhi0 * cosPhi + k * cos$1(adLambda),\r\n      v = k * sdLambda * sin$1(adLambda);\r\n  areaRingSum.add(atan2(v, u));\r\n\r\n  // Advance the previous points.\r\n  lambda0 = lambda, cosPhi0 = cosPhi, sinPhi0 = sinPhi;\r\n}\r\n\r\nfunction area$1(object) {\r\n  areaSum.reset();\r\n  geoStream(object, areaStream);\r\n  return areaSum * 2;\r\n}\r\n\r\nfunction spherical(cartesian) {\r\n  return [atan2(cartesian[1], cartesian[0]), asin(cartesian[2])];\r\n}\r\n\r\nfunction cartesian(spherical) {\r\n  var lambda = spherical[0], phi = spherical[1], cosPhi = cos$1(phi);\r\n  return [cosPhi * cos$1(lambda), cosPhi * sin$1(lambda), sin$1(phi)];\r\n}\r\n\r\nfunction cartesianDot(a, b) {\r\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\r\n}\r\n\r\nfunction cartesianCross(a, b) {\r\n  return [a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0]];\r\n}\r\n\r\n// TODO return a\r\nfunction cartesianAddInPlace(a, b) {\r\n  a[0] += b[0], a[1] += b[1], a[2] += b[2];\r\n}\r\n\r\nfunction cartesianScale(vector, k) {\r\n  return [vector[0] * k, vector[1] * k, vector[2] * k];\r\n}\r\n\r\n// TODO return d\r\nfunction cartesianNormalizeInPlace(d) {\r\n  var l = sqrt(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);\r\n  d[0] /= l, d[1] /= l, d[2] /= l;\r\n}\r\n\r\nvar lambda0$1, phi0, lambda1, phi1, // bounds\r\n    lambda2, // previous lambda-coordinate\r\n    lambda00$1, phi00$1, // first point\r\n    p0, // previous 3D point\r\n    deltaSum = adder(),\r\n    ranges,\r\n    range;\r\n\r\nvar boundsStream = {\r\n  point: boundsPoint,\r\n  lineStart: boundsLineStart,\r\n  lineEnd: boundsLineEnd,\r\n  polygonStart: function() {\r\n    boundsStream.point = boundsRingPoint;\r\n    boundsStream.lineStart = boundsRingStart;\r\n    boundsStream.lineEnd = boundsRingEnd;\r\n    deltaSum.reset();\r\n    areaStream.polygonStart();\r\n  },\r\n  polygonEnd: function() {\r\n    areaStream.polygonEnd();\r\n    boundsStream.point = boundsPoint;\r\n    boundsStream.lineStart = boundsLineStart;\r\n    boundsStream.lineEnd = boundsLineEnd;\r\n    if (areaRingSum < 0) lambda0$1 = -(lambda1 = 180), phi0 = -(phi1 = 90);\r\n    else if (deltaSum > epsilon$2) phi1 = 90;\r\n    else if (deltaSum < -epsilon$2) phi0 = -90;\r\n    range[0] = lambda0$1, range[1] = lambda1;\r\n  },\r\n  sphere: function() {\r\n    lambda0$1 = -(lambda1 = 180), phi0 = -(phi1 = 90);\r\n  }\r\n};\r\n\r\nfunction boundsPoint(lambda, phi) {\r\n  ranges.push(range = [lambda0$1 = lambda, lambda1 = lambda]);\r\n  if (phi < phi0) phi0 = phi;\r\n  if (phi > phi1) phi1 = phi;\r\n}\r\n\r\nfunction linePoint(lambda, phi) {\r\n  var p = cartesian([lambda * radians, phi * radians]);\r\n  if (p0) {\r\n    var normal = cartesianCross(p0, p),\r\n        equatorial = [normal[1], -normal[0], 0],\r\n        inflection = cartesianCross(equatorial, normal);\r\n    cartesianNormalizeInPlace(inflection);\r\n    inflection = spherical(inflection);\r\n    var delta = lambda - lambda2,\r\n        sign = delta > 0 ? 1 : -1,\r\n        lambdai = inflection[0] * degrees$1 * sign,\r\n        phii,\r\n        antimeridian = abs(delta) > 180;\r\n    if (antimeridian ^ (sign * lambda2 < lambdai && lambdai < sign * lambda)) {\r\n      phii = inflection[1] * degrees$1;\r\n      if (phii > phi1) phi1 = phii;\r\n    } else if (lambdai = (lambdai + 360) % 360 - 180, antimeridian ^ (sign * lambda2 < lambdai && lambdai < sign * lambda)) {\r\n      phii = -inflection[1] * degrees$1;\r\n      if (phii < phi0) phi0 = phii;\r\n    } else {\r\n      if (phi < phi0) phi0 = phi;\r\n      if (phi > phi1) phi1 = phi;\r\n    }\r\n    if (antimeridian) {\r\n      if (lambda < lambda2) {\r\n        if (angle(lambda0$1, lambda) > angle(lambda0$1, lambda1)) lambda1 = lambda;\r\n      } else {\r\n        if (angle(lambda, lambda1) > angle(lambda0$1, lambda1)) lambda0$1 = lambda;\r\n      }\r\n    } else {\r\n      if (lambda1 >= lambda0$1) {\r\n        if (lambda < lambda0$1) lambda0$1 = lambda;\r\n        if (lambda > lambda1) lambda1 = lambda;\r\n      } else {\r\n        if (lambda > lambda2) {\r\n          if (angle(lambda0$1, lambda) > angle(lambda0$1, lambda1)) lambda1 = lambda;\r\n        } else {\r\n          if (angle(lambda, lambda1) > angle(lambda0$1, lambda1)) lambda0$1 = lambda;\r\n        }\r\n      }\r\n    }\r\n  } else {\r\n    ranges.push(range = [lambda0$1 = lambda, lambda1 = lambda]);\r\n  }\r\n  if (phi < phi0) phi0 = phi;\r\n  if (phi > phi1) phi1 = phi;\r\n  p0 = p, lambda2 = lambda;\r\n}\r\n\r\nfunction boundsLineStart() {\r\n  boundsStream.point = linePoint;\r\n}\r\n\r\nfunction boundsLineEnd() {\r\n  range[0] = lambda0$1, range[1] = lambda1;\r\n  boundsStream.point = boundsPoint;\r\n  p0 = null;\r\n}\r\n\r\nfunction boundsRingPoint(lambda, phi) {\r\n  if (p0) {\r\n    var delta = lambda - lambda2;\r\n    deltaSum.add(abs(delta) > 180 ? delta + (delta > 0 ? 360 : -360) : delta);\r\n  } else {\r\n    lambda00$1 = lambda, phi00$1 = phi;\r\n  }\r\n  areaStream.point(lambda, phi);\r\n  linePoint(lambda, phi);\r\n}\r\n\r\nfunction boundsRingStart() {\r\n  areaStream.lineStart();\r\n}\r\n\r\nfunction boundsRingEnd() {\r\n  boundsRingPoint(lambda00$1, phi00$1);\r\n  areaStream.lineEnd();\r\n  if (abs(deltaSum) > epsilon$2) lambda0$1 = -(lambda1 = 180);\r\n  range[0] = lambda0$1, range[1] = lambda1;\r\n  p0 = null;\r\n}\r\n\r\n// Finds the left-right distance between two longitudes.\r\n// This is almost the same as (lambda1 - lambda0 + 360°) % 360°, except that we want\r\n// the distance between ±180° to be 360°.\r\nfunction angle(lambda0, lambda1) {\r\n  return (lambda1 -= lambda0) < 0 ? lambda1 + 360 : lambda1;\r\n}\r\n\r\nfunction rangeCompare(a, b) {\r\n  return a[0] - b[0];\r\n}\r\n\r\nfunction rangeContains(range, x) {\r\n  return range[0] <= range[1] ? range[0] <= x && x <= range[1] : x < range[0] || range[1] < x;\r\n}\r\n\r\nfunction bounds(feature) {\r\n  var i, n, a, b, merged, deltaMax, delta;\r\n\r\n  phi1 = lambda1 = -(lambda0$1 = phi0 = Infinity);\r\n  ranges = [];\r\n  geoStream(feature, boundsStream);\r\n\r\n  // First, sort ranges by their minimum longitudes.\r\n  if (n = ranges.length) {\r\n    ranges.sort(rangeCompare);\r\n\r\n    // Then, merge any ranges that overlap.\r\n    for (i = 1, a = ranges[0], merged = [a]; i < n; ++i) {\r\n      b = ranges[i];\r\n      if (rangeContains(a, b[0]) || rangeContains(a, b[1])) {\r\n        if (angle(a[0], b[1]) > angle(a[0], a[1])) a[1] = b[1];\r\n        if (angle(b[0], a[1]) > angle(a[0], a[1])) a[0] = b[0];\r\n      } else {\r\n        merged.push(a = b);\r\n      }\r\n    }\r\n\r\n    // Finally, find the largest gap between the merged ranges.\r\n    // The final bounding box will be the inverse of this gap.\r\n    for (deltaMax = -Infinity, n = merged.length - 1, i = 0, a = merged[n]; i <= n; a = b, ++i) {\r\n      b = merged[i];\r\n      if ((delta = angle(a[1], b[0])) > deltaMax) deltaMax = delta, lambda0$1 = b[0], lambda1 = a[1];\r\n    }\r\n  }\r\n\r\n  ranges = range = null;\r\n\r\n  return lambda0$1 === Infinity || phi0 === Infinity\r\n      ? [[NaN, NaN], [NaN, NaN]]\r\n      : [[lambda0$1, phi0], [lambda1, phi1]];\r\n}\r\n\r\nvar W0, W1,\r\n    X0, Y0, Z0,\r\n    X1, Y1, Z1,\r\n    X2, Y2, Z2,\r\n    lambda00$2, phi00$2, // first point\r\n    x0, y0, z0; // previous point\r\n\r\nvar centroidStream = {\r\n  sphere: noop$2,\r\n  point: centroidPoint,\r\n  lineStart: centroidLineStart,\r\n  lineEnd: centroidLineEnd,\r\n  polygonStart: function() {\r\n    centroidStream.lineStart = centroidRingStart;\r\n    centroidStream.lineEnd = centroidRingEnd;\r\n  },\r\n  polygonEnd: function() {\r\n    centroidStream.lineStart = centroidLineStart;\r\n    centroidStream.lineEnd = centroidLineEnd;\r\n  }\r\n};\r\n\r\n// Arithmetic mean of Cartesian vectors.\r\nfunction centroidPoint(lambda, phi) {\r\n  lambda *= radians, phi *= radians;\r\n  var cosPhi = cos$1(phi);\r\n  centroidPointCartesian(cosPhi * cos$1(lambda), cosPhi * sin$1(lambda), sin$1(phi));\r\n}\r\n\r\nfunction centroidPointCartesian(x, y, z) {\r\n  ++W0;\r\n  X0 += (x - X0) / W0;\r\n  Y0 += (y - Y0) / W0;\r\n  Z0 += (z - Z0) / W0;\r\n}\r\n\r\nfunction centroidLineStart() {\r\n  centroidStream.point = centroidLinePointFirst;\r\n}\r\n\r\nfunction centroidLinePointFirst(lambda, phi) {\r\n  lambda *= radians, phi *= radians;\r\n  var cosPhi = cos$1(phi);\r\n  x0 = cosPhi * cos$1(lambda);\r\n  y0 = cosPhi * sin$1(lambda);\r\n  z0 = sin$1(phi);\r\n  centroidStream.point = centroidLinePoint;\r\n  centroidPointCartesian(x0, y0, z0);\r\n}\r\n\r\nfunction centroidLinePoint(lambda, phi) {\r\n  lambda *= radians, phi *= radians;\r\n  var cosPhi = cos$1(phi),\r\n      x = cosPhi * cos$1(lambda),\r\n      y = cosPhi * sin$1(lambda),\r\n      z = sin$1(phi),\r\n      w = atan2(sqrt((w = y0 * z - z0 * y) * w + (w = z0 * x - x0 * z) * w + (w = x0 * y - y0 * x) * w), x0 * x + y0 * y + z0 * z);\r\n  W1 += w;\r\n  X1 += w * (x0 + (x0 = x));\r\n  Y1 += w * (y0 + (y0 = y));\r\n  Z1 += w * (z0 + (z0 = z));\r\n  centroidPointCartesian(x0, y0, z0);\r\n}\r\n\r\nfunction centroidLineEnd() {\r\n  centroidStream.point = centroidPoint;\r\n}\r\n\r\n// See J. E. Brock, The Inertia Tensor for a Spherical Triangle,\r\n// J. Applied Mechanics 42, 239 (1975).\r\nfunction centroidRingStart() {\r\n  centroidStream.point = centroidRingPointFirst;\r\n}\r\n\r\nfunction centroidRingEnd() {\r\n  centroidRingPoint(lambda00$2, phi00$2);\r\n  centroidStream.point = centroidPoint;\r\n}\r\n\r\nfunction centroidRingPointFirst(lambda, phi) {\r\n  lambda00$2 = lambda, phi00$2 = phi;\r\n  lambda *= radians, phi *= radians;\r\n  centroidStream.point = centroidRingPoint;\r\n  var cosPhi = cos$1(phi);\r\n  x0 = cosPhi * cos$1(lambda);\r\n  y0 = cosPhi * sin$1(lambda);\r\n  z0 = sin$1(phi);\r\n  centroidPointCartesian(x0, y0, z0);\r\n}\r\n\r\nfunction centroidRingPoint(lambda, phi) {\r\n  lambda *= radians, phi *= radians;\r\n  var cosPhi = cos$1(phi),\r\n      x = cosPhi * cos$1(lambda),\r\n      y = cosPhi * sin$1(lambda),\r\n      z = sin$1(phi),\r\n      cx = y0 * z - z0 * y,\r\n      cy = z0 * x - x0 * z,\r\n      cz = x0 * y - y0 * x,\r\n      m = sqrt(cx * cx + cy * cy + cz * cz),\r\n      w = asin(m), // line weight = angle\r\n      v = m && -w / m; // area weight multiplier\r\n  X2 += v * cx;\r\n  Y2 += v * cy;\r\n  Z2 += v * cz;\r\n  W1 += w;\r\n  X1 += w * (x0 + (x0 = x));\r\n  Y1 += w * (y0 + (y0 = y));\r\n  Z1 += w * (z0 + (z0 = z));\r\n  centroidPointCartesian(x0, y0, z0);\r\n}\r\n\r\nfunction centroid(object) {\r\n  W0 = W1 =\r\n  X0 = Y0 = Z0 =\r\n  X1 = Y1 = Z1 =\r\n  X2 = Y2 = Z2 = 0;\r\n  geoStream(object, centroidStream);\r\n\r\n  var x = X2,\r\n      y = Y2,\r\n      z = Z2,\r\n      m = x * x + y * y + z * z;\r\n\r\n  // If the area-weighted ccentroid is undefined, fall back to length-weighted ccentroid.\r\n  if (m < epsilon2$1) {\r\n    x = X1, y = Y1, z = Z1;\r\n    // If the feature has zero length, fall back to arithmetic mean of point vectors.\r\n    if (W1 < epsilon$2) x = X0, y = Y0, z = Z0;\r\n    m = x * x + y * y + z * z;\r\n    // If the feature still has an undefined ccentroid, then return.\r\n    if (m < epsilon2$1) return [NaN, NaN];\r\n  }\r\n\r\n  return [atan2(y, x) * degrees$1, asin(z / sqrt(m)) * degrees$1];\r\n}\r\n\r\nfunction constant$8(x) {\r\n  return function() {\r\n    return x;\r\n  };\r\n}\r\n\r\nfunction compose(a, b) {\r\n\r\n  function compose(x, y) {\r\n    return x = a(x, y), b(x[0], x[1]);\r\n  }\r\n\r\n  if (a.invert && b.invert) compose.invert = function(x, y) {\r\n    return x = b.invert(x, y), x && a.invert(x[0], x[1]);\r\n  };\r\n\r\n  return compose;\r\n}\r\n\r\nfunction rotationIdentity(lambda, phi) {\r\n  return [abs(lambda) > pi$3 ? lambda + Math.round(-lambda / tau$3) * tau$3 : lambda, phi];\r\n}\r\n\r\nrotationIdentity.invert = rotationIdentity;\r\n\r\nfunction rotateRadians(deltaLambda, deltaPhi, deltaGamma) {\r\n  return (deltaLambda %= tau$3) ? (deltaPhi || deltaGamma ? compose(rotationLambda(deltaLambda), rotationPhiGamma(deltaPhi, deltaGamma))\r\n    : rotationLambda(deltaLambda))\r\n    : (deltaPhi || deltaGamma ? rotationPhiGamma(deltaPhi, deltaGamma)\r\n    : rotationIdentity);\r\n}\r\n\r\nfunction forwardRotationLambda(deltaLambda) {\r\n  return function(lambda, phi) {\r\n    return lambda += deltaLambda, [lambda > pi$3 ? lambda - tau$3 : lambda < -pi$3 ? lambda + tau$3 : lambda, phi];\r\n  };\r\n}\r\n\r\nfunction rotationLambda(deltaLambda) {\r\n  var rotation = forwardRotationLambda(deltaLambda);\r\n  rotation.invert = forwardRotationLambda(-deltaLambda);\r\n  return rotation;\r\n}\r\n\r\nfunction rotationPhiGamma(deltaPhi, deltaGamma) {\r\n  var cosDeltaPhi = cos$1(deltaPhi),\r\n      sinDeltaPhi = sin$1(deltaPhi),\r\n      cosDeltaGamma = cos$1(deltaGamma),\r\n      sinDeltaGamma = sin$1(deltaGamma);\r\n\r\n  function rotation(lambda, phi) {\r\n    var cosPhi = cos$1(phi),\r\n        x = cos$1(lambda) * cosPhi,\r\n        y = sin$1(lambda) * cosPhi,\r\n        z = sin$1(phi),\r\n        k = z * cosDeltaPhi + x * sinDeltaPhi;\r\n    return [\r\n      atan2(y * cosDeltaGamma - k * sinDeltaGamma, x * cosDeltaPhi - z * sinDeltaPhi),\r\n      asin(k * cosDeltaGamma + y * sinDeltaGamma)\r\n    ];\r\n  }\r\n\r\n  rotation.invert = function(lambda, phi) {\r\n    var cosPhi = cos$1(phi),\r\n        x = cos$1(lambda) * cosPhi,\r\n        y = sin$1(lambda) * cosPhi,\r\n        z = sin$1(phi),\r\n        k = z * cosDeltaGamma - y * sinDeltaGamma;\r\n    return [\r\n      atan2(y * cosDeltaGamma + z * sinDeltaGamma, x * cosDeltaPhi + k * sinDeltaPhi),\r\n      asin(k * cosDeltaPhi - x * sinDeltaPhi)\r\n    ];\r\n  };\r\n\r\n  return rotation;\r\n}\r\n\r\nfunction rotation(rotate) {\r\n  rotate = rotateRadians(rotate[0] * radians, rotate[1] * radians, rotate.length > 2 ? rotate[2] * radians : 0);\r\n\r\n  function forward(coordinates) {\r\n    coordinates = rotate(coordinates[0] * radians, coordinates[1] * radians);\r\n    return coordinates[0] *= degrees$1, coordinates[1] *= degrees$1, coordinates;\r\n  }\r\n\r\n  forward.invert = function(coordinates) {\r\n    coordinates = rotate.invert(coordinates[0] * radians, coordinates[1] * radians);\r\n    return coordinates[0] *= degrees$1, coordinates[1] *= degrees$1, coordinates;\r\n  };\r\n\r\n  return forward;\r\n}\r\n\r\n// Generates a circle centered at [0°, 0°], with a given radius and precision.\r\nfunction circleStream(stream, radius, delta, direction, t0, t1) {\r\n  if (!delta) return;\r\n  var cosRadius = cos$1(radius),\r\n      sinRadius = sin$1(radius),\r\n      step = direction * delta;\r\n  if (t0 == null) {\r\n    t0 = radius + direction * tau$3;\r\n    t1 = radius - step / 2;\r\n  } else {\r\n    t0 = circleRadius(cosRadius, t0);\r\n    t1 = circleRadius(cosRadius, t1);\r\n    if (direction > 0 ? t0 < t1 : t0 > t1) t0 += direction * tau$3;\r\n  }\r\n  for (var point, t = t0; direction > 0 ? t > t1 : t < t1; t -= step) {\r\n    point = spherical([cosRadius, -sinRadius * cos$1(t), -sinRadius * sin$1(t)]);\r\n    stream.point(point[0], point[1]);\r\n  }\r\n}\r\n\r\n// Returns the signed angle of a cartesian point relative to [cosRadius, 0, 0].\r\nfunction circleRadius(cosRadius, point) {\r\n  point = cartesian(point), point[0] -= cosRadius;\r\n  cartesianNormalizeInPlace(point);\r\n  var radius = acos(-point[1]);\r\n  return ((-point[2] < 0 ? -radius : radius) + tau$3 - epsilon$2) % tau$3;\r\n}\r\n\r\nfunction circle() {\r\n  var center = constant$8([0, 0]),\r\n      radius = constant$8(90),\r\n      precision = constant$8(6),\r\n      ring,\r\n      rotate,\r\n      stream = {point: point};\r\n\r\n  function point(x, y) {\r\n    ring.push(x = rotate(x, y));\r\n    x[0] *= degrees$1, x[1] *= degrees$1;\r\n  }\r\n\r\n  function circle() {\r\n    var c = center.apply(this, arguments),\r\n        r = radius.apply(this, arguments) * radians,\r\n        p = precision.apply(this, arguments) * radians;\r\n    ring = [];\r\n    rotate = rotateRadians(-c[0] * radians, -c[1] * radians, 0).invert;\r\n    circleStream(stream, r, p, 1);\r\n    c = {type: \"Polygon\", coordinates: [ring]};\r\n    ring = rotate = null;\r\n    return c;\r\n  }\r\n\r\n  circle.center = function(_) {\r\n    return arguments.length ? (center = typeof _ === \"function\" ? _ : constant$8([+_[0], +_[1]]), circle) : center;\r\n  };\r\n\r\n  circle.radius = function(_) {\r\n    return arguments.length ? (radius = typeof _ === \"function\" ? _ : constant$8(+_), circle) : radius;\r\n  };\r\n\r\n  circle.precision = function(_) {\r\n    return arguments.length ? (precision = typeof _ === \"function\" ? _ : constant$8(+_), circle) : precision;\r\n  };\r\n\r\n  return circle;\r\n}\r\n\r\nfunction clipBuffer() {\r\n  var lines = [],\r\n      line;\r\n  return {\r\n    point: function(x, y) {\r\n      line.push([x, y]);\r\n    },\r\n    lineStart: function() {\r\n      lines.push(line = []);\r\n    },\r\n    lineEnd: noop$2,\r\n    rejoin: function() {\r\n      if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));\r\n    },\r\n    result: function() {\r\n      var result = lines;\r\n      lines = [];\r\n      line = null;\r\n      return result;\r\n    }\r\n  };\r\n}\r\n\r\nfunction pointEqual(a, b) {\r\n  return abs(a[0] - b[0]) < epsilon$2 && abs(a[1] - b[1]) < epsilon$2;\r\n}\r\n\r\nfunction Intersection(point, points, other, entry) {\r\n  this.x = point;\r\n  this.z = points;\r\n  this.o = other; // another intersection\r\n  this.e = entry; // is an entry?\r\n  this.v = false; // visited\r\n  this.n = this.p = null; // next & previous\r\n}\r\n\r\n// A generalized polygon clipping algorithm: given a polygon that has been cut\r\n// into its visible line segments, and rejoins the segments by interpolating\r\n// along the clip edge.\r\nfunction clipRejoin(segments, compareIntersection, startInside, interpolate, stream) {\r\n  var subject = [],\r\n      clip = [],\r\n      i,\r\n      n;\r\n\r\n  segments.forEach(function(segment) {\r\n    if ((n = segment.length - 1) <= 0) return;\r\n    var n, p0 = segment[0], p1 = segment[n], x;\r\n\r\n    // If the first and last points of a segment are coincident, then treat as a\r\n    // closed ring. TODO if all rings are closed, then the winding order of the\r\n    // exterior ring should be checked.\r\n    if (pointEqual(p0, p1)) {\r\n      stream.lineStart();\r\n      for (i = 0; i < n; ++i) stream.point((p0 = segment[i])[0], p0[1]);\r\n      stream.lineEnd();\r\n      return;\r\n    }\r\n\r\n    subject.push(x = new Intersection(p0, segment, null, true));\r\n    clip.push(x.o = new Intersection(p0, null, x, false));\r\n    subject.push(x = new Intersection(p1, segment, null, false));\r\n    clip.push(x.o = new Intersection(p1, null, x, true));\r\n  });\r\n\r\n  if (!subject.length) return;\r\n\r\n  clip.sort(compareIntersection);\r\n  link$1(subject);\r\n  link$1(clip);\r\n\r\n  for (i = 0, n = clip.length; i < n; ++i) {\r\n    clip[i].e = startInside = !startInside;\r\n  }\r\n\r\n  var start = subject[0],\r\n      points,\r\n      point;\r\n\r\n  while (1) {\r\n    // Find first unvisited intersection.\r\n    var current = start,\r\n        isSubject = true;\r\n    while (current.v) if ((current = current.n) === start) return;\r\n    points = current.z;\r\n    stream.lineStart();\r\n    do {\r\n      current.v = current.o.v = true;\r\n      if (current.e) {\r\n        if (isSubject) {\r\n          for (i = 0, n = points.length; i < n; ++i) stream.point((point = points[i])[0], point[1]);\r\n        } else {\r\n          interpolate(current.x, current.n.x, 1, stream);\r\n        }\r\n        current = current.n;\r\n      } else {\r\n        if (isSubject) {\r\n          points = current.p.z;\r\n          for (i = points.length - 1; i >= 0; --i) stream.point((point = points[i])[0], point[1]);\r\n        } else {\r\n          interpolate(current.x, current.p.x, -1, stream);\r\n        }\r\n        current = current.p;\r\n      }\r\n      current = current.o;\r\n      points = current.z;\r\n      isSubject = !isSubject;\r\n    } while (!current.v);\r\n    stream.lineEnd();\r\n  }\r\n}\r\n\r\nfunction link$1(array) {\r\n  if (!(n = array.length)) return;\r\n  var n,\r\n      i = 0,\r\n      a = array[0],\r\n      b;\r\n  while (++i < n) {\r\n    a.n = b = array[i];\r\n    b.p = a;\r\n    a = b;\r\n  }\r\n  a.n = b = array[0];\r\n  b.p = a;\r\n}\r\n\r\nvar sum$1 = adder();\r\n\r\nfunction longitude(point) {\r\n  if (abs(point[0]) <= pi$3)\r\n    return point[0];\r\n  else\r\n    return sign(point[0]) * ((abs(point[0]) + pi$3) % tau$3 - pi$3);\r\n}\r\n\r\nfunction polygonContains(polygon, point) {\r\n  var lambda = longitude(point),\r\n      phi = point[1],\r\n      sinPhi = sin$1(phi),\r\n      normal = [sin$1(lambda), -cos$1(lambda), 0],\r\n      angle = 0,\r\n      winding = 0;\r\n\r\n  sum$1.reset();\r\n\r\n  if (sinPhi === 1) phi = halfPi$2 + epsilon$2;\r\n  else if (sinPhi === -1) phi = -halfPi$2 - epsilon$2;\r\n\r\n  for (var i = 0, n = polygon.length; i < n; ++i) {\r\n    if (!(m = (ring = polygon[i]).length)) continue;\r\n    var ring,\r\n        m,\r\n        point0 = ring[m - 1],\r\n        lambda0 = longitude(point0),\r\n        phi0 = point0[1] / 2 + quarterPi,\r\n        sinPhi0 = sin$1(phi0),\r\n        cosPhi0 = cos$1(phi0);\r\n\r\n    for (var j = 0; j < m; ++j, lambda0 = lambda1, sinPhi0 = sinPhi1, cosPhi0 = cosPhi1, point0 = point1) {\r\n      var point1 = ring[j],\r\n          lambda1 = longitude(point1),\r\n          phi1 = point1[1] / 2 + quarterPi,\r\n          sinPhi1 = sin$1(phi1),\r\n          cosPhi1 = cos$1(phi1),\r\n          delta = lambda1 - lambda0,\r\n          sign = delta >= 0 ? 1 : -1,\r\n          absDelta = sign * delta,\r\n          antimeridian = absDelta > pi$3,\r\n          k = sinPhi0 * sinPhi1;\r\n\r\n      sum$1.add(atan2(k * sign * sin$1(absDelta), cosPhi0 * cosPhi1 + k * cos$1(absDelta)));\r\n      angle += antimeridian ? delta + sign * tau$3 : delta;\r\n\r\n      // Are the longitudes either side of the point’s meridian (lambda),\r\n      // and are the latitudes smaller than the parallel (phi)?\r\n      if (antimeridian ^ lambda0 >= lambda ^ lambda1 >= lambda) {\r\n        var arc = cartesianCross(cartesian(point0), cartesian(point1));\r\n        cartesianNormalizeInPlace(arc);\r\n        var intersection = cartesianCross(normal, arc);\r\n        cartesianNormalizeInPlace(intersection);\r\n        var phiArc = (antimeridian ^ delta >= 0 ? -1 : 1) * asin(intersection[2]);\r\n        if (phi > phiArc || phi === phiArc && (arc[0] || arc[1])) {\r\n          winding += antimeridian ^ delta >= 0 ? 1 : -1;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // First, determine whether the South pole is inside or outside:\r\n  //\r\n  // It is inside if:\r\n  // * the polygon winds around it in a clockwise direction.\r\n  // * the polygon does not (cumulatively) wind around it, but has a negative\r\n  //   (counter-clockwise) area.\r\n  //\r\n  // Second, count the (signed) number of times a segment crosses a lambda\r\n  // from the point to the South pole.  If it is zero, then the point is the\r\n  // same side as the South pole.\r\n\r\n  return (angle < -epsilon$2 || angle < epsilon$2 && sum$1 < -epsilon$2) ^ (winding & 1);\r\n}\r\n\r\nfunction clip(pointVisible, clipLine, interpolate, start) {\r\n  return function(sink) {\r\n    var line = clipLine(sink),\r\n        ringBuffer = clipBuffer(),\r\n        ringSink = clipLine(ringBuffer),\r\n        polygonStarted = false,\r\n        polygon,\r\n        segments,\r\n        ring;\r\n\r\n    var clip = {\r\n      point: point,\r\n      lineStart: lineStart,\r\n      lineEnd: lineEnd,\r\n      polygonStart: function() {\r\n        clip.point = pointRing;\r\n        clip.lineStart = ringStart;\r\n        clip.lineEnd = ringEnd;\r\n        segments = [];\r\n        polygon = [];\r\n      },\r\n      polygonEnd: function() {\r\n        clip.point = point;\r\n        clip.lineStart = lineStart;\r\n        clip.lineEnd = lineEnd;\r\n        segments = merge(segments);\r\n        var startInside = polygonContains(polygon, start);\r\n        if (segments.length) {\r\n          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;\r\n          clipRejoin(segments, compareIntersection, startInside, interpolate, sink);\r\n        } else if (startInside) {\r\n          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;\r\n          sink.lineStart();\r\n          interpolate(null, null, 1, sink);\r\n          sink.lineEnd();\r\n        }\r\n        if (polygonStarted) sink.polygonEnd(), polygonStarted = false;\r\n        segments = polygon = null;\r\n      },\r\n      sphere: function() {\r\n        sink.polygonStart();\r\n        sink.lineStart();\r\n        interpolate(null, null, 1, sink);\r\n        sink.lineEnd();\r\n        sink.polygonEnd();\r\n      }\r\n    };\r\n\r\n    function point(lambda, phi) {\r\n      if (pointVisible(lambda, phi)) sink.point(lambda, phi);\r\n    }\r\n\r\n    function pointLine(lambda, phi) {\r\n      line.point(lambda, phi);\r\n    }\r\n\r\n    function lineStart() {\r\n      clip.point = pointLine;\r\n      line.lineStart();\r\n    }\r\n\r\n    function lineEnd() {\r\n      clip.point = point;\r\n      line.lineEnd();\r\n    }\r\n\r\n    function pointRing(lambda, phi) {\r\n      ring.push([lambda, phi]);\r\n      ringSink.point(lambda, phi);\r\n    }\r\n\r\n    function ringStart() {\r\n      ringSink.lineStart();\r\n      ring = [];\r\n    }\r\n\r\n    function ringEnd() {\r\n      pointRing(ring[0][0], ring[0][1]);\r\n      ringSink.lineEnd();\r\n\r\n      var clean = ringSink.clean(),\r\n          ringSegments = ringBuffer.result(),\r\n          i, n = ringSegments.length, m,\r\n          segment,\r\n          point;\r\n\r\n      ring.pop();\r\n      polygon.push(ring);\r\n      ring = null;\r\n\r\n      if (!n) return;\r\n\r\n      // No intersections.\r\n      if (clean & 1) {\r\n        segment = ringSegments[0];\r\n        if ((m = segment.length - 1) > 0) {\r\n          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;\r\n          sink.lineStart();\r\n          for (i = 0; i < m; ++i) sink.point((point = segment[i])[0], point[1]);\r\n          sink.lineEnd();\r\n        }\r\n        return;\r\n      }\r\n\r\n      // Rejoin connected segments.\r\n      // TODO reuse ringBuffer.rejoin()?\r\n      if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));\r\n\r\n      segments.push(ringSegments.filter(validSegment));\r\n    }\r\n\r\n    return clip;\r\n  };\r\n}\r\n\r\nfunction validSegment(segment) {\r\n  return segment.length > 1;\r\n}\r\n\r\n// Intersections are sorted along the clip edge. For both antimeridian cutting\r\n// and circle clipping, the same comparison is used.\r\nfunction compareIntersection(a, b) {\r\n  return ((a = a.x)[0] < 0 ? a[1] - halfPi$2 - epsilon$2 : halfPi$2 - a[1])\r\n       - ((b = b.x)[0] < 0 ? b[1] - halfPi$2 - epsilon$2 : halfPi$2 - b[1]);\r\n}\r\n\r\nvar clipAntimeridian = clip(\r\n  function() { return true; },\r\n  clipAntimeridianLine,\r\n  clipAntimeridianInterpolate,\r\n  [-pi$3, -halfPi$2]\r\n);\r\n\r\n// Takes a line and cuts into visible segments. Return values: 0 - there were\r\n// intersections or the line was empty; 1 - no intersections; 2 - there were\r\n// intersections, and the first and last segments should be rejoined.\r\nfunction clipAntimeridianLine(stream) {\r\n  var lambda0 = NaN,\r\n      phi0 = NaN,\r\n      sign0 = NaN,\r\n      clean; // no intersections\r\n\r\n  return {\r\n    lineStart: function() {\r\n      stream.lineStart();\r\n      clean = 1;\r\n    },\r\n    point: function(lambda1, phi1) {\r\n      var sign1 = lambda1 > 0 ? pi$3 : -pi$3,\r\n          delta = abs(lambda1 - lambda0);\r\n      if (abs(delta - pi$3) < epsilon$2) { // line crosses a pole\r\n        stream.point(lambda0, phi0 = (phi0 + phi1) / 2 > 0 ? halfPi$2 : -halfPi$2);\r\n        stream.point(sign0, phi0);\r\n        stream.lineEnd();\r\n        stream.lineStart();\r\n        stream.point(sign1, phi0);\r\n        stream.point(lambda1, phi0);\r\n        clean = 0;\r\n      } else if (sign0 !== sign1 && delta >= pi$3) { // line crosses antimeridian\r\n        if (abs(lambda0 - sign0) < epsilon$2) lambda0 -= sign0 * epsilon$2; // handle degeneracies\r\n        if (abs(lambda1 - sign1) < epsilon$2) lambda1 -= sign1 * epsilon$2;\r\n        phi0 = clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1);\r\n        stream.point(sign0, phi0);\r\n        stream.lineEnd();\r\n        stream.lineStart();\r\n        stream.point(sign1, phi0);\r\n        clean = 0;\r\n      }\r\n      stream.point(lambda0 = lambda1, phi0 = phi1);\r\n      sign0 = sign1;\r\n    },\r\n    lineEnd: function() {\r\n      stream.lineEnd();\r\n      lambda0 = phi0 = NaN;\r\n    },\r\n    clean: function() {\r\n      return 2 - clean; // if intersections, rejoin first and last segments\r\n    }\r\n  };\r\n}\r\n\r\nfunction clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1) {\r\n  var cosPhi0,\r\n      cosPhi1,\r\n      sinLambda0Lambda1 = sin$1(lambda0 - lambda1);\r\n  return abs(sinLambda0Lambda1) > epsilon$2\r\n      ? atan((sin$1(phi0) * (cosPhi1 = cos$1(phi1)) * sin$1(lambda1)\r\n          - sin$1(phi1) * (cosPhi0 = cos$1(phi0)) * sin$1(lambda0))\r\n          / (cosPhi0 * cosPhi1 * sinLambda0Lambda1))\r\n      : (phi0 + phi1) / 2;\r\n}\r\n\r\nfunction clipAntimeridianInterpolate(from, to, direction, stream) {\r\n  var phi;\r\n  if (from == null) {\r\n    phi = direction * halfPi$2;\r\n    stream.point(-pi$3, phi);\r\n    stream.point(0, phi);\r\n    stream.point(pi$3, phi);\r\n    stream.point(pi$3, 0);\r\n    stream.point(pi$3, -phi);\r\n    stream.point(0, -phi);\r\n    stream.point(-pi$3, -phi);\r\n    stream.point(-pi$3, 0);\r\n    stream.point(-pi$3, phi);\r\n  } else if (abs(from[0] - to[0]) > epsilon$2) {\r\n    var lambda = from[0] < to[0] ? pi$3 : -pi$3;\r\n    phi = direction * lambda / 2;\r\n    stream.point(-lambda, phi);\r\n    stream.point(0, phi);\r\n    stream.point(lambda, phi);\r\n  } else {\r\n    stream.point(to[0], to[1]);\r\n  }\r\n}\r\n\r\nfunction clipCircle(radius) {\r\n  var cr = cos$1(radius),\r\n      delta = 6 * radians,\r\n      smallRadius = cr > 0,\r\n      notHemisphere = abs(cr) > epsilon$2; // TODO optimise for this common case\r\n\r\n  function interpolate(from, to, direction, stream) {\r\n    circleStream(stream, radius, delta, direction, from, to);\r\n  }\r\n\r\n  function visible(lambda, phi) {\r\n    return cos$1(lambda) * cos$1(phi) > cr;\r\n  }\r\n\r\n  // Takes a line and cuts into visible segments. Return values used for polygon\r\n  // clipping: 0 - there were intersections or the line was empty; 1 - no\r\n  // intersections 2 - there were intersections, and the first and last segments\r\n  // should be rejoined.\r\n  function clipLine(stream) {\r\n    var point0, // previous point\r\n        c0, // code for previous point\r\n        v0, // visibility of previous point\r\n        v00, // visibility of first point\r\n        clean; // no intersections\r\n    return {\r\n      lineStart: function() {\r\n        v00 = v0 = false;\r\n        clean = 1;\r\n      },\r\n      point: function(lambda, phi) {\r\n        var point1 = [lambda, phi],\r\n            point2,\r\n            v = visible(lambda, phi),\r\n            c = smallRadius\r\n              ? v ? 0 : code(lambda, phi)\r\n              : v ? code(lambda + (lambda < 0 ? pi$3 : -pi$3), phi) : 0;\r\n        if (!point0 && (v00 = v0 = v)) stream.lineStart();\r\n        // Handle degeneracies.\r\n        // TODO ignore if not clipping polygons.\r\n        if (v !== v0) {\r\n          point2 = intersect(point0, point1);\r\n          if (!point2 || pointEqual(point0, point2) || pointEqual(point1, point2)) {\r\n            point1[0] += epsilon$2;\r\n            point1[1] += epsilon$2;\r\n            v = visible(point1[0], point1[1]);\r\n          }\r\n        }\r\n        if (v !== v0) {\r\n          clean = 0;\r\n          if (v) {\r\n            // outside going in\r\n            stream.lineStart();\r\n            point2 = intersect(point1, point0);\r\n            stream.point(point2[0], point2[1]);\r\n          } else {\r\n            // inside going out\r\n            point2 = intersect(point0, point1);\r\n            stream.point(point2[0], point2[1]);\r\n            stream.lineEnd();\r\n          }\r\n          point0 = point2;\r\n        } else if (notHemisphere && point0 && smallRadius ^ v) {\r\n          var t;\r\n          // If the codes for two points are different, or are both zero,\r\n          // and there this segment intersects with the small circle.\r\n          if (!(c & c0) && (t = intersect(point1, point0, true))) {\r\n            clean = 0;\r\n            if (smallRadius) {\r\n              stream.lineStart();\r\n              stream.point(t[0][0], t[0][1]);\r\n              stream.point(t[1][0], t[1][1]);\r\n              stream.lineEnd();\r\n            } else {\r\n              stream.point(t[1][0], t[1][1]);\r\n              stream.lineEnd();\r\n              stream.lineStart();\r\n              stream.point(t[0][0], t[0][1]);\r\n            }\r\n          }\r\n        }\r\n        if (v && (!point0 || !pointEqual(point0, point1))) {\r\n          stream.point(point1[0], point1[1]);\r\n        }\r\n        point0 = point1, v0 = v, c0 = c;\r\n      },\r\n      lineEnd: function() {\r\n        if (v0) stream.lineEnd();\r\n        point0 = null;\r\n      },\r\n      // Rejoin first and last segments if there were intersections and the first\r\n      // and last points were visible.\r\n      clean: function() {\r\n        return clean | ((v00 && v0) << 1);\r\n      }\r\n    };\r\n  }\r\n\r\n  // Intersects the great circle between a and b with the clip circle.\r\n  function intersect(a, b, two) {\r\n    var pa = cartesian(a),\r\n        pb = cartesian(b);\r\n\r\n    // We have two planes, n1.p = d1 and n2.p = d2.\r\n    // Find intersection line p(t) = c1 n1 + c2 n2 + t (n1 ⨯ n2).\r\n    var n1 = [1, 0, 0], // normal\r\n        n2 = cartesianCross(pa, pb),\r\n        n2n2 = cartesianDot(n2, n2),\r\n        n1n2 = n2[0], // cartesianDot(n1, n2),\r\n        determinant = n2n2 - n1n2 * n1n2;\r\n\r\n    // Two polar points.\r\n    if (!determinant) return !two && a;\r\n\r\n    var c1 =  cr * n2n2 / determinant,\r\n        c2 = -cr * n1n2 / determinant,\r\n        n1xn2 = cartesianCross(n1, n2),\r\n        A = cartesianScale(n1, c1),\r\n        B = cartesianScale(n2, c2);\r\n    cartesianAddInPlace(A, B);\r\n\r\n    // Solve |p(t)|^2 = 1.\r\n    var u = n1xn2,\r\n        w = cartesianDot(A, u),\r\n        uu = cartesianDot(u, u),\r\n        t2 = w * w - uu * (cartesianDot(A, A) - 1);\r\n\r\n    if (t2 < 0) return;\r\n\r\n    var t = sqrt(t2),\r\n        q = cartesianScale(u, (-w - t) / uu);\r\n    cartesianAddInPlace(q, A);\r\n    q = spherical(q);\r\n\r\n    if (!two) return q;\r\n\r\n    // Two intersection points.\r\n    var lambda0 = a[0],\r\n        lambda1 = b[0],\r\n        phi0 = a[1],\r\n        phi1 = b[1],\r\n        z;\r\n\r\n    if (lambda1 < lambda0) z = lambda0, lambda0 = lambda1, lambda1 = z;\r\n\r\n    var delta = lambda1 - lambda0,\r\n        polar = abs(delta - pi$3) < epsilon$2,\r\n        meridian = polar || delta < epsilon$2;\r\n\r\n    if (!polar && phi1 < phi0) z = phi0, phi0 = phi1, phi1 = z;\r\n\r\n    // Check that the first point is between a and b.\r\n    if (meridian\r\n        ? polar\r\n          ? phi0 + phi1 > 0 ^ q[1] < (abs(q[0] - lambda0) < epsilon$2 ? phi0 : phi1)\r\n          : phi0 <= q[1] && q[1] <= phi1\r\n        : delta > pi$3 ^ (lambda0 <= q[0] && q[0] <= lambda1)) {\r\n      var q1 = cartesianScale(u, (-w + t) / uu);\r\n      cartesianAddInPlace(q1, A);\r\n      return [q, spherical(q1)];\r\n    }\r\n  }\r\n\r\n  // Generates a 4-bit vector representing the location of a point relative to\r\n  // the small circle's bounding box.\r\n  function code(lambda, phi) {\r\n    var r = smallRadius ? radius : pi$3 - radius,\r\n        code = 0;\r\n    if (lambda < -r) code |= 1; // left\r\n    else if (lambda > r) code |= 2; // right\r\n    if (phi < -r) code |= 4; // below\r\n    else if (phi > r) code |= 8; // above\r\n    return code;\r\n  }\r\n\r\n  return clip(visible, clipLine, interpolate, smallRadius ? [0, -radius] : [-pi$3, radius - pi$3]);\r\n}\r\n\r\nfunction clipLine(a, b, x0, y0, x1, y1) {\r\n  var ax = a[0],\r\n      ay = a[1],\r\n      bx = b[0],\r\n      by = b[1],\r\n      t0 = 0,\r\n      t1 = 1,\r\n      dx = bx - ax,\r\n      dy = by - ay,\r\n      r;\r\n\r\n  r = x0 - ax;\r\n  if (!dx && r > 0) return;\r\n  r /= dx;\r\n  if (dx < 0) {\r\n    if (r < t0) return;\r\n    if (r < t1) t1 = r;\r\n  } else if (dx > 0) {\r\n    if (r > t1) return;\r\n    if (r > t0) t0 = r;\r\n  }\r\n\r\n  r = x1 - ax;\r\n  if (!dx && r < 0) return;\r\n  r /= dx;\r\n  if (dx < 0) {\r\n    if (r > t1) return;\r\n    if (r > t0) t0 = r;\r\n  } else if (dx > 0) {\r\n    if (r < t0) return;\r\n    if (r < t1) t1 = r;\r\n  }\r\n\r\n  r = y0 - ay;\r\n  if (!dy && r > 0) return;\r\n  r /= dy;\r\n  if (dy < 0) {\r\n    if (r < t0) return;\r\n    if (r < t1) t1 = r;\r\n  } else if (dy > 0) {\r\n    if (r > t1) return;\r\n    if (r > t0) t0 = r;\r\n  }\r\n\r\n  r = y1 - ay;\r\n  if (!dy && r < 0) return;\r\n  r /= dy;\r\n  if (dy < 0) {\r\n    if (r > t1) return;\r\n    if (r > t0) t0 = r;\r\n  } else if (dy > 0) {\r\n    if (r < t0) return;\r\n    if (r < t1) t1 = r;\r\n  }\r\n\r\n  if (t0 > 0) a[0] = ax + t0 * dx, a[1] = ay + t0 * dy;\r\n  if (t1 < 1) b[0] = ax + t1 * dx, b[1] = ay + t1 * dy;\r\n  return true;\r\n}\r\n\r\nvar clipMax = 1e9, clipMin = -clipMax;\r\n\r\n// TODO Use d3-polygon’s polygonContains here for the ring check?\r\n// TODO Eliminate duplicate buffering in clipBuffer and polygon.push?\r\n\r\nfunction clipRectangle(x0, y0, x1, y1) {\r\n\r\n  function visible(x, y) {\r\n    return x0 <= x && x <= x1 && y0 <= y && y <= y1;\r\n  }\r\n\r\n  function interpolate(from, to, direction, stream) {\r\n    var a = 0, a1 = 0;\r\n    if (from == null\r\n        || (a = corner(from, direction)) !== (a1 = corner(to, direction))\r\n        || comparePoint(from, to) < 0 ^ direction > 0) {\r\n      do stream.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0);\r\n      while ((a = (a + direction + 4) % 4) !== a1);\r\n    } else {\r\n      stream.point(to[0], to[1]);\r\n    }\r\n  }\r\n\r\n  function corner(p, direction) {\r\n    return abs(p[0] - x0) < epsilon$2 ? direction > 0 ? 0 : 3\r\n        : abs(p[0] - x1) < epsilon$2 ? direction > 0 ? 2 : 1\r\n        : abs(p[1] - y0) < epsilon$2 ? direction > 0 ? 1 : 0\r\n        : direction > 0 ? 3 : 2; // abs(p[1] - y1) < epsilon\r\n  }\r\n\r\n  function compareIntersection(a, b) {\r\n    return comparePoint(a.x, b.x);\r\n  }\r\n\r\n  function comparePoint(a, b) {\r\n    var ca = corner(a, 1),\r\n        cb = corner(b, 1);\r\n    return ca !== cb ? ca - cb\r\n        : ca === 0 ? b[1] - a[1]\r\n        : ca === 1 ? a[0] - b[0]\r\n        : ca === 2 ? a[1] - b[1]\r\n        : b[0] - a[0];\r\n  }\r\n\r\n  return function(stream) {\r\n    var activeStream = stream,\r\n        bufferStream = clipBuffer(),\r\n        segments,\r\n        polygon,\r\n        ring,\r\n        x__, y__, v__, // first point\r\n        x_, y_, v_, // previous point\r\n        first,\r\n        clean;\r\n\r\n    var clipStream = {\r\n      point: point,\r\n      lineStart: lineStart,\r\n      lineEnd: lineEnd,\r\n      polygonStart: polygonStart,\r\n      polygonEnd: polygonEnd\r\n    };\r\n\r\n    function point(x, y) {\r\n      if (visible(x, y)) activeStream.point(x, y);\r\n    }\r\n\r\n    function polygonInside() {\r\n      var winding = 0;\r\n\r\n      for (var i = 0, n = polygon.length; i < n; ++i) {\r\n        for (var ring = polygon[i], j = 1, m = ring.length, point = ring[0], a0, a1, b0 = point[0], b1 = point[1]; j < m; ++j) {\r\n          a0 = b0, a1 = b1, point = ring[j], b0 = point[0], b1 = point[1];\r\n          if (a1 <= y1) { if (b1 > y1 && (b0 - a0) * (y1 - a1) > (b1 - a1) * (x0 - a0)) ++winding; }\r\n          else { if (b1 <= y1 && (b0 - a0) * (y1 - a1) < (b1 - a1) * (x0 - a0)) --winding; }\r\n        }\r\n      }\r\n\r\n      return winding;\r\n    }\r\n\r\n    // Buffer geometry within a polygon and then clip it en masse.\r\n    function polygonStart() {\r\n      activeStream = bufferStream, segments = [], polygon = [], clean = true;\r\n    }\r\n\r\n    function polygonEnd() {\r\n      var startInside = polygonInside(),\r\n          cleanInside = clean && startInside,\r\n          visible = (segments = merge(segments)).length;\r\n      if (cleanInside || visible) {\r\n        stream.polygonStart();\r\n        if (cleanInside) {\r\n          stream.lineStart();\r\n          interpolate(null, null, 1, stream);\r\n          stream.lineEnd();\r\n        }\r\n        if (visible) {\r\n          clipRejoin(segments, compareIntersection, startInside, interpolate, stream);\r\n        }\r\n        stream.polygonEnd();\r\n      }\r\n      activeStream = stream, segments = polygon = ring = null;\r\n    }\r\n\r\n    function lineStart() {\r\n      clipStream.point = linePoint;\r\n      if (polygon) polygon.push(ring = []);\r\n      first = true;\r\n      v_ = false;\r\n      x_ = y_ = NaN;\r\n    }\r\n\r\n    // TODO rather than special-case polygons, simply handle them separately.\r\n    // Ideally, coincident intersection points should be jittered to avoid\r\n    // clipping issues.\r\n    function lineEnd() {\r\n      if (segments) {\r\n        linePoint(x__, y__);\r\n        if (v__ && v_) bufferStream.rejoin();\r\n        segments.push(bufferStream.result());\r\n      }\r\n      clipStream.point = point;\r\n      if (v_) activeStream.lineEnd();\r\n    }\r\n\r\n    function linePoint(x, y) {\r\n      var v = visible(x, y);\r\n      if (polygon) ring.push([x, y]);\r\n      if (first) {\r\n        x__ = x, y__ = y, v__ = v;\r\n        first = false;\r\n        if (v) {\r\n          activeStream.lineStart();\r\n          activeStream.point(x, y);\r\n        }\r\n      } else {\r\n        if (v && v_) activeStream.point(x, y);\r\n        else {\r\n          var a = [x_ = Math.max(clipMin, Math.min(clipMax, x_)), y_ = Math.max(clipMin, Math.min(clipMax, y_))],\r\n              b = [x = Math.max(clipMin, Math.min(clipMax, x)), y = Math.max(clipMin, Math.min(clipMax, y))];\r\n          if (clipLine(a, b, x0, y0, x1, y1)) {\r\n            if (!v_) {\r\n              activeStream.lineStart();\r\n              activeStream.point(a[0], a[1]);\r\n            }\r\n            activeStream.point(b[0], b[1]);\r\n            if (!v) activeStream.lineEnd();\r\n            clean = false;\r\n          } else if (v) {\r\n            activeStream.lineStart();\r\n            activeStream.point(x, y);\r\n            clean = false;\r\n          }\r\n        }\r\n      }\r\n      x_ = x, y_ = y, v_ = v;\r\n    }\r\n\r\n    return clipStream;\r\n  };\r\n}\r\n\r\nfunction extent$1() {\r\n  var x0 = 0,\r\n      y0 = 0,\r\n      x1 = 960,\r\n      y1 = 500,\r\n      cache,\r\n      cacheStream,\r\n      clip;\r\n\r\n  return clip = {\r\n    stream: function(stream) {\r\n      return cache && cacheStream === stream ? cache : cache = clipRectangle(x0, y0, x1, y1)(cacheStream = stream);\r\n    },\r\n    extent: function(_) {\r\n      return arguments.length ? (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1], cache = cacheStream = null, clip) : [[x0, y0], [x1, y1]];\r\n    }\r\n  };\r\n}\r\n\r\nvar lengthSum = adder(),\r\n    lambda0$2,\r\n    sinPhi0$1,\r\n    cosPhi0$1;\r\n\r\nvar lengthStream = {\r\n  sphere: noop$2,\r\n  point: noop$2,\r\n  lineStart: lengthLineStart,\r\n  lineEnd: noop$2,\r\n  polygonStart: noop$2,\r\n  polygonEnd: noop$2\r\n};\r\n\r\nfunction lengthLineStart() {\r\n  lengthStream.point = lengthPointFirst;\r\n  lengthStream.lineEnd = lengthLineEnd;\r\n}\r\n\r\nfunction lengthLineEnd() {\r\n  lengthStream.point = lengthStream.lineEnd = noop$2;\r\n}\r\n\r\nfunction lengthPointFirst(lambda, phi) {\r\n  lambda *= radians, phi *= radians;\r\n  lambda0$2 = lambda, sinPhi0$1 = sin$1(phi), cosPhi0$1 = cos$1(phi);\r\n  lengthStream.point = lengthPoint;\r\n}\r\n\r\nfunction lengthPoint(lambda, phi) {\r\n  lambda *= radians, phi *= radians;\r\n  var sinPhi = sin$1(phi),\r\n      cosPhi = cos$1(phi),\r\n      delta = abs(lambda - lambda0$2),\r\n      cosDelta = cos$1(delta),\r\n      sinDelta = sin$1(delta),\r\n      x = cosPhi * sinDelta,\r\n      y = cosPhi0$1 * sinPhi - sinPhi0$1 * cosPhi * cosDelta,\r\n      z = sinPhi0$1 * sinPhi + cosPhi0$1 * cosPhi * cosDelta;\r\n  lengthSum.add(atan2(sqrt(x * x + y * y), z));\r\n  lambda0$2 = lambda, sinPhi0$1 = sinPhi, cosPhi0$1 = cosPhi;\r\n}\r\n\r\nfunction length$1(object) {\r\n  lengthSum.reset();\r\n  geoStream(object, lengthStream);\r\n  return +lengthSum;\r\n}\r\n\r\nvar coordinates = [null, null],\r\n    object$1 = {type: \"LineString\", coordinates: coordinates};\r\n\r\nfunction distance(a, b) {\r\n  coordinates[0] = a;\r\n  coordinates[1] = b;\r\n  return length$1(object$1);\r\n}\r\n\r\nvar containsObjectType = {\r\n  Feature: function(object, point) {\r\n    return containsGeometry(object.geometry, point);\r\n  },\r\n  FeatureCollection: function(object, point) {\r\n    var features = object.features, i = -1, n = features.length;\r\n    while (++i < n) if (containsGeometry(features[i].geometry, point)) return true;\r\n    return false;\r\n  }\r\n};\r\n\r\nvar containsGeometryType = {\r\n  Sphere: function() {\r\n    return true;\r\n  },\r\n  Point: function(object, point) {\r\n    return containsPoint(object.coordinates, point);\r\n  },\r\n  MultiPoint: function(object, point) {\r\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\r\n    while (++i < n) if (containsPoint(coordinates[i], point)) return true;\r\n    return false;\r\n  },\r\n  LineString: function(object, point) {\r\n    return containsLine(object.coordinates, point);\r\n  },\r\n  MultiLineString: function(object, point) {\r\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\r\n    while (++i < n) if (containsLine(coordinates[i], point)) return true;\r\n    return false;\r\n  },\r\n  Polygon: function(object, point) {\r\n    return containsPolygon(object.coordinates, point);\r\n  },\r\n  MultiPolygon: function(object, point) {\r\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\r\n    while (++i < n) if (containsPolygon(coordinates[i], point)) return true;\r\n    return false;\r\n  },\r\n  GeometryCollection: function(object, point) {\r\n    var geometries = object.geometries, i = -1, n = geometries.length;\r\n    while (++i < n) if (containsGeometry(geometries[i], point)) return true;\r\n    return false;\r\n  }\r\n};\r\n\r\nfunction containsGeometry(geometry, point) {\r\n  return geometry && containsGeometryType.hasOwnProperty(geometry.type)\r\n      ? containsGeometryType[geometry.type](geometry, point)\r\n      : false;\r\n}\r\n\r\nfunction containsPoint(coordinates, point) {\r\n  return distance(coordinates, point) === 0;\r\n}\r\n\r\nfunction containsLine(coordinates, point) {\r\n  var ao, bo, ab;\r\n  for (var i = 0, n = coordinates.length; i < n; i++) {\r\n    bo = distance(coordinates[i], point);\r\n    if (bo === 0) return true;\r\n    if (i > 0) {\r\n      ab = distance(coordinates[i], coordinates[i - 1]);\r\n      if (\r\n        ab > 0 &&\r\n        ao <= ab &&\r\n        bo <= ab &&\r\n        (ao + bo - ab) * (1 - Math.pow((ao - bo) / ab, 2)) < epsilon2$1 * ab\r\n      )\r\n        return true;\r\n    }\r\n    ao = bo;\r\n  }\r\n  return false;\r\n}\r\n\r\nfunction containsPolygon(coordinates, point) {\r\n  return !!polygonContains(coordinates.map(ringRadians), pointRadians(point));\r\n}\r\n\r\nfunction ringRadians(ring) {\r\n  return ring = ring.map(pointRadians), ring.pop(), ring;\r\n}\r\n\r\nfunction pointRadians(point) {\r\n  return [point[0] * radians, point[1] * radians];\r\n}\r\n\r\nfunction contains$1(object, point) {\r\n  return (object && containsObjectType.hasOwnProperty(object.type)\r\n      ? containsObjectType[object.type]\r\n      : containsGeometry)(object, point);\r\n}\r\n\r\nfunction graticuleX(y0, y1, dy) {\r\n  var y = sequence(y0, y1 - epsilon$2, dy).concat(y1);\r\n  return function(x) { return y.map(function(y) { return [x, y]; }); };\r\n}\r\n\r\nfunction graticuleY(x0, x1, dx) {\r\n  var x = sequence(x0, x1 - epsilon$2, dx).concat(x1);\r\n  return function(y) { return x.map(function(x) { return [x, y]; }); };\r\n}\r\n\r\nfunction graticule() {\r\n  var x1, x0, X1, X0,\r\n      y1, y0, Y1, Y0,\r\n      dx = 10, dy = dx, DX = 90, DY = 360,\r\n      x, y, X, Y,\r\n      precision = 2.5;\r\n\r\n  function graticule() {\r\n    return {type: \"MultiLineString\", coordinates: lines()};\r\n  }\r\n\r\n  function lines() {\r\n    return sequence(ceil(X0 / DX) * DX, X1, DX).map(X)\r\n        .concat(sequence(ceil(Y0 / DY) * DY, Y1, DY).map(Y))\r\n        .concat(sequence(ceil(x0 / dx) * dx, x1, dx).filter(function(x) { return abs(x % DX) > epsilon$2; }).map(x))\r\n        .concat(sequence(ceil(y0 / dy) * dy, y1, dy).filter(function(y) { return abs(y % DY) > epsilon$2; }).map(y));\r\n  }\r\n\r\n  graticule.lines = function() {\r\n    return lines().map(function(coordinates) { return {type: \"LineString\", coordinates: coordinates}; });\r\n  };\r\n\r\n  graticule.outline = function() {\r\n    return {\r\n      type: \"Polygon\",\r\n      coordinates: [\r\n        X(X0).concat(\r\n        Y(Y1).slice(1),\r\n        X(X1).reverse().slice(1),\r\n        Y(Y0).reverse().slice(1))\r\n      ]\r\n    };\r\n  };\r\n\r\n  graticule.extent = function(_) {\r\n    if (!arguments.length) return graticule.extentMinor();\r\n    return graticule.extentMajor(_).extentMinor(_);\r\n  };\r\n\r\n  graticule.extentMajor = function(_) {\r\n    if (!arguments.length) return [[X0, Y0], [X1, Y1]];\r\n    X0 = +_[0][0], X1 = +_[1][0];\r\n    Y0 = +_[0][1], Y1 = +_[1][1];\r\n    if (X0 > X1) _ = X0, X0 = X1, X1 = _;\r\n    if (Y0 > Y1) _ = Y0, Y0 = Y1, Y1 = _;\r\n    return graticule.precision(precision);\r\n  };\r\n\r\n  graticule.extentMinor = function(_) {\r\n    if (!arguments.length) return [[x0, y0], [x1, y1]];\r\n    x0 = +_[0][0], x1 = +_[1][0];\r\n    y0 = +_[0][1], y1 = +_[1][1];\r\n    if (x0 > x1) _ = x0, x0 = x1, x1 = _;\r\n    if (y0 > y1) _ = y0, y0 = y1, y1 = _;\r\n    return graticule.precision(precision);\r\n  };\r\n\r\n  graticule.step = function(_) {\r\n    if (!arguments.length) return graticule.stepMinor();\r\n    return graticule.stepMajor(_).stepMinor(_);\r\n  };\r\n\r\n  graticule.stepMajor = function(_) {\r\n    if (!arguments.length) return [DX, DY];\r\n    DX = +_[0], DY = +_[1];\r\n    return graticule;\r\n  };\r\n\r\n  graticule.stepMinor = function(_) {\r\n    if (!arguments.length) return [dx, dy];\r\n    dx = +_[0], dy = +_[1];\r\n    return graticule;\r\n  };\r\n\r\n  graticule.precision = function(_) {\r\n    if (!arguments.length) return precision;\r\n    precision = +_;\r\n    x = graticuleX(y0, y1, 90);\r\n    y = graticuleY(x0, x1, precision);\r\n    X = graticuleX(Y0, Y1, 90);\r\n    Y = graticuleY(X0, X1, precision);\r\n    return graticule;\r\n  };\r\n\r\n  return graticule\r\n      .extentMajor([[-180, -90 + epsilon$2], [180, 90 - epsilon$2]])\r\n      .extentMinor([[-180, -80 - epsilon$2], [180, 80 + epsilon$2]]);\r\n}\r\n\r\nfunction graticule10() {\r\n  return graticule()();\r\n}\r\n\r\nfunction interpolate$1(a, b) {\r\n  var x0 = a[0] * radians,\r\n      y0 = a[1] * radians,\r\n      x1 = b[0] * radians,\r\n      y1 = b[1] * radians,\r\n      cy0 = cos$1(y0),\r\n      sy0 = sin$1(y0),\r\n      cy1 = cos$1(y1),\r\n      sy1 = sin$1(y1),\r\n      kx0 = cy0 * cos$1(x0),\r\n      ky0 = cy0 * sin$1(x0),\r\n      kx1 = cy1 * cos$1(x1),\r\n      ky1 = cy1 * sin$1(x1),\r\n      d = 2 * asin(sqrt(haversin(y1 - y0) + cy0 * cy1 * haversin(x1 - x0))),\r\n      k = sin$1(d);\r\n\r\n  var interpolate = d ? function(t) {\r\n    var B = sin$1(t *= d) / k,\r\n        A = sin$1(d - t) / k,\r\n        x = A * kx0 + B * kx1,\r\n        y = A * ky0 + B * ky1,\r\n        z = A * sy0 + B * sy1;\r\n    return [\r\n      atan2(y, x) * degrees$1,\r\n      atan2(z, sqrt(x * x + y * y)) * degrees$1\r\n    ];\r\n  } : function() {\r\n    return [x0 * degrees$1, y0 * degrees$1];\r\n  };\r\n\r\n  interpolate.distance = d;\r\n\r\n  return interpolate;\r\n}\r\n\r\nfunction identity$4(x) {\r\n  return x;\r\n}\r\n\r\nvar areaSum$1 = adder(),\r\n    areaRingSum$1 = adder(),\r\n    x00,\r\n    y00,\r\n    x0$1,\r\n    y0$1;\r\n\r\nvar areaStream$1 = {\r\n  point: noop$2,\r\n  lineStart: noop$2,\r\n  lineEnd: noop$2,\r\n  polygonStart: function() {\r\n    areaStream$1.lineStart = areaRingStart$1;\r\n    areaStream$1.lineEnd = areaRingEnd$1;\r\n  },\r\n  polygonEnd: function() {\r\n    areaStream$1.lineStart = areaStream$1.lineEnd = areaStream$1.point = noop$2;\r\n    areaSum$1.add(abs(areaRingSum$1));\r\n    areaRingSum$1.reset();\r\n  },\r\n  result: function() {\r\n    var area = areaSum$1 / 2;\r\n    areaSum$1.reset();\r\n    return area;\r\n  }\r\n};\r\n\r\nfunction areaRingStart$1() {\r\n  areaStream$1.point = areaPointFirst$1;\r\n}\r\n\r\nfunction areaPointFirst$1(x, y) {\r\n  areaStream$1.point = areaPoint$1;\r\n  x00 = x0$1 = x, y00 = y0$1 = y;\r\n}\r\n\r\nfunction areaPoint$1(x, y) {\r\n  areaRingSum$1.add(y0$1 * x - x0$1 * y);\r\n  x0$1 = x, y0$1 = y;\r\n}\r\n\r\nfunction areaRingEnd$1() {\r\n  areaPoint$1(x00, y00);\r\n}\r\n\r\nvar x0$2 = Infinity,\r\n    y0$2 = x0$2,\r\n    x1 = -x0$2,\r\n    y1 = x1;\r\n\r\nvar boundsStream$1 = {\r\n  point: boundsPoint$1,\r\n  lineStart: noop$2,\r\n  lineEnd: noop$2,\r\n  polygonStart: noop$2,\r\n  polygonEnd: noop$2,\r\n  result: function() {\r\n    var bounds = [[x0$2, y0$2], [x1, y1]];\r\n    x1 = y1 = -(y0$2 = x0$2 = Infinity);\r\n    return bounds;\r\n  }\r\n};\r\n\r\nfunction boundsPoint$1(x, y) {\r\n  if (x < x0$2) x0$2 = x;\r\n  if (x > x1) x1 = x;\r\n  if (y < y0$2) y0$2 = y;\r\n  if (y > y1) y1 = y;\r\n}\r\n\r\n// TODO Enforce positive area for exterior, negative area for interior?\r\n\r\nvar X0$1 = 0,\r\n    Y0$1 = 0,\r\n    Z0$1 = 0,\r\n    X1$1 = 0,\r\n    Y1$1 = 0,\r\n    Z1$1 = 0,\r\n    X2$1 = 0,\r\n    Y2$1 = 0,\r\n    Z2$1 = 0,\r\n    x00$1,\r\n    y00$1,\r\n    x0$3,\r\n    y0$3;\r\n\r\nvar centroidStream$1 = {\r\n  point: centroidPoint$1,\r\n  lineStart: centroidLineStart$1,\r\n  lineEnd: centroidLineEnd$1,\r\n  polygonStart: function() {\r\n    centroidStream$1.lineStart = centroidRingStart$1;\r\n    centroidStream$1.lineEnd = centroidRingEnd$1;\r\n  },\r\n  polygonEnd: function() {\r\n    centroidStream$1.point = centroidPoint$1;\r\n    centroidStream$1.lineStart = centroidLineStart$1;\r\n    centroidStream$1.lineEnd = centroidLineEnd$1;\r\n  },\r\n  result: function() {\r\n    var centroid = Z2$1 ? [X2$1 / Z2$1, Y2$1 / Z2$1]\r\n        : Z1$1 ? [X1$1 / Z1$1, Y1$1 / Z1$1]\r\n        : Z0$1 ? [X0$1 / Z0$1, Y0$1 / Z0$1]\r\n        : [NaN, NaN];\r\n    X0$1 = Y0$1 = Z0$1 =\r\n    X1$1 = Y1$1 = Z1$1 =\r\n    X2$1 = Y2$1 = Z2$1 = 0;\r\n    return centroid;\r\n  }\r\n};\r\n\r\nfunction centroidPoint$1(x, y) {\r\n  X0$1 += x;\r\n  Y0$1 += y;\r\n  ++Z0$1;\r\n}\r\n\r\nfunction centroidLineStart$1() {\r\n  centroidStream$1.point = centroidPointFirstLine;\r\n}\r\n\r\nfunction centroidPointFirstLine(x, y) {\r\n  centroidStream$1.point = centroidPointLine;\r\n  centroidPoint$1(x0$3 = x, y0$3 = y);\r\n}\r\n\r\nfunction centroidPointLine(x, y) {\r\n  var dx = x - x0$3, dy = y - y0$3, z = sqrt(dx * dx + dy * dy);\r\n  X1$1 += z * (x0$3 + x) / 2;\r\n  Y1$1 += z * (y0$3 + y) / 2;\r\n  Z1$1 += z;\r\n  centroidPoint$1(x0$3 = x, y0$3 = y);\r\n}\r\n\r\nfunction centroidLineEnd$1() {\r\n  centroidStream$1.point = centroidPoint$1;\r\n}\r\n\r\nfunction centroidRingStart$1() {\r\n  centroidStream$1.point = centroidPointFirstRing;\r\n}\r\n\r\nfunction centroidRingEnd$1() {\r\n  centroidPointRing(x00$1, y00$1);\r\n}\r\n\r\nfunction centroidPointFirstRing(x, y) {\r\n  centroidStream$1.point = centroidPointRing;\r\n  centroidPoint$1(x00$1 = x0$3 = x, y00$1 = y0$3 = y);\r\n}\r\n\r\nfunction centroidPointRing(x, y) {\r\n  var dx = x - x0$3,\r\n      dy = y - y0$3,\r\n      z = sqrt(dx * dx + dy * dy);\r\n\r\n  X1$1 += z * (x0$3 + x) / 2;\r\n  Y1$1 += z * (y0$3 + y) / 2;\r\n  Z1$1 += z;\r\n\r\n  z = y0$3 * x - x0$3 * y;\r\n  X2$1 += z * (x0$3 + x);\r\n  Y2$1 += z * (y0$3 + y);\r\n  Z2$1 += z * 3;\r\n  centroidPoint$1(x0$3 = x, y0$3 = y);\r\n}\r\n\r\nfunction PathContext(context) {\r\n  this._context = context;\r\n}\r\n\r\nPathContext.prototype = {\r\n  _radius: 4.5,\r\n  pointRadius: function(_) {\r\n    return this._radius = _, this;\r\n  },\r\n  polygonStart: function() {\r\n    this._line = 0;\r\n  },\r\n  polygonEnd: function() {\r\n    this._line = NaN;\r\n  },\r\n  lineStart: function() {\r\n    this._point = 0;\r\n  },\r\n  lineEnd: function() {\r\n    if (this._line === 0) this._context.closePath();\r\n    this._point = NaN;\r\n  },\r\n  point: function(x, y) {\r\n    switch (this._point) {\r\n      case 0: {\r\n        this._context.moveTo(x, y);\r\n        this._point = 1;\r\n        break;\r\n      }\r\n      case 1: {\r\n        this._context.lineTo(x, y);\r\n        break;\r\n      }\r\n      default: {\r\n        this._context.moveTo(x + this._radius, y);\r\n        this._context.arc(x, y, this._radius, 0, tau$3);\r\n        break;\r\n      }\r\n    }\r\n  },\r\n  result: noop$2\r\n};\r\n\r\nvar lengthSum$1 = adder(),\r\n    lengthRing,\r\n    x00$2,\r\n    y00$2,\r\n    x0$4,\r\n    y0$4;\r\n\r\nvar lengthStream$1 = {\r\n  point: noop$2,\r\n  lineStart: function() {\r\n    lengthStream$1.point = lengthPointFirst$1;\r\n  },\r\n  lineEnd: function() {\r\n    if (lengthRing) lengthPoint$1(x00$2, y00$2);\r\n    lengthStream$1.point = noop$2;\r\n  },\r\n  polygonStart: function() {\r\n    lengthRing = true;\r\n  },\r\n  polygonEnd: function() {\r\n    lengthRing = null;\r\n  },\r\n  result: function() {\r\n    var length = +lengthSum$1;\r\n    lengthSum$1.reset();\r\n    return length;\r\n  }\r\n};\r\n\r\nfunction lengthPointFirst$1(x, y) {\r\n  lengthStream$1.point = lengthPoint$1;\r\n  x00$2 = x0$4 = x, y00$2 = y0$4 = y;\r\n}\r\n\r\nfunction lengthPoint$1(x, y) {\r\n  x0$4 -= x, y0$4 -= y;\r\n  lengthSum$1.add(sqrt(x0$4 * x0$4 + y0$4 * y0$4));\r\n  x0$4 = x, y0$4 = y;\r\n}\r\n\r\nfunction PathString() {\r\n  this._string = [];\r\n}\r\n\r\nPathString.prototype = {\r\n  _radius: 4.5,\r\n  _circle: circle$1(4.5),\r\n  pointRadius: function(_) {\r\n    if ((_ = +_) !== this._radius) this._radius = _, this._circle = null;\r\n    return this;\r\n  },\r\n  polygonStart: function() {\r\n    this._line = 0;\r\n  },\r\n  polygonEnd: function() {\r\n    this._line = NaN;\r\n  },\r\n  lineStart: function() {\r\n    this._point = 0;\r\n  },\r\n  lineEnd: function() {\r\n    if (this._line === 0) this._string.push(\"Z\");\r\n    this._point = NaN;\r\n  },\r\n  point: function(x, y) {\r\n    switch (this._point) {\r\n      case 0: {\r\n        this._string.push(\"M\", x, \",\", y);\r\n        this._point = 1;\r\n        break;\r\n      }\r\n      case 1: {\r\n        this._string.push(\"L\", x, \",\", y);\r\n        break;\r\n      }\r\n      default: {\r\n        if (this._circle == null) this._circle = circle$1(this._radius);\r\n        this._string.push(\"M\", x, \",\", y, this._circle);\r\n        break;\r\n      }\r\n    }\r\n  },\r\n  result: function() {\r\n    if (this._string.length) {\r\n      var result = this._string.join(\"\");\r\n      this._string = [];\r\n      return result;\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n};\r\n\r\nfunction circle$1(radius) {\r\n  return \"m0,\" + radius\r\n      + \"a\" + radius + \",\" + radius + \" 0 1,1 0,\" + -2 * radius\r\n      + \"a\" + radius + \",\" + radius + \" 0 1,1 0,\" + 2 * radius\r\n      + \"z\";\r\n}\r\n\r\nfunction index$1(projection, context) {\r\n  var pointRadius = 4.5,\r\n      projectionStream,\r\n      contextStream;\r\n\r\n  function path(object) {\r\n    if (object) {\r\n      if (typeof pointRadius === \"function\") contextStream.pointRadius(+pointRadius.apply(this, arguments));\r\n      geoStream(object, projectionStream(contextStream));\r\n    }\r\n    return contextStream.result();\r\n  }\r\n\r\n  path.area = function(object) {\r\n    geoStream(object, projectionStream(areaStream$1));\r\n    return areaStream$1.result();\r\n  };\r\n\r\n  path.measure = function(object) {\r\n    geoStream(object, projectionStream(lengthStream$1));\r\n    return lengthStream$1.result();\r\n  };\r\n\r\n  path.bounds = function(object) {\r\n    geoStream(object, projectionStream(boundsStream$1));\r\n    return boundsStream$1.result();\r\n  };\r\n\r\n  path.centroid = function(object) {\r\n    geoStream(object, projectionStream(centroidStream$1));\r\n    return centroidStream$1.result();\r\n  };\r\n\r\n  path.projection = function(_) {\r\n    return arguments.length ? (projectionStream = _ == null ? (projection = null, identity$4) : (projection = _).stream, path) : projection;\r\n  };\r\n\r\n  path.context = function(_) {\r\n    if (!arguments.length) return context;\r\n    contextStream = _ == null ? (context = null, new PathString) : new PathContext(context = _);\r\n    if (typeof pointRadius !== \"function\") contextStream.pointRadius(pointRadius);\r\n    return path;\r\n  };\r\n\r\n  path.pointRadius = function(_) {\r\n    if (!arguments.length) return pointRadius;\r\n    pointRadius = typeof _ === \"function\" ? _ : (contextStream.pointRadius(+_), +_);\r\n    return path;\r\n  };\r\n\r\n  return path.projection(projection).context(context);\r\n}\r\n\r\nfunction transform(methods) {\r\n  return {\r\n    stream: transformer(methods)\r\n  };\r\n}\r\n\r\nfunction transformer(methods) {\r\n  return function(stream) {\r\n    var s = new TransformStream;\r\n    for (var key in methods) s[key] = methods[key];\r\n    s.stream = stream;\r\n    return s;\r\n  };\r\n}\r\n\r\nfunction TransformStream() {}\r\n\r\nTransformStream.prototype = {\r\n  constructor: TransformStream,\r\n  point: function(x, y) { this.stream.point(x, y); },\r\n  sphere: function() { this.stream.sphere(); },\r\n  lineStart: function() { this.stream.lineStart(); },\r\n  lineEnd: function() { this.stream.lineEnd(); },\r\n  polygonStart: function() { this.stream.polygonStart(); },\r\n  polygonEnd: function() { this.stream.polygonEnd(); }\r\n};\r\n\r\nfunction fit(projection, fitBounds, object) {\r\n  var clip = projection.clipExtent && projection.clipExtent();\r\n  projection.scale(150).translate([0, 0]);\r\n  if (clip != null) projection.clipExtent(null);\r\n  geoStream(object, projection.stream(boundsStream$1));\r\n  fitBounds(boundsStream$1.result());\r\n  if (clip != null) projection.clipExtent(clip);\r\n  return projection;\r\n}\r\n\r\nfunction fitExtent(projection, extent, object) {\r\n  return fit(projection, function(b) {\r\n    var w = extent[1][0] - extent[0][0],\r\n        h = extent[1][1] - extent[0][1],\r\n        k = Math.min(w / (b[1][0] - b[0][0]), h / (b[1][1] - b[0][1])),\r\n        x = +extent[0][0] + (w - k * (b[1][0] + b[0][0])) / 2,\r\n        y = +extent[0][1] + (h - k * (b[1][1] + b[0][1])) / 2;\r\n    projection.scale(150 * k).translate([x, y]);\r\n  }, object);\r\n}\r\n\r\nfunction fitSize(projection, size, object) {\r\n  return fitExtent(projection, [[0, 0], size], object);\r\n}\r\n\r\nfunction fitWidth(projection, width, object) {\r\n  return fit(projection, function(b) {\r\n    var w = +width,\r\n        k = w / (b[1][0] - b[0][0]),\r\n        x = (w - k * (b[1][0] + b[0][0])) / 2,\r\n        y = -k * b[0][1];\r\n    projection.scale(150 * k).translate([x, y]);\r\n  }, object);\r\n}\r\n\r\nfunction fitHeight(projection, height, object) {\r\n  return fit(projection, function(b) {\r\n    var h = +height,\r\n        k = h / (b[1][1] - b[0][1]),\r\n        x = -k * b[0][0],\r\n        y = (h - k * (b[1][1] + b[0][1])) / 2;\r\n    projection.scale(150 * k).translate([x, y]);\r\n  }, object);\r\n}\r\n\r\nvar maxDepth = 16, // maximum depth of subdivision\r\n    cosMinDistance = cos$1(30 * radians); // cos(minimum angular distance)\r\n\r\nfunction resample(project, delta2) {\r\n  return +delta2 ? resample$1(project, delta2) : resampleNone(project);\r\n}\r\n\r\nfunction resampleNone(project) {\r\n  return transformer({\r\n    point: function(x, y) {\r\n      x = project(x, y);\r\n      this.stream.point(x[0], x[1]);\r\n    }\r\n  });\r\n}\r\n\r\nfunction resample$1(project, delta2) {\r\n\r\n  function resampleLineTo(x0, y0, lambda0, a0, b0, c0, x1, y1, lambda1, a1, b1, c1, depth, stream) {\r\n    var dx = x1 - x0,\r\n        dy = y1 - y0,\r\n        d2 = dx * dx + dy * dy;\r\n    if (d2 > 4 * delta2 && depth--) {\r\n      var a = a0 + a1,\r\n          b = b0 + b1,\r\n          c = c0 + c1,\r\n          m = sqrt(a * a + b * b + c * c),\r\n          phi2 = asin(c /= m),\r\n          lambda2 = abs(abs(c) - 1) < epsilon$2 || abs(lambda0 - lambda1) < epsilon$2 ? (lambda0 + lambda1) / 2 : atan2(b, a),\r\n          p = project(lambda2, phi2),\r\n          x2 = p[0],\r\n          y2 = p[1],\r\n          dx2 = x2 - x0,\r\n          dy2 = y2 - y0,\r\n          dz = dy * dx2 - dx * dy2;\r\n      if (dz * dz / d2 > delta2 // perpendicular projected distance\r\n          || abs((dx * dx2 + dy * dy2) / d2 - 0.5) > 0.3 // midpoint close to an end\r\n          || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) { // angular distance\r\n        resampleLineTo(x0, y0, lambda0, a0, b0, c0, x2, y2, lambda2, a /= m, b /= m, c, depth, stream);\r\n        stream.point(x2, y2);\r\n        resampleLineTo(x2, y2, lambda2, a, b, c, x1, y1, lambda1, a1, b1, c1, depth, stream);\r\n      }\r\n    }\r\n  }\r\n  return function(stream) {\r\n    var lambda00, x00, y00, a00, b00, c00, // first point\r\n        lambda0, x0, y0, a0, b0, c0; // previous point\r\n\r\n    var resampleStream = {\r\n      point: point,\r\n      lineStart: lineStart,\r\n      lineEnd: lineEnd,\r\n      polygonStart: function() { stream.polygonStart(); resampleStream.lineStart = ringStart; },\r\n      polygonEnd: function() { stream.polygonEnd(); resampleStream.lineStart = lineStart; }\r\n    };\r\n\r\n    function point(x, y) {\r\n      x = project(x, y);\r\n      stream.point(x[0], x[1]);\r\n    }\r\n\r\n    function lineStart() {\r\n      x0 = NaN;\r\n      resampleStream.point = linePoint;\r\n      stream.lineStart();\r\n    }\r\n\r\n    function linePoint(lambda, phi) {\r\n      var c = cartesian([lambda, phi]), p = project(lambda, phi);\r\n      resampleLineTo(x0, y0, lambda0, a0, b0, c0, x0 = p[0], y0 = p[1], lambda0 = lambda, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);\r\n      stream.point(x0, y0);\r\n    }\r\n\r\n    function lineEnd() {\r\n      resampleStream.point = point;\r\n      stream.lineEnd();\r\n    }\r\n\r\n    function ringStart() {\r\n      lineStart();\r\n      resampleStream.point = ringPoint;\r\n      resampleStream.lineEnd = ringEnd;\r\n    }\r\n\r\n    function ringPoint(lambda, phi) {\r\n      linePoint(lambda00 = lambda, phi), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;\r\n      resampleStream.point = linePoint;\r\n    }\r\n\r\n    function ringEnd() {\r\n      resampleLineTo(x0, y0, lambda0, a0, b0, c0, x00, y00, lambda00, a00, b00, c00, maxDepth, stream);\r\n      resampleStream.lineEnd = lineEnd;\r\n      lineEnd();\r\n    }\r\n\r\n    return resampleStream;\r\n  };\r\n}\r\n\r\nvar transformRadians = transformer({\r\n  point: function(x, y) {\r\n    this.stream.point(x * radians, y * radians);\r\n  }\r\n});\r\n\r\nfunction transformRotate(rotate) {\r\n  return transformer({\r\n    point: function(x, y) {\r\n      var r = rotate(x, y);\r\n      return this.stream.point(r[0], r[1]);\r\n    }\r\n  });\r\n}\r\n\r\nfunction scaleTranslate(k, dx, dy) {\r\n  function transform(x, y) {\r\n    return [dx + k * x, dy - k * y];\r\n  }\r\n  transform.invert = function(x, y) {\r\n    return [(x - dx) / k, (dy - y) / k];\r\n  };\r\n  return transform;\r\n}\r\n\r\nfunction scaleTranslateRotate(k, dx, dy, alpha) {\r\n  var cosAlpha = cos$1(alpha),\r\n      sinAlpha = sin$1(alpha),\r\n      a = cosAlpha * k,\r\n      b = sinAlpha * k,\r\n      ai = cosAlpha / k,\r\n      bi = sinAlpha / k,\r\n      ci = (sinAlpha * dy - cosAlpha * dx) / k,\r\n      fi = (sinAlpha * dx + cosAlpha * dy) / k;\r\n  function transform(x, y) {\r\n    return [a * x - b * y + dx, dy - b * x - a * y];\r\n  }\r\n  transform.invert = function(x, y) {\r\n    return [ai * x - bi * y + ci, fi - bi * x - ai * y];\r\n  };\r\n  return transform;\r\n}\r\n\r\nfunction projection(project) {\r\n  return projectionMutator(function() { return project; })();\r\n}\r\n\r\nfunction projectionMutator(projectAt) {\r\n  var project,\r\n      k = 150, // scale\r\n      x = 480, y = 250, // translate\r\n      lambda = 0, phi = 0, // center\r\n      deltaLambda = 0, deltaPhi = 0, deltaGamma = 0, rotate, // pre-rotate\r\n      alpha = 0, // post-rotate\r\n      theta = null, preclip = clipAntimeridian, // pre-clip angle\r\n      x0 = null, y0, x1, y1, postclip = identity$4, // post-clip extent\r\n      delta2 = 0.5, // precision\r\n      projectResample,\r\n      projectTransform,\r\n      projectRotateTransform,\r\n      cache,\r\n      cacheStream;\r\n\r\n  function projection(point) {\r\n    return projectRotateTransform(point[0] * radians, point[1] * radians);\r\n  }\r\n\r\n  function invert(point) {\r\n    point = projectRotateTransform.invert(point[0], point[1]);\r\n    return point && [point[0] * degrees$1, point[1] * degrees$1];\r\n  }\r\n\r\n  projection.stream = function(stream) {\r\n    return cache && cacheStream === stream ? cache : cache = transformRadians(transformRotate(rotate)(preclip(projectResample(postclip(cacheStream = stream)))));\r\n  };\r\n\r\n  projection.preclip = function(_) {\r\n    return arguments.length ? (preclip = _, theta = undefined, reset()) : preclip;\r\n  };\r\n\r\n  projection.postclip = function(_) {\r\n    return arguments.length ? (postclip = _, x0 = y0 = x1 = y1 = null, reset()) : postclip;\r\n  };\r\n\r\n  projection.clipAngle = function(_) {\r\n    return arguments.length ? (preclip = +_ ? clipCircle(theta = _ * radians) : (theta = null, clipAntimeridian), reset()) : theta * degrees$1;\r\n  };\r\n\r\n  projection.clipExtent = function(_) {\r\n    return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, identity$4) : clipRectangle(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];\r\n  };\r\n\r\n  projection.scale = function(_) {\r\n    return arguments.length ? (k = +_, recenter()) : k;\r\n  };\r\n\r\n  projection.translate = function(_) {\r\n    return arguments.length ? (x = +_[0], y = +_[1], recenter()) : [x, y];\r\n  };\r\n\r\n  projection.center = function(_) {\r\n    return arguments.length ? (lambda = _[0] % 360 * radians, phi = _[1] % 360 * radians, recenter()) : [lambda * degrees$1, phi * degrees$1];\r\n  };\r\n\r\n  projection.rotate = function(_) {\r\n    return arguments.length ? (deltaLambda = _[0] % 360 * radians, deltaPhi = _[1] % 360 * radians, deltaGamma = _.length > 2 ? _[2] % 360 * radians : 0, recenter()) : [deltaLambda * degrees$1, deltaPhi * degrees$1, deltaGamma * degrees$1];\r\n  };\r\n\r\n  projection.angle = function(_) {\r\n    return arguments.length ? (alpha = _ % 360 * radians, recenter()) : alpha * degrees$1;\r\n  };\r\n\r\n  projection.precision = function(_) {\r\n    return arguments.length ? (projectResample = resample(projectTransform, delta2 = _ * _), reset()) : sqrt(delta2);\r\n  };\r\n\r\n  projection.fitExtent = function(extent, object) {\r\n    return fitExtent(projection, extent, object);\r\n  };\r\n\r\n  projection.fitSize = function(size, object) {\r\n    return fitSize(projection, size, object);\r\n  };\r\n\r\n  projection.fitWidth = function(width, object) {\r\n    return fitWidth(projection, width, object);\r\n  };\r\n\r\n  projection.fitHeight = function(height, object) {\r\n    return fitHeight(projection, height, object);\r\n  };\r\n\r\n  function recenter() {\r\n    var center = scaleTranslateRotate(k, 0, 0, alpha).apply(null, project(lambda, phi)),\r\n        transform = (alpha ? scaleTranslateRotate : scaleTranslate)(k, x - center[0], y - center[1], alpha);\r\n    rotate = rotateRadians(deltaLambda, deltaPhi, deltaGamma);\r\n    projectTransform = compose(project, transform);\r\n    projectRotateTransform = compose(rotate, projectTransform);\r\n    projectResample = resample(projectTransform, delta2);\r\n    return reset();\r\n  }\r\n\r\n  function reset() {\r\n    cache = cacheStream = null;\r\n    return projection;\r\n  }\r\n\r\n  return function() {\r\n    project = projectAt.apply(this, arguments);\r\n    projection.invert = project.invert && invert;\r\n    return recenter();\r\n  };\r\n}\r\n\r\nfunction conicProjection(projectAt) {\r\n  var phi0 = 0,\r\n      phi1 = pi$3 / 3,\r\n      m = projectionMutator(projectAt),\r\n      p = m(phi0, phi1);\r\n\r\n  p.parallels = function(_) {\r\n    return arguments.length ? m(phi0 = _[0] * radians, phi1 = _[1] * radians) : [phi0 * degrees$1, phi1 * degrees$1];\r\n  };\r\n\r\n  return p;\r\n}\r\n\r\nfunction cylindricalEqualAreaRaw(phi0) {\r\n  var cosPhi0 = cos$1(phi0);\r\n\r\n  function forward(lambda, phi) {\r\n    return [lambda * cosPhi0, sin$1(phi) / cosPhi0];\r\n  }\r\n\r\n  forward.invert = function(x, y) {\r\n    return [x / cosPhi0, asin(y * cosPhi0)];\r\n  };\r\n\r\n  return forward;\r\n}\r\n\r\nfunction conicEqualAreaRaw(y0, y1) {\r\n  var sy0 = sin$1(y0), n = (sy0 + sin$1(y1)) / 2;\r\n\r\n  // Are the parallels symmetrical around the Equator?\r\n  if (abs(n) < epsilon$2) return cylindricalEqualAreaRaw(y0);\r\n\r\n  var c = 1 + sy0 * (2 * n - sy0), r0 = sqrt(c) / n;\r\n\r\n  function project(x, y) {\r\n    var r = sqrt(c - 2 * n * sin$1(y)) / n;\r\n    return [r * sin$1(x *= n), r0 - r * cos$1(x)];\r\n  }\r\n\r\n  project.invert = function(x, y) {\r\n    var r0y = r0 - y;\r\n    return [atan2(x, abs(r0y)) / n * sign(r0y), asin((c - (x * x + r0y * r0y) * n * n) / (2 * n))];\r\n  };\r\n\r\n  return project;\r\n}\r\n\r\nfunction conicEqualArea() {\r\n  return conicProjection(conicEqualAreaRaw)\r\n      .scale(155.424)\r\n      .center([0, 33.6442]);\r\n}\r\n\r\nfunction albers() {\r\n  return conicEqualArea()\r\n      .parallels([29.5, 45.5])\r\n      .scale(1070)\r\n      .translate([480, 250])\r\n      .rotate([96, 0])\r\n      .center([-0.6, 38.7]);\r\n}\r\n\r\n// The projections must have mutually exclusive clip regions on the sphere,\r\n// as this will avoid emitting interleaving lines and polygons.\r\nfunction multiplex(streams) {\r\n  var n = streams.length;\r\n  return {\r\n    point: function(x, y) { var i = -1; while (++i < n) streams[i].point(x, y); },\r\n    sphere: function() { var i = -1; while (++i < n) streams[i].sphere(); },\r\n    lineStart: function() { var i = -1; while (++i < n) streams[i].lineStart(); },\r\n    lineEnd: function() { var i = -1; while (++i < n) streams[i].lineEnd(); },\r\n    polygonStart: function() { var i = -1; while (++i < n) streams[i].polygonStart(); },\r\n    polygonEnd: function() { var i = -1; while (++i < n) streams[i].polygonEnd(); }\r\n  };\r\n}\r\n\r\n// A composite projection for the United States, configured by default for\r\n// 960×500. The projection also works quite well at 960×600 if you change the\r\n// scale to 1285 and adjust the translate accordingly. The set of standard\r\n// parallels for each region comes from USGS, which is published here:\r\n// http://egsc.usgs.gov/isb/pubs/MapProjections/projections.html#albers\r\nfunction albersUsa() {\r\n  var cache,\r\n      cacheStream,\r\n      lower48 = albers(), lower48Point,\r\n      alaska = conicEqualArea().rotate([154, 0]).center([-2, 58.5]).parallels([55, 65]), alaskaPoint, // EPSG:3338\r\n      hawaii = conicEqualArea().rotate([157, 0]).center([-3, 19.9]).parallels([8, 18]), hawaiiPoint, // ESRI:102007\r\n      point, pointStream = {point: function(x, y) { point = [x, y]; }};\r\n\r\n  function albersUsa(coordinates) {\r\n    var x = coordinates[0], y = coordinates[1];\r\n    return point = null,\r\n        (lower48Point.point(x, y), point)\r\n        || (alaskaPoint.point(x, y), point)\r\n        || (hawaiiPoint.point(x, y), point);\r\n  }\r\n\r\n  albersUsa.invert = function(coordinates) {\r\n    var k = lower48.scale(),\r\n        t = lower48.translate(),\r\n        x = (coordinates[0] - t[0]) / k,\r\n        y = (coordinates[1] - t[1]) / k;\r\n    return (y >= 0.120 && y < 0.234 && x >= -0.425 && x < -0.214 ? alaska\r\n        : y >= 0.166 && y < 0.234 && x >= -0.214 && x < -0.115 ? hawaii\r\n        : lower48).invert(coordinates);\r\n  };\r\n\r\n  albersUsa.stream = function(stream) {\r\n    return cache && cacheStream === stream ? cache : cache = multiplex([lower48.stream(cacheStream = stream), alaska.stream(stream), hawaii.stream(stream)]);\r\n  };\r\n\r\n  albersUsa.precision = function(_) {\r\n    if (!arguments.length) return lower48.precision();\r\n    lower48.precision(_), alaska.precision(_), hawaii.precision(_);\r\n    return reset();\r\n  };\r\n\r\n  albersUsa.scale = function(_) {\r\n    if (!arguments.length) return lower48.scale();\r\n    lower48.scale(_), alaska.scale(_ * 0.35), hawaii.scale(_);\r\n    return albersUsa.translate(lower48.translate());\r\n  };\r\n\r\n  albersUsa.translate = function(_) {\r\n    if (!arguments.length) return lower48.translate();\r\n    var k = lower48.scale(), x = +_[0], y = +_[1];\r\n\r\n    lower48Point = lower48\r\n        .translate(_)\r\n        .clipExtent([[x - 0.455 * k, y - 0.238 * k], [x + 0.455 * k, y + 0.238 * k]])\r\n        .stream(pointStream);\r\n\r\n    alaskaPoint = alaska\r\n        .translate([x - 0.307 * k, y + 0.201 * k])\r\n        .clipExtent([[x - 0.425 * k + epsilon$2, y + 0.120 * k + epsilon$2], [x - 0.214 * k - epsilon$2, y + 0.234 * k - epsilon$2]])\r\n        .stream(pointStream);\r\n\r\n    hawaiiPoint = hawaii\r\n        .translate([x - 0.205 * k, y + 0.212 * k])\r\n        .clipExtent([[x - 0.214 * k + epsilon$2, y + 0.166 * k + epsilon$2], [x - 0.115 * k - epsilon$2, y + 0.234 * k - epsilon$2]])\r\n        .stream(pointStream);\r\n\r\n    return reset();\r\n  };\r\n\r\n  albersUsa.fitExtent = function(extent, object) {\r\n    return fitExtent(albersUsa, extent, object);\r\n  };\r\n\r\n  albersUsa.fitSize = function(size, object) {\r\n    return fitSize(albersUsa, size, object);\r\n  };\r\n\r\n  albersUsa.fitWidth = function(width, object) {\r\n    return fitWidth(albersUsa, width, object);\r\n  };\r\n\r\n  albersUsa.fitHeight = function(height, object) {\r\n    return fitHeight(albersUsa, height, object);\r\n  };\r\n\r\n  function reset() {\r\n    cache = cacheStream = null;\r\n    return albersUsa;\r\n  }\r\n\r\n  return albersUsa.scale(1070);\r\n}\r\n\r\nfunction azimuthalRaw(scale) {\r\n  return function(x, y) {\r\n    var cx = cos$1(x),\r\n        cy = cos$1(y),\r\n        k = scale(cx * cy);\r\n    return [\r\n      k * cy * sin$1(x),\r\n      k * sin$1(y)\r\n    ];\r\n  }\r\n}\r\n\r\nfunction azimuthalInvert(angle) {\r\n  return function(x, y) {\r\n    var z = sqrt(x * x + y * y),\r\n        c = angle(z),\r\n        sc = sin$1(c),\r\n        cc = cos$1(c);\r\n    return [\r\n      atan2(x * sc, z * cc),\r\n      asin(z && y * sc / z)\r\n    ];\r\n  }\r\n}\r\n\r\nvar azimuthalEqualAreaRaw = azimuthalRaw(function(cxcy) {\r\n  return sqrt(2 / (1 + cxcy));\r\n});\r\n\r\nazimuthalEqualAreaRaw.invert = azimuthalInvert(function(z) {\r\n  return 2 * asin(z / 2);\r\n});\r\n\r\nfunction azimuthalEqualArea() {\r\n  return projection(azimuthalEqualAreaRaw)\r\n      .scale(124.75)\r\n      .clipAngle(180 - 1e-3);\r\n}\r\n\r\nvar azimuthalEquidistantRaw = azimuthalRaw(function(c) {\r\n  return (c = acos(c)) && c / sin$1(c);\r\n});\r\n\r\nazimuthalEquidistantRaw.invert = azimuthalInvert(function(z) {\r\n  return z;\r\n});\r\n\r\nfunction azimuthalEquidistant() {\r\n  return projection(azimuthalEquidistantRaw)\r\n      .scale(79.4188)\r\n      .clipAngle(180 - 1e-3);\r\n}\r\n\r\nfunction mercatorRaw(lambda, phi) {\r\n  return [lambda, log(tan((halfPi$2 + phi) / 2))];\r\n}\r\n\r\nmercatorRaw.invert = function(x, y) {\r\n  return [x, 2 * atan(exp(y)) - halfPi$2];\r\n};\r\n\r\nfunction mercator() {\r\n  return mercatorProjection(mercatorRaw)\r\n      .scale(961 / tau$3);\r\n}\r\n\r\nfunction mercatorProjection(project) {\r\n  var m = projection(project),\r\n      center = m.center,\r\n      scale = m.scale,\r\n      translate = m.translate,\r\n      clipExtent = m.clipExtent,\r\n      x0 = null, y0, x1, y1; // clip extent\r\n\r\n  m.scale = function(_) {\r\n    return arguments.length ? (scale(_), reclip()) : scale();\r\n  };\r\n\r\n  m.translate = function(_) {\r\n    return arguments.length ? (translate(_), reclip()) : translate();\r\n  };\r\n\r\n  m.center = function(_) {\r\n    return arguments.length ? (center(_), reclip()) : center();\r\n  };\r\n\r\n  m.clipExtent = function(_) {\r\n    return arguments.length ? ((_ == null ? x0 = y0 = x1 = y1 = null : (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1])), reclip()) : x0 == null ? null : [[x0, y0], [x1, y1]];\r\n  };\r\n\r\n  function reclip() {\r\n    var k = pi$3 * scale(),\r\n        t = m(rotation(m.rotate()).invert([0, 0]));\r\n    return clipExtent(x0 == null\r\n        ? [[t[0] - k, t[1] - k], [t[0] + k, t[1] + k]] : project === mercatorRaw\r\n        ? [[Math.max(t[0] - k, x0), y0], [Math.min(t[0] + k, x1), y1]]\r\n        : [[x0, Math.max(t[1] - k, y0)], [x1, Math.min(t[1] + k, y1)]]);\r\n  }\r\n\r\n  return reclip();\r\n}\r\n\r\nfunction tany(y) {\r\n  return tan((halfPi$2 + y) / 2);\r\n}\r\n\r\nfunction conicConformalRaw(y0, y1) {\r\n  var cy0 = cos$1(y0),\r\n      n = y0 === y1 ? sin$1(y0) : log(cy0 / cos$1(y1)) / log(tany(y1) / tany(y0)),\r\n      f = cy0 * pow(tany(y0), n) / n;\r\n\r\n  if (!n) return mercatorRaw;\r\n\r\n  function project(x, y) {\r\n    if (f > 0) { if (y < -halfPi$2 + epsilon$2) y = -halfPi$2 + epsilon$2; }\r\n    else { if (y > halfPi$2 - epsilon$2) y = halfPi$2 - epsilon$2; }\r\n    var r = f / pow(tany(y), n);\r\n    return [r * sin$1(n * x), f - r * cos$1(n * x)];\r\n  }\r\n\r\n  project.invert = function(x, y) {\r\n    var fy = f - y, r = sign(n) * sqrt(x * x + fy * fy);\r\n    return [atan2(x, abs(fy)) / n * sign(fy), 2 * atan(pow(f / r, 1 / n)) - halfPi$2];\r\n  };\r\n\r\n  return project;\r\n}\r\n\r\nfunction conicConformal() {\r\n  return conicProjection(conicConformalRaw)\r\n      .scale(109.5)\r\n      .parallels([30, 30]);\r\n}\r\n\r\nfunction equirectangularRaw(lambda, phi) {\r\n  return [lambda, phi];\r\n}\r\n\r\nequirectangularRaw.invert = equirectangularRaw;\r\n\r\nfunction equirectangular() {\r\n  return projection(equirectangularRaw)\r\n      .scale(152.63);\r\n}\r\n\r\nfunction conicEquidistantRaw(y0, y1) {\r\n  var cy0 = cos$1(y0),\r\n      n = y0 === y1 ? sin$1(y0) : (cy0 - cos$1(y1)) / (y1 - y0),\r\n      g = cy0 / n + y0;\r\n\r\n  if (abs(n) < epsilon$2) return equirectangularRaw;\r\n\r\n  function project(x, y) {\r\n    var gy = g - y, nx = n * x;\r\n    return [gy * sin$1(nx), g - gy * cos$1(nx)];\r\n  }\r\n\r\n  project.invert = function(x, y) {\r\n    var gy = g - y;\r\n    return [atan2(x, abs(gy)) / n * sign(gy), g - sign(n) * sqrt(x * x + gy * gy)];\r\n  };\r\n\r\n  return project;\r\n}\r\n\r\nfunction conicEquidistant() {\r\n  return conicProjection(conicEquidistantRaw)\r\n      .scale(131.154)\r\n      .center([0, 13.9389]);\r\n}\r\n\r\nvar A1 = 1.340264,\r\n    A2 = -0.081106,\r\n    A3 = 0.000893,\r\n    A4 = 0.003796,\r\n    M = sqrt(3) / 2,\r\n    iterations = 12;\r\n\r\nfunction equalEarthRaw(lambda, phi) {\r\n  var l = asin(M * sin$1(phi)), l2 = l * l, l6 = l2 * l2 * l2;\r\n  return [\r\n    lambda * cos$1(l) / (M * (A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2))),\r\n    l * (A1 + A2 * l2 + l6 * (A3 + A4 * l2))\r\n  ];\r\n}\r\n\r\nequalEarthRaw.invert = function(x, y) {\r\n  var l = y, l2 = l * l, l6 = l2 * l2 * l2;\r\n  for (var i = 0, delta, fy, fpy; i < iterations; ++i) {\r\n    fy = l * (A1 + A2 * l2 + l6 * (A3 + A4 * l2)) - y;\r\n    fpy = A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2);\r\n    l -= delta = fy / fpy, l2 = l * l, l6 = l2 * l2 * l2;\r\n    if (abs(delta) < epsilon2$1) break;\r\n  }\r\n  return [\r\n    M * x * (A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2)) / cos$1(l),\r\n    asin(sin$1(l) / M)\r\n  ];\r\n};\r\n\r\nfunction equalEarth() {\r\n  return projection(equalEarthRaw)\r\n      .scale(177.158);\r\n}\r\n\r\nfunction gnomonicRaw(x, y) {\r\n  var cy = cos$1(y), k = cos$1(x) * cy;\r\n  return [cy * sin$1(x) / k, sin$1(y) / k];\r\n}\r\n\r\ngnomonicRaw.invert = azimuthalInvert(atan);\r\n\r\nfunction gnomonic() {\r\n  return projection(gnomonicRaw)\r\n      .scale(144.049)\r\n      .clipAngle(60);\r\n}\r\n\r\nfunction scaleTranslate$1(kx, ky, tx, ty) {\r\n  return kx === 1 && ky === 1 && tx === 0 && ty === 0 ? identity$4 : transformer({\r\n    point: function(x, y) {\r\n      this.stream.point(x * kx + tx, y * ky + ty);\r\n    }\r\n  });\r\n}\r\n\r\nfunction identity$5() {\r\n  var k = 1, tx = 0, ty = 0, sx = 1, sy = 1, transform = identity$4, // scale, translate and reflect\r\n      x0 = null, y0, x1, y1, // clip extent\r\n      postclip = identity$4,\r\n      cache,\r\n      cacheStream,\r\n      projection;\r\n\r\n  function reset() {\r\n    cache = cacheStream = null;\r\n    return projection;\r\n  }\r\n\r\n  return projection = {\r\n    stream: function(stream) {\r\n      return cache && cacheStream === stream ? cache : cache = transform(postclip(cacheStream = stream));\r\n    },\r\n    postclip: function(_) {\r\n      return arguments.length ? (postclip = _, x0 = y0 = x1 = y1 = null, reset()) : postclip;\r\n    },\r\n    clipExtent: function(_) {\r\n      return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, identity$4) : clipRectangle(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];\r\n    },\r\n    scale: function(_) {\r\n      return arguments.length ? (transform = scaleTranslate$1((k = +_) * sx, k * sy, tx, ty), reset()) : k;\r\n    },\r\n    translate: function(_) {\r\n      return arguments.length ? (transform = scaleTranslate$1(k * sx, k * sy, tx = +_[0], ty = +_[1]), reset()) : [tx, ty];\r\n    },\r\n    reflectX: function(_) {\r\n      return arguments.length ? (transform = scaleTranslate$1(k * (sx = _ ? -1 : 1), k * sy, tx, ty), reset()) : sx < 0;\r\n    },\r\n    reflectY: function(_) {\r\n      return arguments.length ? (transform = scaleTranslate$1(k * sx, k * (sy = _ ? -1 : 1), tx, ty), reset()) : sy < 0;\r\n    },\r\n    fitExtent: function(extent, object) {\r\n      return fitExtent(projection, extent, object);\r\n    },\r\n    fitSize: function(size, object) {\r\n      return fitSize(projection, size, object);\r\n    },\r\n    fitWidth: function(width, object) {\r\n      return fitWidth(projection, width, object);\r\n    },\r\n    fitHeight: function(height, object) {\r\n      return fitHeight(projection, height, object);\r\n    }\r\n  };\r\n}\r\n\r\nfunction naturalEarth1Raw(lambda, phi) {\r\n  var phi2 = phi * phi, phi4 = phi2 * phi2;\r\n  return [\r\n    lambda * (0.8707 - 0.131979 * phi2 + phi4 * (-0.013791 + phi4 * (0.003971 * phi2 - 0.001529 * phi4))),\r\n    phi * (1.007226 + phi2 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi2 - 0.005916 * phi4)))\r\n  ];\r\n}\r\n\r\nnaturalEarth1Raw.invert = function(x, y) {\r\n  var phi = y, i = 25, delta;\r\n  do {\r\n    var phi2 = phi * phi, phi4 = phi2 * phi2;\r\n    phi -= delta = (phi * (1.007226 + phi2 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi2 - 0.005916 * phi4))) - y) /\r\n        (1.007226 + phi2 * (0.015085 * 3 + phi4 * (-0.044475 * 7 + 0.028874 * 9 * phi2 - 0.005916 * 11 * phi4)));\r\n  } while (abs(delta) > epsilon$2 && --i > 0);\r\n  return [\r\n    x / (0.8707 + (phi2 = phi * phi) * (-0.131979 + phi2 * (-0.013791 + phi2 * phi2 * phi2 * (0.003971 - 0.001529 * phi2)))),\r\n    phi\r\n  ];\r\n};\r\n\r\nfunction naturalEarth1() {\r\n  return projection(naturalEarth1Raw)\r\n      .scale(175.295);\r\n}\r\n\r\nfunction orthographicRaw(x, y) {\r\n  return [cos$1(y) * sin$1(x), sin$1(y)];\r\n}\r\n\r\northographicRaw.invert = azimuthalInvert(asin);\r\n\r\nfunction orthographic() {\r\n  return projection(orthographicRaw)\r\n      .scale(249.5)\r\n      .clipAngle(90 + epsilon$2);\r\n}\r\n\r\nfunction stereographicRaw(x, y) {\r\n  var cy = cos$1(y), k = 1 + cos$1(x) * cy;\r\n  return [cy * sin$1(x) / k, sin$1(y) / k];\r\n}\r\n\r\nstereographicRaw.invert = azimuthalInvert(function(z) {\r\n  return 2 * atan(z);\r\n});\r\n\r\nfunction stereographic() {\r\n  return projection(stereographicRaw)\r\n      .scale(250)\r\n      .clipAngle(142);\r\n}\r\n\r\nfunction transverseMercatorRaw(lambda, phi) {\r\n  return [log(tan((halfPi$2 + phi) / 2)), -lambda];\r\n}\r\n\r\ntransverseMercatorRaw.invert = function(x, y) {\r\n  return [-y, 2 * atan(exp(x)) - halfPi$2];\r\n};\r\n\r\nfunction transverseMercator() {\r\n  var m = mercatorProjection(transverseMercatorRaw),\r\n      center = m.center,\r\n      rotate = m.rotate;\r\n\r\n  m.center = function(_) {\r\n    return arguments.length ? center([-_[1], _[0]]) : (_ = center(), [_[1], -_[0]]);\r\n  };\r\n\r\n  m.rotate = function(_) {\r\n    return arguments.length ? rotate([_[0], _[1], _.length > 2 ? _[2] + 90 : 90]) : (_ = rotate(), [_[0], _[1], _[2] - 90]);\r\n  };\r\n\r\n  return rotate([0, 0, 90])\r\n      .scale(159.155);\r\n}\r\n\r\nfunction defaultSeparation(a, b) {\r\n  return a.parent === b.parent ? 1 : 2;\r\n}\r\n\r\nfunction meanX(children) {\r\n  return children.reduce(meanXReduce, 0) / children.length;\r\n}\r\n\r\nfunction meanXReduce(x, c) {\r\n  return x + c.x;\r\n}\r\n\r\nfunction maxY(children) {\r\n  return 1 + children.reduce(maxYReduce, 0);\r\n}\r\n\r\nfunction maxYReduce(y, c) {\r\n  return Math.max(y, c.y);\r\n}\r\n\r\nfunction leafLeft(node) {\r\n  var children;\r\n  while (children = node.children) node = children[0];\r\n  return node;\r\n}\r\n\r\nfunction leafRight(node) {\r\n  var children;\r\n  while (children = node.children) node = children[children.length - 1];\r\n  return node;\r\n}\r\n\r\nfunction cluster() {\r\n  var separation = defaultSeparation,\r\n      dx = 1,\r\n      dy = 1,\r\n      nodeSize = false;\r\n\r\n  function cluster(root) {\r\n    var previousNode,\r\n        x = 0;\r\n\r\n    // First walk, computing the initial x & y values.\r\n    root.eachAfter(function(node) {\r\n      var children = node.children;\r\n      if (children) {\r\n        node.x = meanX(children);\r\n        node.y = maxY(children);\r\n      } else {\r\n        node.x = previousNode ? x += separation(node, previousNode) : 0;\r\n        node.y = 0;\r\n        previousNode = node;\r\n      }\r\n    });\r\n\r\n    var left = leafLeft(root),\r\n        right = leafRight(root),\r\n        x0 = left.x - separation(left, right) / 2,\r\n        x1 = right.x + separation(right, left) / 2;\r\n\r\n    // Second walk, normalizing x & y to the desired size.\r\n    return root.eachAfter(nodeSize ? function(node) {\r\n      node.x = (node.x - root.x) * dx;\r\n      node.y = (root.y - node.y) * dy;\r\n    } : function(node) {\r\n      node.x = (node.x - x0) / (x1 - x0) * dx;\r\n      node.y = (1 - (root.y ? node.y / root.y : 1)) * dy;\r\n    });\r\n  }\r\n\r\n  cluster.separation = function(x) {\r\n    return arguments.length ? (separation = x, cluster) : separation;\r\n  };\r\n\r\n  cluster.size = function(x) {\r\n    return arguments.length ? (nodeSize = false, dx = +x[0], dy = +x[1], cluster) : (nodeSize ? null : [dx, dy]);\r\n  };\r\n\r\n  cluster.nodeSize = function(x) {\r\n    return arguments.length ? (nodeSize = true, dx = +x[0], dy = +x[1], cluster) : (nodeSize ? [dx, dy] : null);\r\n  };\r\n\r\n  return cluster;\r\n}\r\n\r\nfunction count(node) {\r\n  var sum = 0,\r\n      children = node.children,\r\n      i = children && children.length;\r\n  if (!i) sum = 1;\r\n  else while (--i >= 0) sum += children[i].value;\r\n  node.value = sum;\r\n}\r\n\r\nfunction node_count() {\r\n  return this.eachAfter(count);\r\n}\r\n\r\nfunction node_each(callback) {\r\n  var node = this, current, next = [node], children, i, n;\r\n  do {\r\n    current = next.reverse(), next = [];\r\n    while (node = current.pop()) {\r\n      callback(node), children = node.children;\r\n      if (children) for (i = 0, n = children.length; i < n; ++i) {\r\n        next.push(children[i]);\r\n      }\r\n    }\r\n  } while (next.length);\r\n  return this;\r\n}\r\n\r\nfunction node_eachBefore(callback) {\r\n  var node = this, nodes = [node], children, i;\r\n  while (node = nodes.pop()) {\r\n    callback(node), children = node.children;\r\n    if (children) for (i = children.length - 1; i >= 0; --i) {\r\n      nodes.push(children[i]);\r\n    }\r\n  }\r\n  return this;\r\n}\r\n\r\nfunction node_eachAfter(callback) {\r\n  var node = this, nodes = [node], next = [], children, i, n;\r\n  while (node = nodes.pop()) {\r\n    next.push(node), children = node.children;\r\n    if (children) for (i = 0, n = children.length; i < n; ++i) {\r\n      nodes.push(children[i]);\r\n    }\r\n  }\r\n  while (node = next.pop()) {\r\n    callback(node);\r\n  }\r\n  return this;\r\n}\r\n\r\nfunction node_sum(value) {\r\n  return this.eachAfter(function(node) {\r\n    var sum = +value(node.data) || 0,\r\n        children = node.children,\r\n        i = children && children.length;\r\n    while (--i >= 0) sum += children[i].value;\r\n    node.value = sum;\r\n  });\r\n}\r\n\r\nfunction node_sort(compare) {\r\n  return this.eachBefore(function(node) {\r\n    if (node.children) {\r\n      node.children.sort(compare);\r\n    }\r\n  });\r\n}\r\n\r\nfunction node_path(end) {\r\n  var start = this,\r\n      ancestor = leastCommonAncestor(start, end),\r\n      nodes = [start];\r\n  while (start !== ancestor) {\r\n    start = start.parent;\r\n    nodes.push(start);\r\n  }\r\n  var k = nodes.length;\r\n  while (end !== ancestor) {\r\n    nodes.splice(k, 0, end);\r\n    end = end.parent;\r\n  }\r\n  return nodes;\r\n}\r\n\r\nfunction leastCommonAncestor(a, b) {\r\n  if (a === b) return a;\r\n  var aNodes = a.ancestors(),\r\n      bNodes = b.ancestors(),\r\n      c = null;\r\n  a = aNodes.pop();\r\n  b = bNodes.pop();\r\n  while (a === b) {\r\n    c = a;\r\n    a = aNodes.pop();\r\n    b = bNodes.pop();\r\n  }\r\n  return c;\r\n}\r\n\r\nfunction node_ancestors() {\r\n  var node = this, nodes = [node];\r\n  while (node = node.parent) {\r\n    nodes.push(node);\r\n  }\r\n  return nodes;\r\n}\r\n\r\nfunction node_descendants() {\r\n  var nodes = [];\r\n  this.each(function(node) {\r\n    nodes.push(node);\r\n  });\r\n  return nodes;\r\n}\r\n\r\nfunction node_leaves() {\r\n  var leaves = [];\r\n  this.eachBefore(function(node) {\r\n    if (!node.children) {\r\n      leaves.push(node);\r\n    }\r\n  });\r\n  return leaves;\r\n}\r\n\r\nfunction node_links() {\r\n  var root = this, links = [];\r\n  root.each(function(node) {\r\n    if (node !== root) { // Don’t include the root’s parent, if any.\r\n      links.push({source: node.parent, target: node});\r\n    }\r\n  });\r\n  return links;\r\n}\r\n\r\nfunction hierarchy(data, children) {\r\n  var root = new Node(data),\r\n      valued = +data.value && (root.value = data.value),\r\n      node,\r\n      nodes = [root],\r\n      child,\r\n      childs,\r\n      i,\r\n      n;\r\n\r\n  if (children == null) children = defaultChildren;\r\n\r\n  while (node = nodes.pop()) {\r\n    if (valued) node.value = +node.data.value;\r\n    if ((childs = children(node.data)) && (n = childs.length)) {\r\n      node.children = new Array(n);\r\n      for (i = n - 1; i >= 0; --i) {\r\n        nodes.push(child = node.children[i] = new Node(childs[i]));\r\n        child.parent = node;\r\n        child.depth = node.depth + 1;\r\n      }\r\n    }\r\n  }\r\n\r\n  return root.eachBefore(computeHeight);\r\n}\r\n\r\nfunction node_copy() {\r\n  return hierarchy(this).eachBefore(copyData);\r\n}\r\n\r\nfunction defaultChildren(d) {\r\n  return d.children;\r\n}\r\n\r\nfunction copyData(node) {\r\n  node.data = node.data.data;\r\n}\r\n\r\nfunction computeHeight(node) {\r\n  var height = 0;\r\n  do node.height = height;\r\n  while ((node = node.parent) && (node.height < ++height));\r\n}\r\n\r\nfunction Node(data) {\r\n  this.data = data;\r\n  this.depth =\r\n  this.height = 0;\r\n  this.parent = null;\r\n}\r\n\r\nNode.prototype = hierarchy.prototype = {\r\n  constructor: Node,\r\n  count: node_count,\r\n  each: node_each,\r\n  eachAfter: node_eachAfter,\r\n  eachBefore: node_eachBefore,\r\n  sum: node_sum,\r\n  sort: node_sort,\r\n  path: node_path,\r\n  ancestors: node_ancestors,\r\n  descendants: node_descendants,\r\n  leaves: node_leaves,\r\n  links: node_links,\r\n  copy: node_copy\r\n};\r\n\r\nvar slice$4 = Array.prototype.slice;\r\n\r\nfunction shuffle$1(array) {\r\n  var m = array.length,\r\n      t,\r\n      i;\r\n\r\n  while (m) {\r\n    i = Math.random() * m-- | 0;\r\n    t = array[m];\r\n    array[m] = array[i];\r\n    array[i] = t;\r\n  }\r\n\r\n  return array;\r\n}\r\n\r\nfunction enclose(circles) {\r\n  var i = 0, n = (circles = shuffle$1(slice$4.call(circles))).length, B = [], p, e;\r\n\r\n  while (i < n) {\r\n    p = circles[i];\r\n    if (e && enclosesWeak(e, p)) ++i;\r\n    else e = encloseBasis(B = extendBasis(B, p)), i = 0;\r\n  }\r\n\r\n  return e;\r\n}\r\n\r\nfunction extendBasis(B, p) {\r\n  var i, j;\r\n\r\n  if (enclosesWeakAll(p, B)) return [p];\r\n\r\n  // If we get here then B must have at least one element.\r\n  for (i = 0; i < B.length; ++i) {\r\n    if (enclosesNot(p, B[i])\r\n        && enclosesWeakAll(encloseBasis2(B[i], p), B)) {\r\n      return [B[i], p];\r\n    }\r\n  }\r\n\r\n  // If we get here then B must have at least two elements.\r\n  for (i = 0; i < B.length - 1; ++i) {\r\n    for (j = i + 1; j < B.length; ++j) {\r\n      if (enclosesNot(encloseBasis2(B[i], B[j]), p)\r\n          && enclosesNot(encloseBasis2(B[i], p), B[j])\r\n          && enclosesNot(encloseBasis2(B[j], p), B[i])\r\n          && enclosesWeakAll(encloseBasis3(B[i], B[j], p), B)) {\r\n        return [B[i], B[j], p];\r\n      }\r\n    }\r\n  }\r\n\r\n  // If we get here then something is very wrong.\r\n  throw new Error;\r\n}\r\n\r\nfunction enclosesNot(a, b) {\r\n  var dr = a.r - b.r, dx = b.x - a.x, dy = b.y - a.y;\r\n  return dr < 0 || dr * dr < dx * dx + dy * dy;\r\n}\r\n\r\nfunction enclosesWeak(a, b) {\r\n  var dr = a.r - b.r + 1e-6, dx = b.x - a.x, dy = b.y - a.y;\r\n  return dr > 0 && dr * dr > dx * dx + dy * dy;\r\n}\r\n\r\nfunction enclosesWeakAll(a, B) {\r\n  for (var i = 0; i < B.length; ++i) {\r\n    if (!enclosesWeak(a, B[i])) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\nfunction encloseBasis(B) {\r\n  switch (B.length) {\r\n    case 1: return encloseBasis1(B[0]);\r\n    case 2: return encloseBasis2(B[0], B[1]);\r\n    case 3: return encloseBasis3(B[0], B[1], B[2]);\r\n  }\r\n}\r\n\r\nfunction encloseBasis1(a) {\r\n  return {\r\n    x: a.x,\r\n    y: a.y,\r\n    r: a.r\r\n  };\r\n}\r\n\r\nfunction encloseBasis2(a, b) {\r\n  var x1 = a.x, y1 = a.y, r1 = a.r,\r\n      x2 = b.x, y2 = b.y, r2 = b.r,\r\n      x21 = x2 - x1, y21 = y2 - y1, r21 = r2 - r1,\r\n      l = Math.sqrt(x21 * x21 + y21 * y21);\r\n  return {\r\n    x: (x1 + x2 + x21 / l * r21) / 2,\r\n    y: (y1 + y2 + y21 / l * r21) / 2,\r\n    r: (l + r1 + r2) / 2\r\n  };\r\n}\r\n\r\nfunction encloseBasis3(a, b, c) {\r\n  var x1 = a.x, y1 = a.y, r1 = a.r,\r\n      x2 = b.x, y2 = b.y, r2 = b.r,\r\n      x3 = c.x, y3 = c.y, r3 = c.r,\r\n      a2 = x1 - x2,\r\n      a3 = x1 - x3,\r\n      b2 = y1 - y2,\r\n      b3 = y1 - y3,\r\n      c2 = r2 - r1,\r\n      c3 = r3 - r1,\r\n      d1 = x1 * x1 + y1 * y1 - r1 * r1,\r\n      d2 = d1 - x2 * x2 - y2 * y2 + r2 * r2,\r\n      d3 = d1 - x3 * x3 - y3 * y3 + r3 * r3,\r\n      ab = a3 * b2 - a2 * b3,\r\n      xa = (b2 * d3 - b3 * d2) / (ab * 2) - x1,\r\n      xb = (b3 * c2 - b2 * c3) / ab,\r\n      ya = (a3 * d2 - a2 * d3) / (ab * 2) - y1,\r\n      yb = (a2 * c3 - a3 * c2) / ab,\r\n      A = xb * xb + yb * yb - 1,\r\n      B = 2 * (r1 + xa * xb + ya * yb),\r\n      C = xa * xa + ya * ya - r1 * r1,\r\n      r = -(A ? (B + Math.sqrt(B * B - 4 * A * C)) / (2 * A) : C / B);\r\n  return {\r\n    x: x1 + xa + xb * r,\r\n    y: y1 + ya + yb * r,\r\n    r: r\r\n  };\r\n}\r\n\r\nfunction place(b, a, c) {\r\n  var dx = b.x - a.x, x, a2,\r\n      dy = b.y - a.y, y, b2,\r\n      d2 = dx * dx + dy * dy;\r\n  if (d2) {\r\n    a2 = a.r + c.r, a2 *= a2;\r\n    b2 = b.r + c.r, b2 *= b2;\r\n    if (a2 > b2) {\r\n      x = (d2 + b2 - a2) / (2 * d2);\r\n      y = Math.sqrt(Math.max(0, b2 / d2 - x * x));\r\n      c.x = b.x - x * dx - y * dy;\r\n      c.y = b.y - x * dy + y * dx;\r\n    } else {\r\n      x = (d2 + a2 - b2) / (2 * d2);\r\n      y = Math.sqrt(Math.max(0, a2 / d2 - x * x));\r\n      c.x = a.x + x * dx - y * dy;\r\n      c.y = a.y + x * dy + y * dx;\r\n    }\r\n  } else {\r\n    c.x = a.x + c.r;\r\n    c.y = a.y;\r\n  }\r\n}\r\n\r\nfunction intersects(a, b) {\r\n  var dr = a.r + b.r - 1e-6, dx = b.x - a.x, dy = b.y - a.y;\r\n  return dr > 0 && dr * dr > dx * dx + dy * dy;\r\n}\r\n\r\nfunction score(node) {\r\n  var a = node._,\r\n      b = node.next._,\r\n      ab = a.r + b.r,\r\n      dx = (a.x * b.r + b.x * a.r) / ab,\r\n      dy = (a.y * b.r + b.y * a.r) / ab;\r\n  return dx * dx + dy * dy;\r\n}\r\n\r\nfunction Node$1(circle) {\r\n  this._ = circle;\r\n  this.next = null;\r\n  this.previous = null;\r\n}\r\n\r\nfunction packEnclose(circles) {\r\n  if (!(n = circles.length)) return 0;\r\n\r\n  var a, b, c, n, aa, ca, i, j, k, sj, sk;\r\n\r\n  // Place the first circle.\r\n  a = circles[0], a.x = 0, a.y = 0;\r\n  if (!(n > 1)) return a.r;\r\n\r\n  // Place the second circle.\r\n  b = circles[1], a.x = -b.r, b.x = a.r, b.y = 0;\r\n  if (!(n > 2)) return a.r + b.r;\r\n\r\n  // Place the third circle.\r\n  place(b, a, c = circles[2]);\r\n\r\n  // Initialize the front-chain using the first three circles a, b and c.\r\n  a = new Node$1(a), b = new Node$1(b), c = new Node$1(c);\r\n  a.next = c.previous = b;\r\n  b.next = a.previous = c;\r\n  c.next = b.previous = a;\r\n\r\n  // Attempt to place each remaining circle…\r\n  pack: for (i = 3; i < n; ++i) {\r\n    place(a._, b._, c = circles[i]), c = new Node$1(c);\r\n\r\n    // Find the closest intersecting circle on the front-chain, if any.\r\n    // “Closeness” is determined by linear distance along the front-chain.\r\n    // “Ahead” or “behind” is likewise determined by linear distance.\r\n    j = b.next, k = a.previous, sj = b._.r, sk = a._.r;\r\n    do {\r\n      if (sj <= sk) {\r\n        if (intersects(j._, c._)) {\r\n          b = j, a.next = b, b.previous = a, --i;\r\n          continue pack;\r\n        }\r\n        sj += j._.r, j = j.next;\r\n      } else {\r\n        if (intersects(k._, c._)) {\r\n          a = k, a.next = b, b.previous = a, --i;\r\n          continue pack;\r\n        }\r\n        sk += k._.r, k = k.previous;\r\n      }\r\n    } while (j !== k.next);\r\n\r\n    // Success! Insert the new circle c between a and b.\r\n    c.previous = a, c.next = b, a.next = b.previous = b = c;\r\n\r\n    // Compute the new closest circle pair to the centroid.\r\n    aa = score(a);\r\n    while ((c = c.next) !== b) {\r\n      if ((ca = score(c)) < aa) {\r\n        a = c, aa = ca;\r\n      }\r\n    }\r\n    b = a.next;\r\n  }\r\n\r\n  // Compute the enclosing circle of the front chain.\r\n  a = [b._], c = b; while ((c = c.next) !== b) a.push(c._); c = enclose(a);\r\n\r\n  // Translate the circles to put the enclosing circle around the origin.\r\n  for (i = 0; i < n; ++i) a = circles[i], a.x -= c.x, a.y -= c.y;\r\n\r\n  return c.r;\r\n}\r\n\r\nfunction siblings(circles) {\r\n  packEnclose(circles);\r\n  return circles;\r\n}\r\n\r\nfunction optional(f) {\r\n  return f == null ? null : required(f);\r\n}\r\n\r\nfunction required(f) {\r\n  if (typeof f !== \"function\") throw new Error;\r\n  return f;\r\n}\r\n\r\nfunction constantZero() {\r\n  return 0;\r\n}\r\n\r\nfunction constant$9(x) {\r\n  return function() {\r\n    return x;\r\n  };\r\n}\r\n\r\nfunction defaultRadius$1(d) {\r\n  return Math.sqrt(d.value);\r\n}\r\n\r\nfunction index$2() {\r\n  var radius = null,\r\n      dx = 1,\r\n      dy = 1,\r\n      padding = constantZero;\r\n\r\n  function pack(root) {\r\n    root.x = dx / 2, root.y = dy / 2;\r\n    if (radius) {\r\n      root.eachBefore(radiusLeaf(radius))\r\n          .eachAfter(packChildren(padding, 0.5))\r\n          .eachBefore(translateChild(1));\r\n    } else {\r\n      root.eachBefore(radiusLeaf(defaultRadius$1))\r\n          .eachAfter(packChildren(constantZero, 1))\r\n          .eachAfter(packChildren(padding, root.r / Math.min(dx, dy)))\r\n          .eachBefore(translateChild(Math.min(dx, dy) / (2 * root.r)));\r\n    }\r\n    return root;\r\n  }\r\n\r\n  pack.radius = function(x) {\r\n    return arguments.length ? (radius = optional(x), pack) : radius;\r\n  };\r\n\r\n  pack.size = function(x) {\r\n    return arguments.length ? (dx = +x[0], dy = +x[1], pack) : [dx, dy];\r\n  };\r\n\r\n  pack.padding = function(x) {\r\n    return arguments.length ? (padding = typeof x === \"function\" ? x : constant$9(+x), pack) : padding;\r\n  };\r\n\r\n  return pack;\r\n}\r\n\r\nfunction radiusLeaf(radius) {\r\n  return function(node) {\r\n    if (!node.children) {\r\n      node.r = Math.max(0, +radius(node) || 0);\r\n    }\r\n  };\r\n}\r\n\r\nfunction packChildren(padding, k) {\r\n  return function(node) {\r\n    if (children = node.children) {\r\n      var children,\r\n          i,\r\n          n = children.length,\r\n          r = padding(node) * k || 0,\r\n          e;\r\n\r\n      if (r) for (i = 0; i < n; ++i) children[i].r += r;\r\n      e = packEnclose(children);\r\n      if (r) for (i = 0; i < n; ++i) children[i].r -= r;\r\n      node.r = e + r;\r\n    }\r\n  };\r\n}\r\n\r\nfunction translateChild(k) {\r\n  return function(node) {\r\n    var parent = node.parent;\r\n    node.r *= k;\r\n    if (parent) {\r\n      node.x = parent.x + k * node.x;\r\n      node.y = parent.y + k * node.y;\r\n    }\r\n  };\r\n}\r\n\r\nfunction roundNode(node) {\r\n  node.x0 = Math.round(node.x0);\r\n  node.y0 = Math.round(node.y0);\r\n  node.x1 = Math.round(node.x1);\r\n  node.y1 = Math.round(node.y1);\r\n}\r\n\r\nfunction treemapDice(parent, x0, y0, x1, y1) {\r\n  var nodes = parent.children,\r\n      node,\r\n      i = -1,\r\n      n = nodes.length,\r\n      k = parent.value && (x1 - x0) / parent.value;\r\n\r\n  while (++i < n) {\r\n    node = nodes[i], node.y0 = y0, node.y1 = y1;\r\n    node.x0 = x0, node.x1 = x0 += node.value * k;\r\n  }\r\n}\r\n\r\nfunction partition() {\r\n  var dx = 1,\r\n      dy = 1,\r\n      padding = 0,\r\n      round = false;\r\n\r\n  function partition(root) {\r\n    var n = root.height + 1;\r\n    root.x0 =\r\n    root.y0 = padding;\r\n    root.x1 = dx;\r\n    root.y1 = dy / n;\r\n    root.eachBefore(positionNode(dy, n));\r\n    if (round) root.eachBefore(roundNode);\r\n    return root;\r\n  }\r\n\r\n  function positionNode(dy, n) {\r\n    return function(node) {\r\n      if (node.children) {\r\n        treemapDice(node, node.x0, dy * (node.depth + 1) / n, node.x1, dy * (node.depth + 2) / n);\r\n      }\r\n      var x0 = node.x0,\r\n          y0 = node.y0,\r\n          x1 = node.x1 - padding,\r\n          y1 = node.y1 - padding;\r\n      if (x1 < x0) x0 = x1 = (x0 + x1) / 2;\r\n      if (y1 < y0) y0 = y1 = (y0 + y1) / 2;\r\n      node.x0 = x0;\r\n      node.y0 = y0;\r\n      node.x1 = x1;\r\n      node.y1 = y1;\r\n    };\r\n  }\r\n\r\n  partition.round = function(x) {\r\n    return arguments.length ? (round = !!x, partition) : round;\r\n  };\r\n\r\n  partition.size = function(x) {\r\n    return arguments.length ? (dx = +x[0], dy = +x[1], partition) : [dx, dy];\r\n  };\r\n\r\n  partition.padding = function(x) {\r\n    return arguments.length ? (padding = +x, partition) : padding;\r\n  };\r\n\r\n  return partition;\r\n}\r\n\r\nvar keyPrefix$1 = \"$\", // Protect against keys like “__proto__”.\r\n    preroot = {depth: -1},\r\n    ambiguous = {};\r\n\r\nfunction defaultId(d) {\r\n  return d.id;\r\n}\r\n\r\nfunction defaultParentId(d) {\r\n  return d.parentId;\r\n}\r\n\r\nfunction stratify() {\r\n  var id = defaultId,\r\n      parentId = defaultParentId;\r\n\r\n  function stratify(data) {\r\n    var d,\r\n        i,\r\n        n = data.length,\r\n        root,\r\n        parent,\r\n        node,\r\n        nodes = new Array(n),\r\n        nodeId,\r\n        nodeKey,\r\n        nodeByKey = {};\r\n\r\n    for (i = 0; i < n; ++i) {\r\n      d = data[i], node = nodes[i] = new Node(d);\r\n      if ((nodeId = id(d, i, data)) != null && (nodeId += \"\")) {\r\n        nodeKey = keyPrefix$1 + (node.id = nodeId);\r\n        nodeByKey[nodeKey] = nodeKey in nodeByKey ? ambiguous : node;\r\n      }\r\n    }\r\n\r\n    for (i = 0; i < n; ++i) {\r\n      node = nodes[i], nodeId = parentId(data[i], i, data);\r\n      if (nodeId == null || !(nodeId += \"\")) {\r\n        if (root) throw new Error(\"multiple roots\");\r\n        root = node;\r\n      } else {\r\n        parent = nodeByKey[keyPrefix$1 + nodeId];\r\n        if (!parent) throw new Error(\"missing: \" + nodeId);\r\n        if (parent === ambiguous) throw new Error(\"ambiguous: \" + nodeId);\r\n        if (parent.children) parent.children.push(node);\r\n        else parent.children = [node];\r\n        node.parent = parent;\r\n      }\r\n    }\r\n\r\n    if (!root) throw new Error(\"no root\");\r\n    root.parent = preroot;\r\n    root.eachBefore(function(node) { node.depth = node.parent.depth + 1; --n; }).eachBefore(computeHeight);\r\n    root.parent = null;\r\n    if (n > 0) throw new Error(\"cycle\");\r\n\r\n    return root;\r\n  }\r\n\r\n  stratify.id = function(x) {\r\n    return arguments.length ? (id = required(x), stratify) : id;\r\n  };\r\n\r\n  stratify.parentId = function(x) {\r\n    return arguments.length ? (parentId = required(x), stratify) : parentId;\r\n  };\r\n\r\n  return stratify;\r\n}\r\n\r\nfunction defaultSeparation$1(a, b) {\r\n  return a.parent === b.parent ? 1 : 2;\r\n}\r\n\r\n// function radialSeparation(a, b) {\r\n//   return (a.parent === b.parent ? 1 : 2) / a.depth;\r\n// }\r\n\r\n// This function is used to traverse the left contour of a subtree (or\r\n// subforest). It returns the successor of v on this contour. This successor is\r\n// either given by the leftmost child of v or by the thread of v. The function\r\n// returns null if and only if v is on the highest level of its subtree.\r\nfunction nextLeft(v) {\r\n  var children = v.children;\r\n  return children ? children[0] : v.t;\r\n}\r\n\r\n// This function works analogously to nextLeft.\r\nfunction nextRight(v) {\r\n  var children = v.children;\r\n  return children ? children[children.length - 1] : v.t;\r\n}\r\n\r\n// Shifts the current subtree rooted at w+. This is done by increasing\r\n// prelim(w+) and mod(w+) by shift.\r\nfunction moveSubtree(wm, wp, shift) {\r\n  var change = shift / (wp.i - wm.i);\r\n  wp.c -= change;\r\n  wp.s += shift;\r\n  wm.c += change;\r\n  wp.z += shift;\r\n  wp.m += shift;\r\n}\r\n\r\n// All other shifts, applied to the smaller subtrees between w- and w+, are\r\n// performed by this function. To prepare the shifts, we have to adjust\r\n// change(w+), shift(w+), and change(w-).\r\nfunction executeShifts(v) {\r\n  var shift = 0,\r\n      change = 0,\r\n      children = v.children,\r\n      i = children.length,\r\n      w;\r\n  while (--i >= 0) {\r\n    w = children[i];\r\n    w.z += shift;\r\n    w.m += shift;\r\n    shift += w.s + (change += w.c);\r\n  }\r\n}\r\n\r\n// If vi-’s ancestor is a sibling of v, returns vi-’s ancestor. Otherwise,\r\n// returns the specified (default) ancestor.\r\nfunction nextAncestor(vim, v, ancestor) {\r\n  return vim.a.parent === v.parent ? vim.a : ancestor;\r\n}\r\n\r\nfunction TreeNode(node, i) {\r\n  this._ = node;\r\n  this.parent = null;\r\n  this.children = null;\r\n  this.A = null; // default ancestor\r\n  this.a = this; // ancestor\r\n  this.z = 0; // prelim\r\n  this.m = 0; // mod\r\n  this.c = 0; // change\r\n  this.s = 0; // shift\r\n  this.t = null; // thread\r\n  this.i = i; // number\r\n}\r\n\r\nTreeNode.prototype = Object.create(Node.prototype);\r\n\r\nfunction treeRoot(root) {\r\n  var tree = new TreeNode(root, 0),\r\n      node,\r\n      nodes = [tree],\r\n      child,\r\n      children,\r\n      i,\r\n      n;\r\n\r\n  while (node = nodes.pop()) {\r\n    if (children = node._.children) {\r\n      node.children = new Array(n = children.length);\r\n      for (i = n - 1; i >= 0; --i) {\r\n        nodes.push(child = node.children[i] = new TreeNode(children[i], i));\r\n        child.parent = node;\r\n      }\r\n    }\r\n  }\r\n\r\n  (tree.parent = new TreeNode(null, 0)).children = [tree];\r\n  return tree;\r\n}\r\n\r\n// Node-link tree diagram using the Reingold-Tilford \"tidy\" algorithm\r\nfunction tree() {\r\n  var separation = defaultSeparation$1,\r\n      dx = 1,\r\n      dy = 1,\r\n      nodeSize = null;\r\n\r\n  function tree(root) {\r\n    var t = treeRoot(root);\r\n\r\n    // Compute the layout using Buchheim et al.’s algorithm.\r\n    t.eachAfter(firstWalk), t.parent.m = -t.z;\r\n    t.eachBefore(secondWalk);\r\n\r\n    // If a fixed node size is specified, scale x and y.\r\n    if (nodeSize) root.eachBefore(sizeNode);\r\n\r\n    // If a fixed tree size is specified, scale x and y based on the extent.\r\n    // Compute the left-most, right-most, and depth-most nodes for extents.\r\n    else {\r\n      var left = root,\r\n          right = root,\r\n          bottom = root;\r\n      root.eachBefore(function(node) {\r\n        if (node.x < left.x) left = node;\r\n        if (node.x > right.x) right = node;\r\n        if (node.depth > bottom.depth) bottom = node;\r\n      });\r\n      var s = left === right ? 1 : separation(left, right) / 2,\r\n          tx = s - left.x,\r\n          kx = dx / (right.x + s + tx),\r\n          ky = dy / (bottom.depth || 1);\r\n      root.eachBefore(function(node) {\r\n        node.x = (node.x + tx) * kx;\r\n        node.y = node.depth * ky;\r\n      });\r\n    }\r\n\r\n    return root;\r\n  }\r\n\r\n  // Computes a preliminary x-coordinate for v. Before that, FIRST WALK is\r\n  // applied recursively to the children of v, as well as the function\r\n  // APPORTION. After spacing out the children by calling EXECUTE SHIFTS, the\r\n  // node v is placed to the midpoint of its outermost children.\r\n  function firstWalk(v) {\r\n    var children = v.children,\r\n        siblings = v.parent.children,\r\n        w = v.i ? siblings[v.i - 1] : null;\r\n    if (children) {\r\n      executeShifts(v);\r\n      var midpoint = (children[0].z + children[children.length - 1].z) / 2;\r\n      if (w) {\r\n        v.z = w.z + separation(v._, w._);\r\n        v.m = v.z - midpoint;\r\n      } else {\r\n        v.z = midpoint;\r\n      }\r\n    } else if (w) {\r\n      v.z = w.z + separation(v._, w._);\r\n    }\r\n    v.parent.A = apportion(v, w, v.parent.A || siblings[0]);\r\n  }\r\n\r\n  // Computes all real x-coordinates by summing up the modifiers recursively.\r\n  function secondWalk(v) {\r\n    v._.x = v.z + v.parent.m;\r\n    v.m += v.parent.m;\r\n  }\r\n\r\n  // The core of the algorithm. Here, a new subtree is combined with the\r\n  // previous subtrees. Threads are used to traverse the inside and outside\r\n  // contours of the left and right subtree up to the highest common level. The\r\n  // vertices used for the traversals are vi+, vi-, vo-, and vo+, where the\r\n  // superscript o means outside and i means inside, the subscript - means left\r\n  // subtree and + means right subtree. For summing up the modifiers along the\r\n  // contour, we use respective variables si+, si-, so-, and so+. Whenever two\r\n  // nodes of the inside contours conflict, we compute the left one of the\r\n  // greatest uncommon ancestors using the function ANCESTOR and call MOVE\r\n  // SUBTREE to shift the subtree and prepare the shifts of smaller subtrees.\r\n  // Finally, we add a new thread (if necessary).\r\n  function apportion(v, w, ancestor) {\r\n    if (w) {\r\n      var vip = v,\r\n          vop = v,\r\n          vim = w,\r\n          vom = vip.parent.children[0],\r\n          sip = vip.m,\r\n          sop = vop.m,\r\n          sim = vim.m,\r\n          som = vom.m,\r\n          shift;\r\n      while (vim = nextRight(vim), vip = nextLeft(vip), vim && vip) {\r\n        vom = nextLeft(vom);\r\n        vop = nextRight(vop);\r\n        vop.a = v;\r\n        shift = vim.z + sim - vip.z - sip + separation(vim._, vip._);\r\n        if (shift > 0) {\r\n          moveSubtree(nextAncestor(vim, v, ancestor), v, shift);\r\n          sip += shift;\r\n          sop += shift;\r\n        }\r\n        sim += vim.m;\r\n        sip += vip.m;\r\n        som += vom.m;\r\n        sop += vop.m;\r\n      }\r\n      if (vim && !nextRight(vop)) {\r\n        vop.t = vim;\r\n        vop.m += sim - sop;\r\n      }\r\n      if (vip && !nextLeft(vom)) {\r\n        vom.t = vip;\r\n        vom.m += sip - som;\r\n        ancestor = v;\r\n      }\r\n    }\r\n    return ancestor;\r\n  }\r\n\r\n  function sizeNode(node) {\r\n    node.x *= dx;\r\n    node.y = node.depth * dy;\r\n  }\r\n\r\n  tree.separation = function(x) {\r\n    return arguments.length ? (separation = x, tree) : separation;\r\n  };\r\n\r\n  tree.size = function(x) {\r\n    return arguments.length ? (nodeSize = false, dx = +x[0], dy = +x[1], tree) : (nodeSize ? null : [dx, dy]);\r\n  };\r\n\r\n  tree.nodeSize = function(x) {\r\n    return arguments.length ? (nodeSize = true, dx = +x[0], dy = +x[1], tree) : (nodeSize ? [dx, dy] : null);\r\n  };\r\n\r\n  return tree;\r\n}\r\n\r\nfunction treemapSlice(parent, x0, y0, x1, y1) {\r\n  var nodes = parent.children,\r\n      node,\r\n      i = -1,\r\n      n = nodes.length,\r\n      k = parent.value && (y1 - y0) / parent.value;\r\n\r\n  while (++i < n) {\r\n    node = nodes[i], node.x0 = x0, node.x1 = x1;\r\n    node.y0 = y0, node.y1 = y0 += node.value * k;\r\n  }\r\n}\r\n\r\nvar phi = (1 + Math.sqrt(5)) / 2;\r\n\r\nfunction squarifyRatio(ratio, parent, x0, y0, x1, y1) {\r\n  var rows = [],\r\n      nodes = parent.children,\r\n      row,\r\n      nodeValue,\r\n      i0 = 0,\r\n      i1 = 0,\r\n      n = nodes.length,\r\n      dx, dy,\r\n      value = parent.value,\r\n      sumValue,\r\n      minValue,\r\n      maxValue,\r\n      newRatio,\r\n      minRatio,\r\n      alpha,\r\n      beta;\r\n\r\n  while (i0 < n) {\r\n    dx = x1 - x0, dy = y1 - y0;\r\n\r\n    // Find the next non-empty node.\r\n    do sumValue = nodes[i1++].value; while (!sumValue && i1 < n);\r\n    minValue = maxValue = sumValue;\r\n    alpha = Math.max(dy / dx, dx / dy) / (value * ratio);\r\n    beta = sumValue * sumValue * alpha;\r\n    minRatio = Math.max(maxValue / beta, beta / minValue);\r\n\r\n    // Keep adding nodes while the aspect ratio maintains or improves.\r\n    for (; i1 < n; ++i1) {\r\n      sumValue += nodeValue = nodes[i1].value;\r\n      if (nodeValue < minValue) minValue = nodeValue;\r\n      if (nodeValue > maxValue) maxValue = nodeValue;\r\n      beta = sumValue * sumValue * alpha;\r\n      newRatio = Math.max(maxValue / beta, beta / minValue);\r\n      if (newRatio > minRatio) { sumValue -= nodeValue; break; }\r\n      minRatio = newRatio;\r\n    }\r\n\r\n    // Position and record the row orientation.\r\n    rows.push(row = {value: sumValue, dice: dx < dy, children: nodes.slice(i0, i1)});\r\n    if (row.dice) treemapDice(row, x0, y0, x1, value ? y0 += dy * sumValue / value : y1);\r\n    else treemapSlice(row, x0, y0, value ? x0 += dx * sumValue / value : x1, y1);\r\n    value -= sumValue, i0 = i1;\r\n  }\r\n\r\n  return rows;\r\n}\r\n\r\nvar squarify = (function custom(ratio) {\r\n\r\n  function squarify(parent, x0, y0, x1, y1) {\r\n    squarifyRatio(ratio, parent, x0, y0, x1, y1);\r\n  }\r\n\r\n  squarify.ratio = function(x) {\r\n    return custom((x = +x) > 1 ? x : 1);\r\n  };\r\n\r\n  return squarify;\r\n})(phi);\r\n\r\nfunction index$3() {\r\n  var tile = squarify,\r\n      round = false,\r\n      dx = 1,\r\n      dy = 1,\r\n      paddingStack = [0],\r\n      paddingInner = constantZero,\r\n      paddingTop = constantZero,\r\n      paddingRight = constantZero,\r\n      paddingBottom = constantZero,\r\n      paddingLeft = constantZero;\r\n\r\n  function treemap(root) {\r\n    root.x0 =\r\n    root.y0 = 0;\r\n    root.x1 = dx;\r\n    root.y1 = dy;\r\n    root.eachBefore(positionNode);\r\n    paddingStack = [0];\r\n    if (round) root.eachBefore(roundNode);\r\n    return root;\r\n  }\r\n\r\n  function positionNode(node) {\r\n    var p = paddingStack[node.depth],\r\n        x0 = node.x0 + p,\r\n        y0 = node.y0 + p,\r\n        x1 = node.x1 - p,\r\n        y1 = node.y1 - p;\r\n    if (x1 < x0) x0 = x1 = (x0 + x1) / 2;\r\n    if (y1 < y0) y0 = y1 = (y0 + y1) / 2;\r\n    node.x0 = x0;\r\n    node.y0 = y0;\r\n    node.x1 = x1;\r\n    node.y1 = y1;\r\n    if (node.children) {\r\n      p = paddingStack[node.depth + 1] = paddingInner(node) / 2;\r\n      x0 += paddingLeft(node) - p;\r\n      y0 += paddingTop(node) - p;\r\n      x1 -= paddingRight(node) - p;\r\n      y1 -= paddingBottom(node) - p;\r\n      if (x1 < x0) x0 = x1 = (x0 + x1) / 2;\r\n      if (y1 < y0) y0 = y1 = (y0 + y1) / 2;\r\n      tile(node, x0, y0, x1, y1);\r\n    }\r\n  }\r\n\r\n  treemap.round = function(x) {\r\n    return arguments.length ? (round = !!x, treemap) : round;\r\n  };\r\n\r\n  treemap.size = function(x) {\r\n    return arguments.length ? (dx = +x[0], dy = +x[1], treemap) : [dx, dy];\r\n  };\r\n\r\n  treemap.tile = function(x) {\r\n    return arguments.length ? (tile = required(x), treemap) : tile;\r\n  };\r\n\r\n  treemap.padding = function(x) {\r\n    return arguments.length ? treemap.paddingInner(x).paddingOuter(x) : treemap.paddingInner();\r\n  };\r\n\r\n  treemap.paddingInner = function(x) {\r\n    return arguments.length ? (paddingInner = typeof x === \"function\" ? x : constant$9(+x), treemap) : paddingInner;\r\n  };\r\n\r\n  treemap.paddingOuter = function(x) {\r\n    return arguments.length ? treemap.paddingTop(x).paddingRight(x).paddingBottom(x).paddingLeft(x) : treemap.paddingTop();\r\n  };\r\n\r\n  treemap.paddingTop = function(x) {\r\n    return arguments.length ? (paddingTop = typeof x === \"function\" ? x : constant$9(+x), treemap) : paddingTop;\r\n  };\r\n\r\n  treemap.paddingRight = function(x) {\r\n    return arguments.length ? (paddingRight = typeof x === \"function\" ? x : constant$9(+x), treemap) : paddingRight;\r\n  };\r\n\r\n  treemap.paddingBottom = function(x) {\r\n    return arguments.length ? (paddingBottom = typeof x === \"function\" ? x : constant$9(+x), treemap) : paddingBottom;\r\n  };\r\n\r\n  treemap.paddingLeft = function(x) {\r\n    return arguments.length ? (paddingLeft = typeof x === \"function\" ? x : constant$9(+x), treemap) : paddingLeft;\r\n  };\r\n\r\n  return treemap;\r\n}\r\n\r\nfunction binary(parent, x0, y0, x1, y1) {\r\n  var nodes = parent.children,\r\n      i, n = nodes.length,\r\n      sum, sums = new Array(n + 1);\r\n\r\n  for (sums[0] = sum = i = 0; i < n; ++i) {\r\n    sums[i + 1] = sum += nodes[i].value;\r\n  }\r\n\r\n  partition(0, n, parent.value, x0, y0, x1, y1);\r\n\r\n  function partition(i, j, value, x0, y0, x1, y1) {\r\n    if (i >= j - 1) {\r\n      var node = nodes[i];\r\n      node.x0 = x0, node.y0 = y0;\r\n      node.x1 = x1, node.y1 = y1;\r\n      return;\r\n    }\r\n\r\n    var valueOffset = sums[i],\r\n        valueTarget = (value / 2) + valueOffset,\r\n        k = i + 1,\r\n        hi = j - 1;\r\n\r\n    while (k < hi) {\r\n      var mid = k + hi >>> 1;\r\n      if (sums[mid] < valueTarget) k = mid + 1;\r\n      else hi = mid;\r\n    }\r\n\r\n    if ((valueTarget - sums[k - 1]) < (sums[k] - valueTarget) && i + 1 < k) --k;\r\n\r\n    var valueLeft = sums[k] - valueOffset,\r\n        valueRight = value - valueLeft;\r\n\r\n    if ((x1 - x0) > (y1 - y0)) {\r\n      var xk = (x0 * valueRight + x1 * valueLeft) / value;\r\n      partition(i, k, valueLeft, x0, y0, xk, y1);\r\n      partition(k, j, valueRight, xk, y0, x1, y1);\r\n    } else {\r\n      var yk = (y0 * valueRight + y1 * valueLeft) / value;\r\n      partition(i, k, valueLeft, x0, y0, x1, yk);\r\n      partition(k, j, valueRight, x0, yk, x1, y1);\r\n    }\r\n  }\r\n}\r\n\r\nfunction sliceDice(parent, x0, y0, x1, y1) {\r\n  (parent.depth & 1 ? treemapSlice : treemapDice)(parent, x0, y0, x1, y1);\r\n}\r\n\r\nvar resquarify = (function custom(ratio) {\r\n\r\n  function resquarify(parent, x0, y0, x1, y1) {\r\n    if ((rows = parent._squarify) && (rows.ratio === ratio)) {\r\n      var rows,\r\n          row,\r\n          nodes,\r\n          i,\r\n          j = -1,\r\n          n,\r\n          m = rows.length,\r\n          value = parent.value;\r\n\r\n      while (++j < m) {\r\n        row = rows[j], nodes = row.children;\r\n        for (i = row.value = 0, n = nodes.length; i < n; ++i) row.value += nodes[i].value;\r\n        if (row.dice) treemapDice(row, x0, y0, x1, y0 += (y1 - y0) * row.value / value);\r\n        else treemapSlice(row, x0, y0, x0 += (x1 - x0) * row.value / value, y1);\r\n        value -= row.value;\r\n      }\r\n    } else {\r\n      parent._squarify = rows = squarifyRatio(ratio, parent, x0, y0, x1, y1);\r\n      rows.ratio = ratio;\r\n    }\r\n  }\r\n\r\n  resquarify.ratio = function(x) {\r\n    return custom((x = +x) > 1 ? x : 1);\r\n  };\r\n\r\n  return resquarify;\r\n})(phi);\r\n\r\nfunction area$2(polygon) {\r\n  var i = -1,\r\n      n = polygon.length,\r\n      a,\r\n      b = polygon[n - 1],\r\n      area = 0;\r\n\r\n  while (++i < n) {\r\n    a = b;\r\n    b = polygon[i];\r\n    area += a[1] * b[0] - a[0] * b[1];\r\n  }\r\n\r\n  return area / 2;\r\n}\r\n\r\nfunction centroid$1(polygon) {\r\n  var i = -1,\r\n      n = polygon.length,\r\n      x = 0,\r\n      y = 0,\r\n      a,\r\n      b = polygon[n - 1],\r\n      c,\r\n      k = 0;\r\n\r\n  while (++i < n) {\r\n    a = b;\r\n    b = polygon[i];\r\n    k += c = a[0] * b[1] - b[0] * a[1];\r\n    x += (a[0] + b[0]) * c;\r\n    y += (a[1] + b[1]) * c;\r\n  }\r\n\r\n  return k *= 3, [x / k, y / k];\r\n}\r\n\r\n// Returns the 2D cross product of AB and AC vectors, i.e., the z-component of\r\n// the 3D cross product in a quadrant I Cartesian coordinate system (+x is\r\n// right, +y is up). Returns a positive value if ABC is counter-clockwise,\r\n// negative if clockwise, and zero if the points are collinear.\r\nfunction cross$1(a, b, c) {\r\n  return (b[0] - a[0]) * (c[1] - a[1]) - (b[1] - a[1]) * (c[0] - a[0]);\r\n}\r\n\r\nfunction lexicographicOrder(a, b) {\r\n  return a[0] - b[0] || a[1] - b[1];\r\n}\r\n\r\n// Computes the upper convex hull per the monotone chain algorithm.\r\n// Assumes points.length >= 3, is sorted by x, unique in y.\r\n// Returns an array of indices into points in left-to-right order.\r\nfunction computeUpperHullIndexes(points) {\r\n  var n = points.length,\r\n      indexes = [0, 1],\r\n      size = 2;\r\n\r\n  for (var i = 2; i < n; ++i) {\r\n    while (size > 1 && cross$1(points[indexes[size - 2]], points[indexes[size - 1]], points[i]) <= 0) --size;\r\n    indexes[size++] = i;\r\n  }\r\n\r\n  return indexes.slice(0, size); // remove popped points\r\n}\r\n\r\nfunction hull(points) {\r\n  if ((n = points.length) < 3) return null;\r\n\r\n  var i,\r\n      n,\r\n      sortedPoints = new Array(n),\r\n      flippedPoints = new Array(n);\r\n\r\n  for (i = 0; i < n; ++i) sortedPoints[i] = [+points[i][0], +points[i][1], i];\r\n  sortedPoints.sort(lexicographicOrder);\r\n  for (i = 0; i < n; ++i) flippedPoints[i] = [sortedPoints[i][0], -sortedPoints[i][1]];\r\n\r\n  var upperIndexes = computeUpperHullIndexes(sortedPoints),\r\n      lowerIndexes = computeUpperHullIndexes(flippedPoints);\r\n\r\n  // Construct the hull polygon, removing possible duplicate endpoints.\r\n  var skipLeft = lowerIndexes[0] === upperIndexes[0],\r\n      skipRight = lowerIndexes[lowerIndexes.length - 1] === upperIndexes[upperIndexes.length - 1],\r\n      hull = [];\r\n\r\n  // Add upper hull in right-to-l order.\r\n  // Then add lower hull in left-to-right order.\r\n  for (i = upperIndexes.length - 1; i >= 0; --i) hull.push(points[sortedPoints[upperIndexes[i]][2]]);\r\n  for (i = +skipLeft; i < lowerIndexes.length - skipRight; ++i) hull.push(points[sortedPoints[lowerIndexes[i]][2]]);\r\n\r\n  return hull;\r\n}\r\n\r\nfunction contains$2(polygon, point) {\r\n  var n = polygon.length,\r\n      p = polygon[n - 1],\r\n      x = point[0], y = point[1],\r\n      x0 = p[0], y0 = p[1],\r\n      x1, y1,\r\n      inside = false;\r\n\r\n  for (var i = 0; i < n; ++i) {\r\n    p = polygon[i], x1 = p[0], y1 = p[1];\r\n    if (((y1 > y) !== (y0 > y)) && (x < (x0 - x1) * (y - y1) / (y0 - y1) + x1)) inside = !inside;\r\n    x0 = x1, y0 = y1;\r\n  }\r\n\r\n  return inside;\r\n}\r\n\r\nfunction length$2(polygon) {\r\n  var i = -1,\r\n      n = polygon.length,\r\n      b = polygon[n - 1],\r\n      xa,\r\n      ya,\r\n      xb = b[0],\r\n      yb = b[1],\r\n      perimeter = 0;\r\n\r\n  while (++i < n) {\r\n    xa = xb;\r\n    ya = yb;\r\n    b = polygon[i];\r\n    xb = b[0];\r\n    yb = b[1];\r\n    xa -= xb;\r\n    ya -= yb;\r\n    perimeter += Math.sqrt(xa * xa + ya * ya);\r\n  }\r\n\r\n  return perimeter;\r\n}\r\n\r\nfunction defaultSource$1() {\r\n  return Math.random();\r\n}\r\n\r\nvar uniform = (function sourceRandomUniform(source) {\r\n  function randomUniform(min, max) {\r\n    min = min == null ? 0 : +min;\r\n    max = max == null ? 1 : +max;\r\n    if (arguments.length === 1) max = min, min = 0;\r\n    else max -= min;\r\n    return function() {\r\n      return source() * max + min;\r\n    };\r\n  }\r\n\r\n  randomUniform.source = sourceRandomUniform;\r\n\r\n  return randomUniform;\r\n})(defaultSource$1);\r\n\r\nvar normal = (function sourceRandomNormal(source) {\r\n  function randomNormal(mu, sigma) {\r\n    var x, r;\r\n    mu = mu == null ? 0 : +mu;\r\n    sigma = sigma == null ? 1 : +sigma;\r\n    return function() {\r\n      var y;\r\n\r\n      // If available, use the second previously-generated uniform random.\r\n      if (x != null) y = x, x = null;\r\n\r\n      // Otherwise, generate a new x and y.\r\n      else do {\r\n        x = source() * 2 - 1;\r\n        y = source() * 2 - 1;\r\n        r = x * x + y * y;\r\n      } while (!r || r > 1);\r\n\r\n      return mu + sigma * y * Math.sqrt(-2 * Math.log(r) / r);\r\n    };\r\n  }\r\n\r\n  randomNormal.source = sourceRandomNormal;\r\n\r\n  return randomNormal;\r\n})(defaultSource$1);\r\n\r\nvar logNormal = (function sourceRandomLogNormal(source) {\r\n  function randomLogNormal() {\r\n    var randomNormal = normal.source(source).apply(this, arguments);\r\n    return function() {\r\n      return Math.exp(randomNormal());\r\n    };\r\n  }\r\n\r\n  randomLogNormal.source = sourceRandomLogNormal;\r\n\r\n  return randomLogNormal;\r\n})(defaultSource$1);\r\n\r\nvar irwinHall = (function sourceRandomIrwinHall(source) {\r\n  function randomIrwinHall(n) {\r\n    return function() {\r\n      for (var sum = 0, i = 0; i < n; ++i) sum += source();\r\n      return sum;\r\n    };\r\n  }\r\n\r\n  randomIrwinHall.source = sourceRandomIrwinHall;\r\n\r\n  return randomIrwinHall;\r\n})(defaultSource$1);\r\n\r\nvar bates = (function sourceRandomBates(source) {\r\n  function randomBates(n) {\r\n    var randomIrwinHall = irwinHall.source(source)(n);\r\n    return function() {\r\n      return randomIrwinHall() / n;\r\n    };\r\n  }\r\n\r\n  randomBates.source = sourceRandomBates;\r\n\r\n  return randomBates;\r\n})(defaultSource$1);\r\n\r\nvar exponential$1 = (function sourceRandomExponential(source) {\r\n  function randomExponential(lambda) {\r\n    return function() {\r\n      return -Math.log(1 - source()) / lambda;\r\n    };\r\n  }\r\n\r\n  randomExponential.source = sourceRandomExponential;\r\n\r\n  return randomExponential;\r\n})(defaultSource$1);\r\n\r\nfunction initRange(domain, range) {\r\n  switch (arguments.length) {\r\n    case 0: break;\r\n    case 1: this.range(domain); break;\r\n    default: this.range(range).domain(domain); break;\r\n  }\r\n  return this;\r\n}\r\n\r\nfunction initInterpolator(domain, interpolator) {\r\n  switch (arguments.length) {\r\n    case 0: break;\r\n    case 1: this.interpolator(domain); break;\r\n    default: this.interpolator(interpolator).domain(domain); break;\r\n  }\r\n  return this;\r\n}\r\n\r\nvar array$3 = Array.prototype;\r\n\r\nvar map$3 = array$3.map;\r\nvar slice$5 = array$3.slice;\r\n\r\nvar implicit = {name: \"implicit\"};\r\n\r\nfunction ordinal() {\r\n  var index = map$1(),\r\n      domain = [],\r\n      range = [],\r\n      unknown = implicit;\r\n\r\n  function scale(d) {\r\n    var key = d + \"\", i = index.get(key);\r\n    if (!i) {\r\n      if (unknown !== implicit) return unknown;\r\n      index.set(key, i = domain.push(d));\r\n    }\r\n    return range[(i - 1) % range.length];\r\n  }\r\n\r\n  scale.domain = function(_) {\r\n    if (!arguments.length) return domain.slice();\r\n    domain = [], index = map$1();\r\n    var i = -1, n = _.length, d, key;\r\n    while (++i < n) if (!index.has(key = (d = _[i]) + \"\")) index.set(key, domain.push(d));\r\n    return scale;\r\n  };\r\n\r\n  scale.range = function(_) {\r\n    return arguments.length ? (range = slice$5.call(_), scale) : range.slice();\r\n  };\r\n\r\n  scale.unknown = function(_) {\r\n    return arguments.length ? (unknown = _, scale) : unknown;\r\n  };\r\n\r\n  scale.copy = function() {\r\n    return ordinal(domain, range).unknown(unknown);\r\n  };\r\n\r\n  initRange.apply(scale, arguments);\r\n\r\n  return scale;\r\n}\r\n\r\nfunction band() {\r\n  var scale = ordinal().unknown(undefined),\r\n      domain = scale.domain,\r\n      ordinalRange = scale.range,\r\n      range = [0, 1],\r\n      step,\r\n      bandwidth,\r\n      round = false,\r\n      paddingInner = 0,\r\n      paddingOuter = 0,\r\n      align = 0.5;\r\n\r\n  delete scale.unknown;\r\n\r\n  function rescale() {\r\n    var n = domain().length,\r\n        reverse = range[1] < range[0],\r\n        start = range[reverse - 0],\r\n        stop = range[1 - reverse];\r\n    step = (stop - start) / Math.max(1, n - paddingInner + paddingOuter * 2);\r\n    if (round) step = Math.floor(step);\r\n    start += (stop - start - step * (n - paddingInner)) * align;\r\n    bandwidth = step * (1 - paddingInner);\r\n    if (round) start = Math.round(start), bandwidth = Math.round(bandwidth);\r\n    var values = sequence(n).map(function(i) { return start + step * i; });\r\n    return ordinalRange(reverse ? values.reverse() : values);\r\n  }\r\n\r\n  scale.domain = function(_) {\r\n    return arguments.length ? (domain(_), rescale()) : domain();\r\n  };\r\n\r\n  scale.range = function(_) {\r\n    return arguments.length ? (range = [+_[0], +_[1]], rescale()) : range.slice();\r\n  };\r\n\r\n  scale.rangeRound = function(_) {\r\n    return range = [+_[0], +_[1]], round = true, rescale();\r\n  };\r\n\r\n  scale.bandwidth = function() {\r\n    return bandwidth;\r\n  };\r\n\r\n  scale.step = function() {\r\n    return step;\r\n  };\r\n\r\n  scale.round = function(_) {\r\n    return arguments.length ? (round = !!_, rescale()) : round;\r\n  };\r\n\r\n  scale.padding = function(_) {\r\n    return arguments.length ? (paddingInner = Math.min(1, paddingOuter = +_), rescale()) : paddingInner;\r\n  };\r\n\r\n  scale.paddingInner = function(_) {\r\n    return arguments.length ? (paddingInner = Math.min(1, _), rescale()) : paddingInner;\r\n  };\r\n\r\n  scale.paddingOuter = function(_) {\r\n    return arguments.length ? (paddingOuter = +_, rescale()) : paddingOuter;\r\n  };\r\n\r\n  scale.align = function(_) {\r\n    return arguments.length ? (align = Math.max(0, Math.min(1, _)), rescale()) : align;\r\n  };\r\n\r\n  scale.copy = function() {\r\n    return band(domain(), range)\r\n        .round(round)\r\n        .paddingInner(paddingInner)\r\n        .paddingOuter(paddingOuter)\r\n        .align(align);\r\n  };\r\n\r\n  return initRange.apply(rescale(), arguments);\r\n}\r\n\r\nfunction pointish(scale) {\r\n  var copy = scale.copy;\r\n\r\n  scale.padding = scale.paddingOuter;\r\n  delete scale.paddingInner;\r\n  delete scale.paddingOuter;\r\n\r\n  scale.copy = function() {\r\n    return pointish(copy());\r\n  };\r\n\r\n  return scale;\r\n}\r\n\r\nfunction point$1() {\r\n  return pointish(band.apply(null, arguments).paddingInner(1));\r\n}\r\n\r\nfunction constant$a(x) {\r\n  return function() {\r\n    return x;\r\n  };\r\n}\r\n\r\nfunction number$2(x) {\r\n  return +x;\r\n}\r\n\r\nvar unit = [0, 1];\r\n\r\nfunction identity$6(x) {\r\n  return x;\r\n}\r\n\r\nfunction normalize(a, b) {\r\n  return (b -= (a = +a))\r\n      ? function(x) { return (x - a) / b; }\r\n      : constant$a(isNaN(b) ? NaN : 0.5);\r\n}\r\n\r\nfunction clamper(domain) {\r\n  var a = domain[0], b = domain[domain.length - 1], t;\r\n  if (a > b) t = a, a = b, b = t;\r\n  return function(x) { return Math.max(a, Math.min(b, x)); };\r\n}\r\n\r\n// normalize(a, b)(x) takes a domain value x in [a,b] and returns the corresponding parameter t in [0,1].\r\n// interpolate(a, b)(t) takes a parameter t in [0,1] and returns the corresponding range value x in [a,b].\r\nfunction bimap(domain, range, interpolate) {\r\n  var d0 = domain[0], d1 = domain[1], r0 = range[0], r1 = range[1];\r\n  if (d1 < d0) d0 = normalize(d1, d0), r0 = interpolate(r1, r0);\r\n  else d0 = normalize(d0, d1), r0 = interpolate(r0, r1);\r\n  return function(x) { return r0(d0(x)); };\r\n}\r\n\r\nfunction polymap(domain, range, interpolate) {\r\n  var j = Math.min(domain.length, range.length) - 1,\r\n      d = new Array(j),\r\n      r = new Array(j),\r\n      i = -1;\r\n\r\n  // Reverse descending domains.\r\n  if (domain[j] < domain[0]) {\r\n    domain = domain.slice().reverse();\r\n    range = range.slice().reverse();\r\n  }\r\n\r\n  while (++i < j) {\r\n    d[i] = normalize(domain[i], domain[i + 1]);\r\n    r[i] = interpolate(range[i], range[i + 1]);\r\n  }\r\n\r\n  return function(x) {\r\n    var i = bisectRight(domain, x, 1, j) - 1;\r\n    return r[i](d[i](x));\r\n  };\r\n}\r\n\r\nfunction copy(source, target) {\r\n  return target\r\n      .domain(source.domain())\r\n      .range(source.range())\r\n      .interpolate(source.interpolate())\r\n      .clamp(source.clamp())\r\n      .unknown(source.unknown());\r\n}\r\n\r\nfunction transformer$1() {\r\n  var domain = unit,\r\n      range = unit,\r\n      interpolate = interpolateValue,\r\n      transform,\r\n      untransform,\r\n      unknown,\r\n      clamp = identity$6,\r\n      piecewise,\r\n      output,\r\n      input;\r\n\r\n  function rescale() {\r\n    piecewise = Math.min(domain.length, range.length) > 2 ? polymap : bimap;\r\n    output = input = null;\r\n    return scale;\r\n  }\r\n\r\n  function scale(x) {\r\n    return isNaN(x = +x) ? unknown : (output || (output = piecewise(domain.map(transform), range, interpolate)))(transform(clamp(x)));\r\n  }\r\n\r\n  scale.invert = function(y) {\r\n    return clamp(untransform((input || (input = piecewise(range, domain.map(transform), interpolateNumber)))(y)));\r\n  };\r\n\r\n  scale.domain = function(_) {\r\n    return arguments.length ? (domain = map$3.call(_, number$2), clamp === identity$6 || (clamp = clamper(domain)), rescale()) : domain.slice();\r\n  };\r\n\r\n  scale.range = function(_) {\r\n    return arguments.length ? (range = slice$5.call(_), rescale()) : range.slice();\r\n  };\r\n\r\n  scale.rangeRound = function(_) {\r\n    return range = slice$5.call(_), interpolate = interpolateRound, rescale();\r\n  };\r\n\r\n  scale.clamp = function(_) {\r\n    return arguments.length ? (clamp = _ ? clamper(domain) : identity$6, scale) : clamp !== identity$6;\r\n  };\r\n\r\n  scale.interpolate = function(_) {\r\n    return arguments.length ? (interpolate = _, rescale()) : interpolate;\r\n  };\r\n\r\n  scale.unknown = function(_) {\r\n    return arguments.length ? (unknown = _, scale) : unknown;\r\n  };\r\n\r\n  return function(t, u) {\r\n    transform = t, untransform = u;\r\n    return rescale();\r\n  };\r\n}\r\n\r\nfunction continuous(transform, untransform) {\r\n  return transformer$1()(transform, untransform);\r\n}\r\n\r\nfunction tickFormat(start, stop, count, specifier) {\r\n  var step = tickStep(start, stop, count),\r\n      precision;\r\n  specifier = formatSpecifier(specifier == null ? \",f\" : specifier);\r\n  switch (specifier.type) {\r\n    case \"s\": {\r\n      var value = Math.max(Math.abs(start), Math.abs(stop));\r\n      if (specifier.precision == null && !isNaN(precision = precisionPrefix(step, value))) specifier.precision = precision;\r\n      return exports.formatPrefix(specifier, value);\r\n    }\r\n    case \"\":\r\n    case \"e\":\r\n    case \"g\":\r\n    case \"p\":\r\n    case \"r\": {\r\n      if (specifier.precision == null && !isNaN(precision = precisionRound(step, Math.max(Math.abs(start), Math.abs(stop))))) specifier.precision = precision - (specifier.type === \"e\");\r\n      break;\r\n    }\r\n    case \"f\":\r\n    case \"%\": {\r\n      if (specifier.precision == null && !isNaN(precision = precisionFixed(step))) specifier.precision = precision - (specifier.type === \"%\") * 2;\r\n      break;\r\n    }\r\n  }\r\n  return exports.format(specifier);\r\n}\r\n\r\nfunction linearish(scale) {\r\n  var domain = scale.domain;\r\n\r\n  scale.ticks = function(count) {\r\n    var d = domain();\r\n    return ticks(d[0], d[d.length - 1], count == null ? 10 : count);\r\n  };\r\n\r\n  scale.tickFormat = function(count, specifier) {\r\n    var d = domain();\r\n    return tickFormat(d[0], d[d.length - 1], count == null ? 10 : count, specifier);\r\n  };\r\n\r\n  scale.nice = function(count) {\r\n    if (count == null) count = 10;\r\n\r\n    var d = domain(),\r\n        i0 = 0,\r\n        i1 = d.length - 1,\r\n        start = d[i0],\r\n        stop = d[i1],\r\n        step;\r\n\r\n    if (stop < start) {\r\n      step = start, start = stop, stop = step;\r\n      step = i0, i0 = i1, i1 = step;\r\n    }\r\n\r\n    step = tickIncrement(start, stop, count);\r\n\r\n    if (step > 0) {\r\n      start = Math.floor(start / step) * step;\r\n      stop = Math.ceil(stop / step) * step;\r\n      step = tickIncrement(start, stop, count);\r\n    } else if (step < 0) {\r\n      start = Math.ceil(start * step) / step;\r\n      stop = Math.floor(stop * step) / step;\r\n      step = tickIncrement(start, stop, count);\r\n    }\r\n\r\n    if (step > 0) {\r\n      d[i0] = Math.floor(start / step) * step;\r\n      d[i1] = Math.ceil(stop / step) * step;\r\n      domain(d);\r\n    } else if (step < 0) {\r\n      d[i0] = Math.ceil(start * step) / step;\r\n      d[i1] = Math.floor(stop * step) / step;\r\n      domain(d);\r\n    }\r\n\r\n    return scale;\r\n  };\r\n\r\n  return scale;\r\n}\r\n\r\nfunction linear$2() {\r\n  var scale = continuous(identity$6, identity$6);\r\n\r\n  scale.copy = function() {\r\n    return copy(scale, linear$2());\r\n  };\r\n\r\n  initRange.apply(scale, arguments);\r\n\r\n  return linearish(scale);\r\n}\r\n\r\nfunction identity$7(domain) {\r\n  var unknown;\r\n\r\n  function scale(x) {\r\n    return isNaN(x = +x) ? unknown : x;\r\n  }\r\n\r\n  scale.invert = scale;\r\n\r\n  scale.domain = scale.range = function(_) {\r\n    return arguments.length ? (domain = map$3.call(_, number$2), scale) : domain.slice();\r\n  };\r\n\r\n  scale.unknown = function(_) {\r\n    return arguments.length ? (unknown = _, scale) : unknown;\r\n  };\r\n\r\n  scale.copy = function() {\r\n    return identity$7(domain).unknown(unknown);\r\n  };\r\n\r\n  domain = arguments.length ? map$3.call(domain, number$2) : [0, 1];\r\n\r\n  return linearish(scale);\r\n}\r\n\r\nfunction nice(domain, interval) {\r\n  domain = domain.slice();\r\n\r\n  var i0 = 0,\r\n      i1 = domain.length - 1,\r\n      x0 = domain[i0],\r\n      x1 = domain[i1],\r\n      t;\r\n\r\n  if (x1 < x0) {\r\n    t = i0, i0 = i1, i1 = t;\r\n    t = x0, x0 = x1, x1 = t;\r\n  }\r\n\r\n  domain[i0] = interval.floor(x0);\r\n  domain[i1] = interval.ceil(x1);\r\n  return domain;\r\n}\r\n\r\nfunction transformLog(x) {\r\n  return Math.log(x);\r\n}\r\n\r\nfunction transformExp(x) {\r\n  return Math.exp(x);\r\n}\r\n\r\nfunction transformLogn(x) {\r\n  return -Math.log(-x);\r\n}\r\n\r\nfunction transformExpn(x) {\r\n  return -Math.exp(-x);\r\n}\r\n\r\nfunction pow10(x) {\r\n  return isFinite(x) ? +(\"1e\" + x) : x < 0 ? 0 : x;\r\n}\r\n\r\nfunction powp(base) {\r\n  return base === 10 ? pow10\r\n      : base === Math.E ? Math.exp\r\n      : function(x) { return Math.pow(base, x); };\r\n}\r\n\r\nfunction logp(base) {\r\n  return base === Math.E ? Math.log\r\n      : base === 10 && Math.log10\r\n      || base === 2 && Math.log2\r\n      || (base = Math.log(base), function(x) { return Math.log(x) / base; });\r\n}\r\n\r\nfunction reflect(f) {\r\n  return function(x) {\r\n    return -f(-x);\r\n  };\r\n}\r\n\r\nfunction loggish(transform) {\r\n  var scale = transform(transformLog, transformExp),\r\n      domain = scale.domain,\r\n      base = 10,\r\n      logs,\r\n      pows;\r\n\r\n  function rescale() {\r\n    logs = logp(base), pows = powp(base);\r\n    if (domain()[0] < 0) {\r\n      logs = reflect(logs), pows = reflect(pows);\r\n      transform(transformLogn, transformExpn);\r\n    } else {\r\n      transform(transformLog, transformExp);\r\n    }\r\n    return scale;\r\n  }\r\n\r\n  scale.base = function(_) {\r\n    return arguments.length ? (base = +_, rescale()) : base;\r\n  };\r\n\r\n  scale.domain = function(_) {\r\n    return arguments.length ? (domain(_), rescale()) : domain();\r\n  };\r\n\r\n  scale.ticks = function(count) {\r\n    var d = domain(),\r\n        u = d[0],\r\n        v = d[d.length - 1],\r\n        r;\r\n\r\n    if (r = v < u) i = u, u = v, v = i;\r\n\r\n    var i = logs(u),\r\n        j = logs(v),\r\n        p,\r\n        k,\r\n        t,\r\n        n = count == null ? 10 : +count,\r\n        z = [];\r\n\r\n    if (!(base % 1) && j - i < n) {\r\n      i = Math.round(i) - 1, j = Math.round(j) + 1;\r\n      if (u > 0) for (; i < j; ++i) {\r\n        for (k = 1, p = pows(i); k < base; ++k) {\r\n          t = p * k;\r\n          if (t < u) continue;\r\n          if (t > v) break;\r\n          z.push(t);\r\n        }\r\n      } else for (; i < j; ++i) {\r\n        for (k = base - 1, p = pows(i); k >= 1; --k) {\r\n          t = p * k;\r\n          if (t < u) continue;\r\n          if (t > v) break;\r\n          z.push(t);\r\n        }\r\n      }\r\n    } else {\r\n      z = ticks(i, j, Math.min(j - i, n)).map(pows);\r\n    }\r\n\r\n    return r ? z.reverse() : z;\r\n  };\r\n\r\n  scale.tickFormat = function(count, specifier) {\r\n    if (specifier == null) specifier = base === 10 ? \".0e\" : \",\";\r\n    if (typeof specifier !== \"function\") specifier = exports.format(specifier);\r\n    if (count === Infinity) return specifier;\r\n    if (count == null) count = 10;\r\n    var k = Math.max(1, base * count / scale.ticks().length); // TODO fast estimate?\r\n    return function(d) {\r\n      var i = d / pows(Math.round(logs(d)));\r\n      if (i * base < base - 0.5) i *= base;\r\n      return i <= k ? specifier(d) : \"\";\r\n    };\r\n  };\r\n\r\n  scale.nice = function() {\r\n    return domain(nice(domain(), {\r\n      floor: function(x) { return pows(Math.floor(logs(x))); },\r\n      ceil: function(x) { return pows(Math.ceil(logs(x))); }\r\n    }));\r\n  };\r\n\r\n  return scale;\r\n}\r\n\r\nfunction log$1() {\r\n  var scale = loggish(transformer$1()).domain([1, 10]);\r\n\r\n  scale.copy = function() {\r\n    return copy(scale, log$1()).base(scale.base());\r\n  };\r\n\r\n  initRange.apply(scale, arguments);\r\n\r\n  return scale;\r\n}\r\n\r\nfunction transformSymlog(c) {\r\n  return function(x) {\r\n    return Math.sign(x) * Math.log1p(Math.abs(x / c));\r\n  };\r\n}\r\n\r\nfunction transformSymexp(c) {\r\n  return function(x) {\r\n    return Math.sign(x) * Math.expm1(Math.abs(x)) * c;\r\n  };\r\n}\r\n\r\nfunction symlogish(transform) {\r\n  var c = 1, scale = transform(transformSymlog(c), transformSymexp(c));\r\n\r\n  scale.constant = function(_) {\r\n    return arguments.length ? transform(transformSymlog(c = +_), transformSymexp(c)) : c;\r\n  };\r\n\r\n  return linearish(scale);\r\n}\r\n\r\nfunction symlog() {\r\n  var scale = symlogish(transformer$1());\r\n\r\n  scale.copy = function() {\r\n    return copy(scale, symlog()).constant(scale.constant());\r\n  };\r\n\r\n  return initRange.apply(scale, arguments);\r\n}\r\n\r\nfunction transformPow(exponent) {\r\n  return function(x) {\r\n    return x < 0 ? -Math.pow(-x, exponent) : Math.pow(x, exponent);\r\n  };\r\n}\r\n\r\nfunction transformSqrt(x) {\r\n  return x < 0 ? -Math.sqrt(-x) : Math.sqrt(x);\r\n}\r\n\r\nfunction transformSquare(x) {\r\n  return x < 0 ? -x * x : x * x;\r\n}\r\n\r\nfunction powish(transform) {\r\n  var scale = transform(identity$6, identity$6),\r\n      exponent = 1;\r\n\r\n  function rescale() {\r\n    return exponent === 1 ? transform(identity$6, identity$6)\r\n        : exponent === 0.5 ? transform(transformSqrt, transformSquare)\r\n        : transform(transformPow(exponent), transformPow(1 / exponent));\r\n  }\r\n\r\n  scale.exponent = function(_) {\r\n    return arguments.length ? (exponent = +_, rescale()) : exponent;\r\n  };\r\n\r\n  return linearish(scale);\r\n}\r\n\r\nfunction pow$1() {\r\n  var scale = powish(transformer$1());\r\n\r\n  scale.copy = function() {\r\n    return copy(scale, pow$1()).exponent(scale.exponent());\r\n  };\r\n\r\n  initRange.apply(scale, arguments);\r\n\r\n  return scale;\r\n}\r\n\r\nfunction sqrt$1() {\r\n  return pow$1.apply(null, arguments).exponent(0.5);\r\n}\r\n\r\nfunction quantile() {\r\n  var domain = [],\r\n      range = [],\r\n      thresholds = [],\r\n      unknown;\r\n\r\n  function rescale() {\r\n    var i = 0, n = Math.max(1, range.length);\r\n    thresholds = new Array(n - 1);\r\n    while (++i < n) thresholds[i - 1] = threshold(domain, i / n);\r\n    return scale;\r\n  }\r\n\r\n  function scale(x) {\r\n    return isNaN(x = +x) ? unknown : range[bisectRight(thresholds, x)];\r\n  }\r\n\r\n  scale.invertExtent = function(y) {\r\n    var i = range.indexOf(y);\r\n    return i < 0 ? [NaN, NaN] : [\r\n      i > 0 ? thresholds[i - 1] : domain[0],\r\n      i < thresholds.length ? thresholds[i] : domain[domain.length - 1]\r\n    ];\r\n  };\r\n\r\n  scale.domain = function(_) {\r\n    if (!arguments.length) return domain.slice();\r\n    domain = [];\r\n    for (var i = 0, n = _.length, d; i < n; ++i) if (d = _[i], d != null && !isNaN(d = +d)) domain.push(d);\r\n    domain.sort(ascending);\r\n    return rescale();\r\n  };\r\n\r\n  scale.range = function(_) {\r\n    return arguments.length ? (range = slice$5.call(_), rescale()) : range.slice();\r\n  };\r\n\r\n  scale.unknown = function(_) {\r\n    return arguments.length ? (unknown = _, scale) : unknown;\r\n  };\r\n\r\n  scale.quantiles = function() {\r\n    return thresholds.slice();\r\n  };\r\n\r\n  scale.copy = function() {\r\n    return quantile()\r\n        .domain(domain)\r\n        .range(range)\r\n        .unknown(unknown);\r\n  };\r\n\r\n  return initRange.apply(scale, arguments);\r\n}\r\n\r\nfunction quantize$1() {\r\n  var x0 = 0,\r\n      x1 = 1,\r\n      n = 1,\r\n      domain = [0.5],\r\n      range = [0, 1],\r\n      unknown;\r\n\r\n  function scale(x) {\r\n    return x <= x ? range[bisectRight(domain, x, 0, n)] : unknown;\r\n  }\r\n\r\n  function rescale() {\r\n    var i = -1;\r\n    domain = new Array(n);\r\n    while (++i < n) domain[i] = ((i + 1) * x1 - (i - n) * x0) / (n + 1);\r\n    return scale;\r\n  }\r\n\r\n  scale.domain = function(_) {\r\n    return arguments.length ? (x0 = +_[0], x1 = +_[1], rescale()) : [x0, x1];\r\n  };\r\n\r\n  scale.range = function(_) {\r\n    return arguments.length ? (n = (range = slice$5.call(_)).length - 1, rescale()) : range.slice();\r\n  };\r\n\r\n  scale.invertExtent = function(y) {\r\n    var i = range.indexOf(y);\r\n    return i < 0 ? [NaN, NaN]\r\n        : i < 1 ? [x0, domain[0]]\r\n        : i >= n ? [domain[n - 1], x1]\r\n        : [domain[i - 1], domain[i]];\r\n  };\r\n\r\n  scale.unknown = function(_) {\r\n    return arguments.length ? (unknown = _, scale) : scale;\r\n  };\r\n\r\n  scale.thresholds = function() {\r\n    return domain.slice();\r\n  };\r\n\r\n  scale.copy = function() {\r\n    return quantize$1()\r\n        .domain([x0, x1])\r\n        .range(range)\r\n        .unknown(unknown);\r\n  };\r\n\r\n  return initRange.apply(linearish(scale), arguments);\r\n}\r\n\r\nfunction threshold$1() {\r\n  var domain = [0.5],\r\n      range = [0, 1],\r\n      unknown,\r\n      n = 1;\r\n\r\n  function scale(x) {\r\n    return x <= x ? range[bisectRight(domain, x, 0, n)] : unknown;\r\n  }\r\n\r\n  scale.domain = function(_) {\r\n    return arguments.length ? (domain = slice$5.call(_), n = Math.min(domain.length, range.length - 1), scale) : domain.slice();\r\n  };\r\n\r\n  scale.range = function(_) {\r\n    return arguments.length ? (range = slice$5.call(_), n = Math.min(domain.length, range.length - 1), scale) : range.slice();\r\n  };\r\n\r\n  scale.invertExtent = function(y) {\r\n    var i = range.indexOf(y);\r\n    return [domain[i - 1], domain[i]];\r\n  };\r\n\r\n  scale.unknown = function(_) {\r\n    return arguments.length ? (unknown = _, scale) : unknown;\r\n  };\r\n\r\n  scale.copy = function() {\r\n    return threshold$1()\r\n        .domain(domain)\r\n        .range(range)\r\n        .unknown(unknown);\r\n  };\r\n\r\n  return initRange.apply(scale, arguments);\r\n}\r\n\r\nvar t0$1 = new Date,\r\n    t1$1 = new Date;\r\n\r\nfunction newInterval(floori, offseti, count, field) {\r\n\r\n  function interval(date) {\r\n    return floori(date = arguments.length === 0 ? new Date : new Date(+date)), date;\r\n  }\r\n\r\n  interval.floor = function(date) {\r\n    return floori(date = new Date(+date)), date;\r\n  };\r\n\r\n  interval.ceil = function(date) {\r\n    return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;\r\n  };\r\n\r\n  interval.round = function(date) {\r\n    var d0 = interval(date),\r\n        d1 = interval.ceil(date);\r\n    return date - d0 < d1 - date ? d0 : d1;\r\n  };\r\n\r\n  interval.offset = function(date, step) {\r\n    return offseti(date = new Date(+date), step == null ? 1 : Math.floor(step)), date;\r\n  };\r\n\r\n  interval.range = function(start, stop, step) {\r\n    var range = [], previous;\r\n    start = interval.ceil(start);\r\n    step = step == null ? 1 : Math.floor(step);\r\n    if (!(start < stop) || !(step > 0)) return range; // also handles Invalid Date\r\n    do range.push(previous = new Date(+start)), offseti(start, step), floori(start);\r\n    while (previous < start && start < stop);\r\n    return range;\r\n  };\r\n\r\n  interval.filter = function(test) {\r\n    return newInterval(function(date) {\r\n      if (date >= date) while (floori(date), !test(date)) date.setTime(date - 1);\r\n    }, function(date, step) {\r\n      if (date >= date) {\r\n        if (step < 0) while (++step <= 0) {\r\n          while (offseti(date, -1), !test(date)) {} // eslint-disable-line no-empty\r\n        } else while (--step >= 0) {\r\n          while (offseti(date, +1), !test(date)) {} // eslint-disable-line no-empty\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  if (count) {\r\n    interval.count = function(start, end) {\r\n      t0$1.setTime(+start), t1$1.setTime(+end);\r\n      floori(t0$1), floori(t1$1);\r\n      return Math.floor(count(t0$1, t1$1));\r\n    };\r\n\r\n    interval.every = function(step) {\r\n      step = Math.floor(step);\r\n      return !isFinite(step) || !(step > 0) ? null\r\n          : !(step > 1) ? interval\r\n          : interval.filter(field\r\n              ? function(d) { return field(d) % step === 0; }\r\n              : function(d) { return interval.count(0, d) % step === 0; });\r\n    };\r\n  }\r\n\r\n  return interval;\r\n}\r\n\r\nvar millisecond = newInterval(function() {\r\n  // noop\r\n}, function(date, step) {\r\n  date.setTime(+date + step);\r\n}, function(start, end) {\r\n  return end - start;\r\n});\r\n\r\n// An optimized implementation for this simple case.\r\nmillisecond.every = function(k) {\r\n  k = Math.floor(k);\r\n  if (!isFinite(k) || !(k > 0)) return null;\r\n  if (!(k > 1)) return millisecond;\r\n  return newInterval(function(date) {\r\n    date.setTime(Math.floor(date / k) * k);\r\n  }, function(date, step) {\r\n    date.setTime(+date + step * k);\r\n  }, function(start, end) {\r\n    return (end - start) / k;\r\n  });\r\n};\r\nvar milliseconds = millisecond.range;\r\n\r\nvar durationSecond = 1e3;\r\nvar durationMinute = 6e4;\r\nvar durationHour = 36e5;\r\nvar durationDay = 864e5;\r\nvar durationWeek = 6048e5;\r\n\r\nvar second = newInterval(function(date) {\r\n  date.setTime(date - date.getMilliseconds());\r\n}, function(date, step) {\r\n  date.setTime(+date + step * durationSecond);\r\n}, function(start, end) {\r\n  return (end - start) / durationSecond;\r\n}, function(date) {\r\n  return date.getUTCSeconds();\r\n});\r\nvar seconds = second.range;\r\n\r\nvar minute = newInterval(function(date) {\r\n  date.setTime(date - date.getMilliseconds() - date.getSeconds() * durationSecond);\r\n}, function(date, step) {\r\n  date.setTime(+date + step * durationMinute);\r\n}, function(start, end) {\r\n  return (end - start) / durationMinute;\r\n}, function(date) {\r\n  return date.getMinutes();\r\n});\r\nvar minutes = minute.range;\r\n\r\nvar hour = newInterval(function(date) {\r\n  date.setTime(date - date.getMilliseconds() - date.getSeconds() * durationSecond - date.getMinutes() * durationMinute);\r\n}, function(date, step) {\r\n  date.setTime(+date + step * durationHour);\r\n}, function(start, end) {\r\n  return (end - start) / durationHour;\r\n}, function(date) {\r\n  return date.getHours();\r\n});\r\nvar hours = hour.range;\r\n\r\nvar day = newInterval(function(date) {\r\n  date.setHours(0, 0, 0, 0);\r\n}, function(date, step) {\r\n  date.setDate(date.getDate() + step);\r\n}, function(start, end) {\r\n  return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationDay;\r\n}, function(date) {\r\n  return date.getDate() - 1;\r\n});\r\nvar days = day.range;\r\n\r\nfunction weekday(i) {\r\n  return newInterval(function(date) {\r\n    date.setDate(date.getDate() - (date.getDay() + 7 - i) % 7);\r\n    date.setHours(0, 0, 0, 0);\r\n  }, function(date, step) {\r\n    date.setDate(date.getDate() + step * 7);\r\n  }, function(start, end) {\r\n    return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationWeek;\r\n  });\r\n}\r\n\r\nvar sunday = weekday(0);\r\nvar monday = weekday(1);\r\nvar tuesday = weekday(2);\r\nvar wednesday = weekday(3);\r\nvar thursday = weekday(4);\r\nvar friday = weekday(5);\r\nvar saturday = weekday(6);\r\n\r\nvar sundays = sunday.range;\r\nvar mondays = monday.range;\r\nvar tuesdays = tuesday.range;\r\nvar wednesdays = wednesday.range;\r\nvar thursdays = thursday.range;\r\nvar fridays = friday.range;\r\nvar saturdays = saturday.range;\r\n\r\nvar month = newInterval(function(date) {\r\n  date.setDate(1);\r\n  date.setHours(0, 0, 0, 0);\r\n}, function(date, step) {\r\n  date.setMonth(date.getMonth() + step);\r\n}, function(start, end) {\r\n  return end.getMonth() - start.getMonth() + (end.getFullYear() - start.getFullYear()) * 12;\r\n}, function(date) {\r\n  return date.getMonth();\r\n});\r\nvar months = month.range;\r\n\r\nvar year = newInterval(function(date) {\r\n  date.setMonth(0, 1);\r\n  date.setHours(0, 0, 0, 0);\r\n}, function(date, step) {\r\n  date.setFullYear(date.getFullYear() + step);\r\n}, function(start, end) {\r\n  return end.getFullYear() - start.getFullYear();\r\n}, function(date) {\r\n  return date.getFullYear();\r\n});\r\n\r\n// An optimized implementation for this simple case.\r\nyear.every = function(k) {\r\n  return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : newInterval(function(date) {\r\n    date.setFullYear(Math.floor(date.getFullYear() / k) * k);\r\n    date.setMonth(0, 1);\r\n    date.setHours(0, 0, 0, 0);\r\n  }, function(date, step) {\r\n    date.setFullYear(date.getFullYear() + step * k);\r\n  });\r\n};\r\nvar years = year.range;\r\n\r\nvar utcMinute = newInterval(function(date) {\r\n  date.setUTCSeconds(0, 0);\r\n}, function(date, step) {\r\n  date.setTime(+date + step * durationMinute);\r\n}, function(start, end) {\r\n  return (end - start) / durationMinute;\r\n}, function(date) {\r\n  return date.getUTCMinutes();\r\n});\r\nvar utcMinutes = utcMinute.range;\r\n\r\nvar utcHour = newInterval(function(date) {\r\n  date.setUTCMinutes(0, 0, 0);\r\n}, function(date, step) {\r\n  date.setTime(+date + step * durationHour);\r\n}, function(start, end) {\r\n  return (end - start) / durationHour;\r\n}, function(date) {\r\n  return date.getUTCHours();\r\n});\r\nvar utcHours = utcHour.range;\r\n\r\nvar utcDay = newInterval(function(date) {\r\n  date.setUTCHours(0, 0, 0, 0);\r\n}, function(date, step) {\r\n  date.setUTCDate(date.getUTCDate() + step);\r\n}, function(start, end) {\r\n  return (end - start) / durationDay;\r\n}, function(date) {\r\n  return date.getUTCDate() - 1;\r\n});\r\nvar utcDays = utcDay.range;\r\n\r\nfunction utcWeekday(i) {\r\n  return newInterval(function(date) {\r\n    date.setUTCDate(date.getUTCDate() - (date.getUTCDay() + 7 - i) % 7);\r\n    date.setUTCHours(0, 0, 0, 0);\r\n  }, function(date, step) {\r\n    date.setUTCDate(date.getUTCDate() + step * 7);\r\n  }, function(start, end) {\r\n    return (end - start) / durationWeek;\r\n  });\r\n}\r\n\r\nvar utcSunday = utcWeekday(0);\r\nvar utcMonday = utcWeekday(1);\r\nvar utcTuesday = utcWeekday(2);\r\nvar utcWednesday = utcWeekday(3);\r\nvar utcThursday = utcWeekday(4);\r\nvar utcFriday = utcWeekday(5);\r\nvar utcSaturday = utcWeekday(6);\r\n\r\nvar utcSundays = utcSunday.range;\r\nvar utcMondays = utcMonday.range;\r\nvar utcTuesdays = utcTuesday.range;\r\nvar utcWednesdays = utcWednesday.range;\r\nvar utcThursdays = utcThursday.range;\r\nvar utcFridays = utcFriday.range;\r\nvar utcSaturdays = utcSaturday.range;\r\n\r\nvar utcMonth = newInterval(function(date) {\r\n  date.setUTCDate(1);\r\n  date.setUTCHours(0, 0, 0, 0);\r\n}, function(date, step) {\r\n  date.setUTCMonth(date.getUTCMonth() + step);\r\n}, function(start, end) {\r\n  return end.getUTCMonth() - start.getUTCMonth() + (end.getUTCFullYear() - start.getUTCFullYear()) * 12;\r\n}, function(date) {\r\n  return date.getUTCMonth();\r\n});\r\nvar utcMonths = utcMonth.range;\r\n\r\nvar utcYear = newInterval(function(date) {\r\n  date.setUTCMonth(0, 1);\r\n  date.setUTCHours(0, 0, 0, 0);\r\n}, function(date, step) {\r\n  date.setUTCFullYear(date.getUTCFullYear() + step);\r\n}, function(start, end) {\r\n  return end.getUTCFullYear() - start.getUTCFullYear();\r\n}, function(date) {\r\n  return date.getUTCFullYear();\r\n});\r\n\r\n// An optimized implementation for this simple case.\r\nutcYear.every = function(k) {\r\n  return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : newInterval(function(date) {\r\n    date.setUTCFullYear(Math.floor(date.getUTCFullYear() / k) * k);\r\n    date.setUTCMonth(0, 1);\r\n    date.setUTCHours(0, 0, 0, 0);\r\n  }, function(date, step) {\r\n    date.setUTCFullYear(date.getUTCFullYear() + step * k);\r\n  });\r\n};\r\nvar utcYears = utcYear.range;\r\n\r\nfunction localDate(d) {\r\n  if (0 <= d.y && d.y < 100) {\r\n    var date = new Date(-1, d.m, d.d, d.H, d.M, d.S, d.L);\r\n    date.setFullYear(d.y);\r\n    return date;\r\n  }\r\n  return new Date(d.y, d.m, d.d, d.H, d.M, d.S, d.L);\r\n}\r\n\r\nfunction utcDate(d) {\r\n  if (0 <= d.y && d.y < 100) {\r\n    var date = new Date(Date.UTC(-1, d.m, d.d, d.H, d.M, d.S, d.L));\r\n    date.setUTCFullYear(d.y);\r\n    return date;\r\n  }\r\n  return new Date(Date.UTC(d.y, d.m, d.d, d.H, d.M, d.S, d.L));\r\n}\r\n\r\nfunction newDate(y, m, d) {\r\n  return {y: y, m: m, d: d, H: 0, M: 0, S: 0, L: 0};\r\n}\r\n\r\nfunction formatLocale$1(locale) {\r\n  var locale_dateTime = locale.dateTime,\r\n      locale_date = locale.date,\r\n      locale_time = locale.time,\r\n      locale_periods = locale.periods,\r\n      locale_weekdays = locale.days,\r\n      locale_shortWeekdays = locale.shortDays,\r\n      locale_months = locale.months,\r\n      locale_shortMonths = locale.shortMonths;\r\n\r\n  var periodRe = formatRe(locale_periods),\r\n      periodLookup = formatLookup(locale_periods),\r\n      weekdayRe = formatRe(locale_weekdays),\r\n      weekdayLookup = formatLookup(locale_weekdays),\r\n      shortWeekdayRe = formatRe(locale_shortWeekdays),\r\n      shortWeekdayLookup = formatLookup(locale_shortWeekdays),\r\n      monthRe = formatRe(locale_months),\r\n      monthLookup = formatLookup(locale_months),\r\n      shortMonthRe = formatRe(locale_shortMonths),\r\n      shortMonthLookup = formatLookup(locale_shortMonths);\r\n\r\n  var formats = {\r\n    \"a\": formatShortWeekday,\r\n    \"A\": formatWeekday,\r\n    \"b\": formatShortMonth,\r\n    \"B\": formatMonth,\r\n    \"c\": null,\r\n    \"d\": formatDayOfMonth,\r\n    \"e\": formatDayOfMonth,\r\n    \"f\": formatMicroseconds,\r\n    \"H\": formatHour24,\r\n    \"I\": formatHour12,\r\n    \"j\": formatDayOfYear,\r\n    \"L\": formatMilliseconds,\r\n    \"m\": formatMonthNumber,\r\n    \"M\": formatMinutes,\r\n    \"p\": formatPeriod,\r\n    \"q\": formatQuarter,\r\n    \"Q\": formatUnixTimestamp,\r\n    \"s\": formatUnixTimestampSeconds,\r\n    \"S\": formatSeconds,\r\n    \"u\": formatWeekdayNumberMonday,\r\n    \"U\": formatWeekNumberSunday,\r\n    \"V\": formatWeekNumberISO,\r\n    \"w\": formatWeekdayNumberSunday,\r\n    \"W\": formatWeekNumberMonday,\r\n    \"x\": null,\r\n    \"X\": null,\r\n    \"y\": formatYear$1,\r\n    \"Y\": formatFullYear,\r\n    \"Z\": formatZone,\r\n    \"%\": formatLiteralPercent\r\n  };\r\n\r\n  var utcFormats = {\r\n    \"a\": formatUTCShortWeekday,\r\n    \"A\": formatUTCWeekday,\r\n    \"b\": formatUTCShortMonth,\r\n    \"B\": formatUTCMonth,\r\n    \"c\": null,\r\n    \"d\": formatUTCDayOfMonth,\r\n    \"e\": formatUTCDayOfMonth,\r\n    \"f\": formatUTCMicroseconds,\r\n    \"H\": formatUTCHour24,\r\n    \"I\": formatUTCHour12,\r\n    \"j\": formatUTCDayOfYear,\r\n    \"L\": formatUTCMilliseconds,\r\n    \"m\": formatUTCMonthNumber,\r\n    \"M\": formatUTCMinutes,\r\n    \"p\": formatUTCPeriod,\r\n    \"q\": formatUTCQuarter,\r\n    \"Q\": formatUnixTimestamp,\r\n    \"s\": formatUnixTimestampSeconds,\r\n    \"S\": formatUTCSeconds,\r\n    \"u\": formatUTCWeekdayNumberMonday,\r\n    \"U\": formatUTCWeekNumberSunday,\r\n    \"V\": formatUTCWeekNumberISO,\r\n    \"w\": formatUTCWeekdayNumberSunday,\r\n    \"W\": formatUTCWeekNumberMonday,\r\n    \"x\": null,\r\n    \"X\": null,\r\n    \"y\": formatUTCYear,\r\n    \"Y\": formatUTCFullYear,\r\n    \"Z\": formatUTCZone,\r\n    \"%\": formatLiteralPercent\r\n  };\r\n\r\n  var parses = {\r\n    \"a\": parseShortWeekday,\r\n    \"A\": parseWeekday,\r\n    \"b\": parseShortMonth,\r\n    \"B\": parseMonth,\r\n    \"c\": parseLocaleDateTime,\r\n    \"d\": parseDayOfMonth,\r\n    \"e\": parseDayOfMonth,\r\n    \"f\": parseMicroseconds,\r\n    \"H\": parseHour24,\r\n    \"I\": parseHour24,\r\n    \"j\": parseDayOfYear,\r\n    \"L\": parseMilliseconds,\r\n    \"m\": parseMonthNumber,\r\n    \"M\": parseMinutes,\r\n    \"p\": parsePeriod,\r\n    \"q\": parseQuarter,\r\n    \"Q\": parseUnixTimestamp,\r\n    \"s\": parseUnixTimestampSeconds,\r\n    \"S\": parseSeconds,\r\n    \"u\": parseWeekdayNumberMonday,\r\n    \"U\": parseWeekNumberSunday,\r\n    \"V\": parseWeekNumberISO,\r\n    \"w\": parseWeekdayNumberSunday,\r\n    \"W\": parseWeekNumberMonday,\r\n    \"x\": parseLocaleDate,\r\n    \"X\": parseLocaleTime,\r\n    \"y\": parseYear,\r\n    \"Y\": parseFullYear,\r\n    \"Z\": parseZone,\r\n    \"%\": parseLiteralPercent\r\n  };\r\n\r\n  // These recursive directive definitions must be deferred.\r\n  formats.x = newFormat(locale_date, formats);\r\n  formats.X = newFormat(locale_time, formats);\r\n  formats.c = newFormat(locale_dateTime, formats);\r\n  utcFormats.x = newFormat(locale_date, utcFormats);\r\n  utcFormats.X = newFormat(locale_time, utcFormats);\r\n  utcFormats.c = newFormat(locale_dateTime, utcFormats);\r\n\r\n  function newFormat(specifier, formats) {\r\n    return function(date) {\r\n      var string = [],\r\n          i = -1,\r\n          j = 0,\r\n          n = specifier.length,\r\n          c,\r\n          pad,\r\n          format;\r\n\r\n      if (!(date instanceof Date)) date = new Date(+date);\r\n\r\n      while (++i < n) {\r\n        if (specifier.charCodeAt(i) === 37) {\r\n          string.push(specifier.slice(j, i));\r\n          if ((pad = pads[c = specifier.charAt(++i)]) != null) c = specifier.charAt(++i);\r\n          else pad = c === \"e\" ? \" \" : \"0\";\r\n          if (format = formats[c]) c = format(date, pad);\r\n          string.push(c);\r\n          j = i + 1;\r\n        }\r\n      }\r\n\r\n      string.push(specifier.slice(j, i));\r\n      return string.join(\"\");\r\n    };\r\n  }\r\n\r\n  function newParse(specifier, Z) {\r\n    return function(string) {\r\n      var d = newDate(1900, undefined, 1),\r\n          i = parseSpecifier(d, specifier, string += \"\", 0),\r\n          week, day$1;\r\n      if (i != string.length) return null;\r\n\r\n      // If a UNIX timestamp is specified, return it.\r\n      if (\"Q\" in d) return new Date(d.Q);\r\n      if (\"s\" in d) return new Date(d.s * 1000 + (\"L\" in d ? d.L : 0));\r\n\r\n      // If this is utcParse, never use the local timezone.\r\n      if (Z && !(\"Z\" in d)) d.Z = 0;\r\n\r\n      // The am-pm flag is 0 for AM, and 1 for PM.\r\n      if (\"p\" in d) d.H = d.H % 12 + d.p * 12;\r\n\r\n      // If the month was not specified, inherit from the quarter.\r\n      if (d.m === undefined) d.m = \"q\" in d ? d.q : 0;\r\n\r\n      // Convert day-of-week and week-of-year to day-of-year.\r\n      if (\"V\" in d) {\r\n        if (d.V < 1 || d.V > 53) return null;\r\n        if (!(\"w\" in d)) d.w = 1;\r\n        if (\"Z\" in d) {\r\n          week = utcDate(newDate(d.y, 0, 1)), day$1 = week.getUTCDay();\r\n          week = day$1 > 4 || day$1 === 0 ? utcMonday.ceil(week) : utcMonday(week);\r\n          week = utcDay.offset(week, (d.V - 1) * 7);\r\n          d.y = week.getUTCFullYear();\r\n          d.m = week.getUTCMonth();\r\n          d.d = week.getUTCDate() + (d.w + 6) % 7;\r\n        } else {\r\n          week = localDate(newDate(d.y, 0, 1)), day$1 = week.getDay();\r\n          week = day$1 > 4 || day$1 === 0 ? monday.ceil(week) : monday(week);\r\n          week = day.offset(week, (d.V - 1) * 7);\r\n          d.y = week.getFullYear();\r\n          d.m = week.getMonth();\r\n          d.d = week.getDate() + (d.w + 6) % 7;\r\n        }\r\n      } else if (\"W\" in d || \"U\" in d) {\r\n        if (!(\"w\" in d)) d.w = \"u\" in d ? d.u % 7 : \"W\" in d ? 1 : 0;\r\n        day$1 = \"Z\" in d ? utcDate(newDate(d.y, 0, 1)).getUTCDay() : localDate(newDate(d.y, 0, 1)).getDay();\r\n        d.m = 0;\r\n        d.d = \"W\" in d ? (d.w + 6) % 7 + d.W * 7 - (day$1 + 5) % 7 : d.w + d.U * 7 - (day$1 + 6) % 7;\r\n      }\r\n\r\n      // If a time zone is specified, all fields are interpreted as UTC and then\r\n      // offset according to the specified time zone.\r\n      if (\"Z\" in d) {\r\n        d.H += d.Z / 100 | 0;\r\n        d.M += d.Z % 100;\r\n        return utcDate(d);\r\n      }\r\n\r\n      // Otherwise, all fields are in local time.\r\n      return localDate(d);\r\n    };\r\n  }\r\n\r\n  function parseSpecifier(d, specifier, string, j) {\r\n    var i = 0,\r\n        n = specifier.length,\r\n        m = string.length,\r\n        c,\r\n        parse;\r\n\r\n    while (i < n) {\r\n      if (j >= m) return -1;\r\n      c = specifier.charCodeAt(i++);\r\n      if (c === 37) {\r\n        c = specifier.charAt(i++);\r\n        parse = parses[c in pads ? specifier.charAt(i++) : c];\r\n        if (!parse || ((j = parse(d, string, j)) < 0)) return -1;\r\n      } else if (c != string.charCodeAt(j++)) {\r\n        return -1;\r\n      }\r\n    }\r\n\r\n    return j;\r\n  }\r\n\r\n  function parsePeriod(d, string, i) {\r\n    var n = periodRe.exec(string.slice(i));\r\n    return n ? (d.p = periodLookup[n[0].toLowerCase()], i + n[0].length) : -1;\r\n  }\r\n\r\n  function parseShortWeekday(d, string, i) {\r\n    var n = shortWeekdayRe.exec(string.slice(i));\r\n    return n ? (d.w = shortWeekdayLookup[n[0].toLowerCase()], i + n[0].length) : -1;\r\n  }\r\n\r\n  function parseWeekday(d, string, i) {\r\n    var n = weekdayRe.exec(string.slice(i));\r\n    return n ? (d.w = weekdayLookup[n[0].toLowerCase()], i + n[0].length) : -1;\r\n  }\r\n\r\n  function parseShortMonth(d, string, i) {\r\n    var n = shortMonthRe.exec(string.slice(i));\r\n    return n ? (d.m = shortMonthLookup[n[0].toLowerCase()], i + n[0].length) : -1;\r\n  }\r\n\r\n  function parseMonth(d, string, i) {\r\n    var n = monthRe.exec(string.slice(i));\r\n    return n ? (d.m = monthLookup[n[0].toLowerCase()], i + n[0].length) : -1;\r\n  }\r\n\r\n  function parseLocaleDateTime(d, string, i) {\r\n    return parseSpecifier(d, locale_dateTime, string, i);\r\n  }\r\n\r\n  function parseLocaleDate(d, string, i) {\r\n    return parseSpecifier(d, locale_date, string, i);\r\n  }\r\n\r\n  function parseLocaleTime(d, string, i) {\r\n    return parseSpecifier(d, locale_time, string, i);\r\n  }\r\n\r\n  function formatShortWeekday(d) {\r\n    return locale_shortWeekdays[d.getDay()];\r\n  }\r\n\r\n  function formatWeekday(d) {\r\n    return locale_weekdays[d.getDay()];\r\n  }\r\n\r\n  function formatShortMonth(d) {\r\n    return locale_shortMonths[d.getMonth()];\r\n  }\r\n\r\n  function formatMonth(d) {\r\n    return locale_months[d.getMonth()];\r\n  }\r\n\r\n  function formatPeriod(d) {\r\n    return locale_periods[+(d.getHours() >= 12)];\r\n  }\r\n\r\n  function formatQuarter(d) {\r\n    return 1 + ~~(d.getMonth() / 3);\r\n  }\r\n\r\n  function formatUTCShortWeekday(d) {\r\n    return locale_shortWeekdays[d.getUTCDay()];\r\n  }\r\n\r\n  function formatUTCWeekday(d) {\r\n    return locale_weekdays[d.getUTCDay()];\r\n  }\r\n\r\n  function formatUTCShortMonth(d) {\r\n    return locale_shortMonths[d.getUTCMonth()];\r\n  }\r\n\r\n  function formatUTCMonth(d) {\r\n    return locale_months[d.getUTCMonth()];\r\n  }\r\n\r\n  function formatUTCPeriod(d) {\r\n    return locale_periods[+(d.getUTCHours() >= 12)];\r\n  }\r\n\r\n  function formatUTCQuarter(d) {\r\n    return 1 + ~~(d.getUTCMonth() / 3);\r\n  }\r\n\r\n  return {\r\n    format: function(specifier) {\r\n      var f = newFormat(specifier += \"\", formats);\r\n      f.toString = function() { return specifier; };\r\n      return f;\r\n    },\r\n    parse: function(specifier) {\r\n      var p = newParse(specifier += \"\", false);\r\n      p.toString = function() { return specifier; };\r\n      return p;\r\n    },\r\n    utcFormat: function(specifier) {\r\n      var f = newFormat(specifier += \"\", utcFormats);\r\n      f.toString = function() { return specifier; };\r\n      return f;\r\n    },\r\n    utcParse: function(specifier) {\r\n      var p = newParse(specifier += \"\", true);\r\n      p.toString = function() { return specifier; };\r\n      return p;\r\n    }\r\n  };\r\n}\r\n\r\nvar pads = {\"-\": \"\", \"_\": \" \", \"0\": \"0\"},\r\n    numberRe = /^\\s*\\d+/, // note: ignores next directive\r\n    percentRe = /^%/,\r\n    requoteRe = /[\\\\^$*+?|[\\]().{}]/g;\r\n\r\nfunction pad$1(value, fill, width) {\r\n  var sign = value < 0 ? \"-\" : \"\",\r\n      string = (sign ? -value : value) + \"\",\r\n      length = string.length;\r\n  return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);\r\n}\r\n\r\nfunction requote(s) {\r\n  return s.replace(requoteRe, \"\\\\$&\");\r\n}\r\n\r\nfunction formatRe(names) {\r\n  return new RegExp(\"^(?:\" + names.map(requote).join(\"|\") + \")\", \"i\");\r\n}\r\n\r\nfunction formatLookup(names) {\r\n  var map = {}, i = -1, n = names.length;\r\n  while (++i < n) map[names[i].toLowerCase()] = i;\r\n  return map;\r\n}\r\n\r\nfunction parseWeekdayNumberSunday(d, string, i) {\r\n  var n = numberRe.exec(string.slice(i, i + 1));\r\n  return n ? (d.w = +n[0], i + n[0].length) : -1;\r\n}\r\n\r\nfunction parseWeekdayNumberMonday(d, string, i) {\r\n  var n = numberRe.exec(string.slice(i, i + 1));\r\n  return n ? (d.u = +n[0], i + n[0].length) : -1;\r\n}\r\n\r\nfunction parseWeekNumberSunday(d, string, i) {\r\n  var n = numberRe.exec(string.slice(i, i + 2));\r\n  return n ? (d.U = +n[0], i + n[0].length) : -1;\r\n}\r\n\r\nfunction parseWeekNumberISO(d, string, i) {\r\n  var n = numberRe.exec(string.slice(i, i + 2));\r\n  return n ? (d.V = +n[0], i + n[0].length) : -1;\r\n}\r\n\r\nfunction parseWeekNumberMonday(d, string, i) {\r\n  var n = numberRe.exec(string.slice(i, i + 2));\r\n  return n ? (d.W = +n[0], i + n[0].length) : -1;\r\n}\r\n\r\nfunction parseFullYear(d, string, i) {\r\n  var n = numberRe.exec(string.slice(i, i + 4));\r\n  return n ? (d.y = +n[0], i + n[0].length) : -1;\r\n}\r\n\r\nfunction parseYear(d, string, i) {\r\n  var n = numberRe.exec(string.slice(i, i + 2));\r\n  return n ? (d.y = +n[0] + (+n[0] > 68 ? 1900 : 2000), i + n[0].length) : -1;\r\n}\r\n\r\nfunction parseZone(d, string, i) {\r\n  var n = /^(Z)|([+-]\\d\\d)(?::?(\\d\\d))?/.exec(string.slice(i, i + 6));\r\n  return n ? (d.Z = n[1] ? 0 : -(n[2] + (n[3] || \"00\")), i + n[0].length) : -1;\r\n}\r\n\r\nfunction parseQuarter(d, string, i) {\r\n  var n = numberRe.exec(string.slice(i, i + 1));\r\n  return n ? (d.q = n[0] * 3 - 3, i + n[0].length) : -1;\r\n}\r\n\r\nfunction parseMonthNumber(d, string, i) {\r\n  var n = numberRe.exec(string.slice(i, i + 2));\r\n  return n ? (d.m = n[0] - 1, i + n[0].length) : -1;\r\n}\r\n\r\nfunction parseDayOfMonth(d, string, i) {\r\n  var n = numberRe.exec(string.slice(i, i + 2));\r\n  return n ? (d.d = +n[0], i + n[0].length) : -1;\r\n}\r\n\r\nfunction parseDayOfYear(d, string, i) {\r\n  var n = numberRe.exec(string.slice(i, i + 3));\r\n  return n ? (d.m = 0, d.d = +n[0], i + n[0].length) : -1;\r\n}\r\n\r\nfunction parseHour24(d, string, i) {\r\n  var n = numberRe.exec(string.slice(i, i + 2));\r\n  return n ? (d.H = +n[0], i + n[0].length) : -1;\r\n}\r\n\r\nfunction parseMinutes(d, string, i) {\r\n  var n = numberRe.exec(string.slice(i, i + 2));\r\n  return n ? (d.M = +n[0], i + n[0].length) : -1;\r\n}\r\n\r\nfunction parseSeconds(d, string, i) {\r\n  var n = numberRe.exec(string.slice(i, i + 2));\r\n  return n ? (d.S = +n[0], i + n[0].length) : -1;\r\n}\r\n\r\nfunction parseMilliseconds(d, string, i) {\r\n  var n = numberRe.exec(string.slice(i, i + 3));\r\n  return n ? (d.L = +n[0], i + n[0].length) : -1;\r\n}\r\n\r\nfunction parseMicroseconds(d, string, i) {\r\n  var n = numberRe.exec(string.slice(i, i + 6));\r\n  return n ? (d.L = Math.floor(n[0] / 1000), i + n[0].length) : -1;\r\n}\r\n\r\nfunction parseLiteralPercent(d, string, i) {\r\n  var n = percentRe.exec(string.slice(i, i + 1));\r\n  return n ? i + n[0].length : -1;\r\n}\r\n\r\nfunction parseUnixTimestamp(d, string, i) {\r\n  var n = numberRe.exec(string.slice(i));\r\n  return n ? (d.Q = +n[0], i + n[0].length) : -1;\r\n}\r\n\r\nfunction parseUnixTimestampSeconds(d, string, i) {\r\n  var n = numberRe.exec(string.slice(i));\r\n  return n ? (d.s = +n[0], i + n[0].length) : -1;\r\n}\r\n\r\nfunction formatDayOfMonth(d, p) {\r\n  return pad$1(d.getDate(), p, 2);\r\n}\r\n\r\nfunction formatHour24(d, p) {\r\n  return pad$1(d.getHours(), p, 2);\r\n}\r\n\r\nfunction formatHour12(d, p) {\r\n  return pad$1(d.getHours() % 12 || 12, p, 2);\r\n}\r\n\r\nfunction formatDayOfYear(d, p) {\r\n  return pad$1(1 + day.count(year(d), d), p, 3);\r\n}\r\n\r\nfunction formatMilliseconds(d, p) {\r\n  return pad$1(d.getMilliseconds(), p, 3);\r\n}\r\n\r\nfunction formatMicroseconds(d, p) {\r\n  return formatMilliseconds(d, p) + \"000\";\r\n}\r\n\r\nfunction formatMonthNumber(d, p) {\r\n  return pad$1(d.getMonth() + 1, p, 2);\r\n}\r\n\r\nfunction formatMinutes(d, p) {\r\n  return pad$1(d.getMinutes(), p, 2);\r\n}\r\n\r\nfunction formatSeconds(d, p) {\r\n  return pad$1(d.getSeconds(), p, 2);\r\n}\r\n\r\nfunction formatWeekdayNumberMonday(d) {\r\n  var day = d.getDay();\r\n  return day === 0 ? 7 : day;\r\n}\r\n\r\nfunction formatWeekNumberSunday(d, p) {\r\n  return pad$1(sunday.count(year(d) - 1, d), p, 2);\r\n}\r\n\r\nfunction formatWeekNumberISO(d, p) {\r\n  var day = d.getDay();\r\n  d = (day >= 4 || day === 0) ? thursday(d) : thursday.ceil(d);\r\n  return pad$1(thursday.count(year(d), d) + (year(d).getDay() === 4), p, 2);\r\n}\r\n\r\nfunction formatWeekdayNumberSunday(d) {\r\n  return d.getDay();\r\n}\r\n\r\nfunction formatWeekNumberMonday(d, p) {\r\n  return pad$1(monday.count(year(d) - 1, d), p, 2);\r\n}\r\n\r\nfunction formatYear$1(d, p) {\r\n  return pad$1(d.getFullYear() % 100, p, 2);\r\n}\r\n\r\nfunction formatFullYear(d, p) {\r\n  return pad$1(d.getFullYear() % 10000, p, 4);\r\n}\r\n\r\nfunction formatZone(d) {\r\n  var z = d.getTimezoneOffset();\r\n  return (z > 0 ? \"-\" : (z *= -1, \"+\"))\r\n      + pad$1(z / 60 | 0, \"0\", 2)\r\n      + pad$1(z % 60, \"0\", 2);\r\n}\r\n\r\nfunction formatUTCDayOfMonth(d, p) {\r\n  return pad$1(d.getUTCDate(), p, 2);\r\n}\r\n\r\nfunction formatUTCHour24(d, p) {\r\n  return pad$1(d.getUTCHours(), p, 2);\r\n}\r\n\r\nfunction formatUTCHour12(d, p) {\r\n  return pad$1(d.getUTCHours() % 12 || 12, p, 2);\r\n}\r\n\r\nfunction formatUTCDayOfYear(d, p) {\r\n  return pad$1(1 + utcDay.count(utcYear(d), d), p, 3);\r\n}\r\n\r\nfunction formatUTCMilliseconds(d, p) {\r\n  return pad$1(d.getUTCMilliseconds(), p, 3);\r\n}\r\n\r\nfunction formatUTCMicroseconds(d, p) {\r\n  return formatUTCMilliseconds(d, p) + \"000\";\r\n}\r\n\r\nfunction formatUTCMonthNumber(d, p) {\r\n  return pad$1(d.getUTCMonth() + 1, p, 2);\r\n}\r\n\r\nfunction formatUTCMinutes(d, p) {\r\n  return pad$1(d.getUTCMinutes(), p, 2);\r\n}\r\n\r\nfunction formatUTCSeconds(d, p) {\r\n  return pad$1(d.getUTCSeconds(), p, 2);\r\n}\r\n\r\nfunction formatUTCWeekdayNumberMonday(d) {\r\n  var dow = d.getUTCDay();\r\n  return dow === 0 ? 7 : dow;\r\n}\r\n\r\nfunction formatUTCWeekNumberSunday(d, p) {\r\n  return pad$1(utcSunday.count(utcYear(d) - 1, d), p, 2);\r\n}\r\n\r\nfunction formatUTCWeekNumberISO(d, p) {\r\n  var day = d.getUTCDay();\r\n  d = (day >= 4 || day === 0) ? utcThursday(d) : utcThursday.ceil(d);\r\n  return pad$1(utcThursday.count(utcYear(d), d) + (utcYear(d).getUTCDay() === 4), p, 2);\r\n}\r\n\r\nfunction formatUTCWeekdayNumberSunday(d) {\r\n  return d.getUTCDay();\r\n}\r\n\r\nfunction formatUTCWeekNumberMonday(d, p) {\r\n  return pad$1(utcMonday.count(utcYear(d) - 1, d), p, 2);\r\n}\r\n\r\nfunction formatUTCYear(d, p) {\r\n  return pad$1(d.getUTCFullYear() % 100, p, 2);\r\n}\r\n\r\nfunction formatUTCFullYear(d, p) {\r\n  return pad$1(d.getUTCFullYear() % 10000, p, 4);\r\n}\r\n\r\nfunction formatUTCZone() {\r\n  return \"+0000\";\r\n}\r\n\r\nfunction formatLiteralPercent() {\r\n  return \"%\";\r\n}\r\n\r\nfunction formatUnixTimestamp(d) {\r\n  return +d;\r\n}\r\n\r\nfunction formatUnixTimestampSeconds(d) {\r\n  return Math.floor(+d / 1000);\r\n}\r\n\r\nvar locale$1;\r\n\r\ndefaultLocale$1({\r\n  dateTime: \"%x, %X\",\r\n  date: \"%-m/%-d/%Y\",\r\n  time: \"%-I:%M:%S %p\",\r\n  periods: [\"AM\", \"PM\"],\r\n  days: [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"],\r\n  shortDays: [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"],\r\n  months: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"],\r\n  shortMonths: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"]\r\n});\r\n\r\nfunction defaultLocale$1(definition) {\r\n  locale$1 = formatLocale$1(definition);\r\n  exports.timeFormat = locale$1.format;\r\n  exports.timeParse = locale$1.parse;\r\n  exports.utcFormat = locale$1.utcFormat;\r\n  exports.utcParse = locale$1.utcParse;\r\n  return locale$1;\r\n}\r\n\r\nvar isoSpecifier = \"%Y-%m-%dT%H:%M:%S.%LZ\";\r\n\r\nfunction formatIsoNative(date) {\r\n  return date.toISOString();\r\n}\r\n\r\nvar formatIso = Date.prototype.toISOString\r\n    ? formatIsoNative\r\n    : exports.utcFormat(isoSpecifier);\r\n\r\nfunction parseIsoNative(string) {\r\n  var date = new Date(string);\r\n  return isNaN(date) ? null : date;\r\n}\r\n\r\nvar parseIso = +new Date(\"2000-01-01T00:00:00.000Z\")\r\n    ? parseIsoNative\r\n    : exports.utcParse(isoSpecifier);\r\n\r\nvar durationSecond$1 = 1000,\r\n    durationMinute$1 = durationSecond$1 * 60,\r\n    durationHour$1 = durationMinute$1 * 60,\r\n    durationDay$1 = durationHour$1 * 24,\r\n    durationWeek$1 = durationDay$1 * 7,\r\n    durationMonth = durationDay$1 * 30,\r\n    durationYear = durationDay$1 * 365;\r\n\r\nfunction date$1(t) {\r\n  return new Date(t);\r\n}\r\n\r\nfunction number$3(t) {\r\n  return t instanceof Date ? +t : +new Date(+t);\r\n}\r\n\r\nfunction calendar(year, month, week, day, hour, minute, second, millisecond, format) {\r\n  var scale = continuous(identity$6, identity$6),\r\n      invert = scale.invert,\r\n      domain = scale.domain;\r\n\r\n  var formatMillisecond = format(\".%L\"),\r\n      formatSecond = format(\":%S\"),\r\n      formatMinute = format(\"%I:%M\"),\r\n      formatHour = format(\"%I %p\"),\r\n      formatDay = format(\"%a %d\"),\r\n      formatWeek = format(\"%b %d\"),\r\n      formatMonth = format(\"%B\"),\r\n      formatYear = format(\"%Y\");\r\n\r\n  var tickIntervals = [\r\n    [second,  1,      durationSecond$1],\r\n    [second,  5,  5 * durationSecond$1],\r\n    [second, 15, 15 * durationSecond$1],\r\n    [second, 30, 30 * durationSecond$1],\r\n    [minute,  1,      durationMinute$1],\r\n    [minute,  5,  5 * durationMinute$1],\r\n    [minute, 15, 15 * durationMinute$1],\r\n    [minute, 30, 30 * durationMinute$1],\r\n    [  hour,  1,      durationHour$1  ],\r\n    [  hour,  3,  3 * durationHour$1  ],\r\n    [  hour,  6,  6 * durationHour$1  ],\r\n    [  hour, 12, 12 * durationHour$1  ],\r\n    [   day,  1,      durationDay$1   ],\r\n    [   day,  2,  2 * durationDay$1   ],\r\n    [  week,  1,      durationWeek$1  ],\r\n    [ month,  1,      durationMonth ],\r\n    [ month,  3,  3 * durationMonth ],\r\n    [  year,  1,      durationYear  ]\r\n  ];\r\n\r\n  function tickFormat(date) {\r\n    return (second(date) < date ? formatMillisecond\r\n        : minute(date) < date ? formatSecond\r\n        : hour(date) < date ? formatMinute\r\n        : day(date) < date ? formatHour\r\n        : month(date) < date ? (week(date) < date ? formatDay : formatWeek)\r\n        : year(date) < date ? formatMonth\r\n        : formatYear)(date);\r\n  }\r\n\r\n  function tickInterval(interval, start, stop, step) {\r\n    if (interval == null) interval = 10;\r\n\r\n    // If a desired tick count is specified, pick a reasonable tick interval\r\n    // based on the extent of the domain and a rough estimate of tick size.\r\n    // Otherwise, assume interval is already a time interval and use it.\r\n    if (typeof interval === \"number\") {\r\n      var target = Math.abs(stop - start) / interval,\r\n          i = bisector(function(i) { return i[2]; }).right(tickIntervals, target);\r\n      if (i === tickIntervals.length) {\r\n        step = tickStep(start / durationYear, stop / durationYear, interval);\r\n        interval = year;\r\n      } else if (i) {\r\n        i = tickIntervals[target / tickIntervals[i - 1][2] < tickIntervals[i][2] / target ? i - 1 : i];\r\n        step = i[1];\r\n        interval = i[0];\r\n      } else {\r\n        step = Math.max(tickStep(start, stop, interval), 1);\r\n        interval = millisecond;\r\n      }\r\n    }\r\n\r\n    return step == null ? interval : interval.every(step);\r\n  }\r\n\r\n  scale.invert = function(y) {\r\n    return new Date(invert(y));\r\n  };\r\n\r\n  scale.domain = function(_) {\r\n    return arguments.length ? domain(map$3.call(_, number$3)) : domain().map(date$1);\r\n  };\r\n\r\n  scale.ticks = function(interval, step) {\r\n    var d = domain(),\r\n        t0 = d[0],\r\n        t1 = d[d.length - 1],\r\n        r = t1 < t0,\r\n        t;\r\n    if (r) t = t0, t0 = t1, t1 = t;\r\n    t = tickInterval(interval, t0, t1, step);\r\n    t = t ? t.range(t0, t1 + 1) : []; // inclusive stop\r\n    return r ? t.reverse() : t;\r\n  };\r\n\r\n  scale.tickFormat = function(count, specifier) {\r\n    return specifier == null ? tickFormat : format(specifier);\r\n  };\r\n\r\n  scale.nice = function(interval, step) {\r\n    var d = domain();\r\n    return (interval = tickInterval(interval, d[0], d[d.length - 1], step))\r\n        ? domain(nice(d, interval))\r\n        : scale;\r\n  };\r\n\r\n  scale.copy = function() {\r\n    return copy(scale, calendar(year, month, week, day, hour, minute, second, millisecond, format));\r\n  };\r\n\r\n  return scale;\r\n}\r\n\r\nfunction time() {\r\n  return initRange.apply(calendar(year, month, sunday, day, hour, minute, second, millisecond, exports.timeFormat).domain([new Date(2000, 0, 1), new Date(2000, 0, 2)]), arguments);\r\n}\r\n\r\nfunction utcTime() {\r\n  return initRange.apply(calendar(utcYear, utcMonth, utcSunday, utcDay, utcHour, utcMinute, second, millisecond, exports.utcFormat).domain([Date.UTC(2000, 0, 1), Date.UTC(2000, 0, 2)]), arguments);\r\n}\r\n\r\nfunction transformer$2() {\r\n  var x0 = 0,\r\n      x1 = 1,\r\n      t0,\r\n      t1,\r\n      k10,\r\n      transform,\r\n      interpolator = identity$6,\r\n      clamp = false,\r\n      unknown;\r\n\r\n  function scale(x) {\r\n    return isNaN(x = +x) ? unknown : interpolator(k10 === 0 ? 0.5 : (x = (transform(x) - t0) * k10, clamp ? Math.max(0, Math.min(1, x)) : x));\r\n  }\r\n\r\n  scale.domain = function(_) {\r\n    return arguments.length ? (t0 = transform(x0 = +_[0]), t1 = transform(x1 = +_[1]), k10 = t0 === t1 ? 0 : 1 / (t1 - t0), scale) : [x0, x1];\r\n  };\r\n\r\n  scale.clamp = function(_) {\r\n    return arguments.length ? (clamp = !!_, scale) : clamp;\r\n  };\r\n\r\n  scale.interpolator = function(_) {\r\n    return arguments.length ? (interpolator = _, scale) : interpolator;\r\n  };\r\n\r\n  scale.unknown = function(_) {\r\n    return arguments.length ? (unknown = _, scale) : unknown;\r\n  };\r\n\r\n  return function(t) {\r\n    transform = t, t0 = t(x0), t1 = t(x1), k10 = t0 === t1 ? 0 : 1 / (t1 - t0);\r\n    return scale;\r\n  };\r\n}\r\n\r\nfunction copy$1(source, target) {\r\n  return target\r\n      .domain(source.domain())\r\n      .interpolator(source.interpolator())\r\n      .clamp(source.clamp())\r\n      .unknown(source.unknown());\r\n}\r\n\r\nfunction sequential() {\r\n  var scale = linearish(transformer$2()(identity$6));\r\n\r\n  scale.copy = function() {\r\n    return copy$1(scale, sequential());\r\n  };\r\n\r\n  return initInterpolator.apply(scale, arguments);\r\n}\r\n\r\nfunction sequentialLog() {\r\n  var scale = loggish(transformer$2()).domain([1, 10]);\r\n\r\n  scale.copy = function() {\r\n    return copy$1(scale, sequentialLog()).base(scale.base());\r\n  };\r\n\r\n  return initInterpolator.apply(scale, arguments);\r\n}\r\n\r\nfunction sequentialSymlog() {\r\n  var scale = symlogish(transformer$2());\r\n\r\n  scale.copy = function() {\r\n    return copy$1(scale, sequentialSymlog()).constant(scale.constant());\r\n  };\r\n\r\n  return initInterpolator.apply(scale, arguments);\r\n}\r\n\r\nfunction sequentialPow() {\r\n  var scale = powish(transformer$2());\r\n\r\n  scale.copy = function() {\r\n    return copy$1(scale, sequentialPow()).exponent(scale.exponent());\r\n  };\r\n\r\n  return initInterpolator.apply(scale, arguments);\r\n}\r\n\r\nfunction sequentialSqrt() {\r\n  return sequentialPow.apply(null, arguments).exponent(0.5);\r\n}\r\n\r\nfunction sequentialQuantile() {\r\n  var domain = [],\r\n      interpolator = identity$6;\r\n\r\n  function scale(x) {\r\n    if (!isNaN(x = +x)) return interpolator((bisectRight(domain, x) - 1) / (domain.length - 1));\r\n  }\r\n\r\n  scale.domain = function(_) {\r\n    if (!arguments.length) return domain.slice();\r\n    domain = [];\r\n    for (var i = 0, n = _.length, d; i < n; ++i) if (d = _[i], d != null && !isNaN(d = +d)) domain.push(d);\r\n    domain.sort(ascending);\r\n    return scale;\r\n  };\r\n\r\n  scale.interpolator = function(_) {\r\n    return arguments.length ? (interpolator = _, scale) : interpolator;\r\n  };\r\n\r\n  scale.copy = function() {\r\n    return sequentialQuantile(interpolator).domain(domain);\r\n  };\r\n\r\n  return initInterpolator.apply(scale, arguments);\r\n}\r\n\r\nfunction transformer$3() {\r\n  var x0 = 0,\r\n      x1 = 0.5,\r\n      x2 = 1,\r\n      t0,\r\n      t1,\r\n      t2,\r\n      k10,\r\n      k21,\r\n      interpolator = identity$6,\r\n      transform,\r\n      clamp = false,\r\n      unknown;\r\n\r\n  function scale(x) {\r\n    return isNaN(x = +x) ? unknown : (x = 0.5 + ((x = +transform(x)) - t1) * (x < t1 ? k10 : k21), interpolator(clamp ? Math.max(0, Math.min(1, x)) : x));\r\n  }\r\n\r\n  scale.domain = function(_) {\r\n    return arguments.length ? (t0 = transform(x0 = +_[0]), t1 = transform(x1 = +_[1]), t2 = transform(x2 = +_[2]), k10 = t0 === t1 ? 0 : 0.5 / (t1 - t0), k21 = t1 === t2 ? 0 : 0.5 / (t2 - t1), scale) : [x0, x1, x2];\r\n  };\r\n\r\n  scale.clamp = function(_) {\r\n    return arguments.length ? (clamp = !!_, scale) : clamp;\r\n  };\r\n\r\n  scale.interpolator = function(_) {\r\n    return arguments.length ? (interpolator = _, scale) : interpolator;\r\n  };\r\n\r\n  scale.unknown = function(_) {\r\n    return arguments.length ? (unknown = _, scale) : unknown;\r\n  };\r\n\r\n  return function(t) {\r\n    transform = t, t0 = t(x0), t1 = t(x1), t2 = t(x2), k10 = t0 === t1 ? 0 : 0.5 / (t1 - t0), k21 = t1 === t2 ? 0 : 0.5 / (t2 - t1);\r\n    return scale;\r\n  };\r\n}\r\n\r\nfunction diverging() {\r\n  var scale = linearish(transformer$3()(identity$6));\r\n\r\n  scale.copy = function() {\r\n    return copy$1(scale, diverging());\r\n  };\r\n\r\n  return initInterpolator.apply(scale, arguments);\r\n}\r\n\r\nfunction divergingLog() {\r\n  var scale = loggish(transformer$3()).domain([0.1, 1, 10]);\r\n\r\n  scale.copy = function() {\r\n    return copy$1(scale, divergingLog()).base(scale.base());\r\n  };\r\n\r\n  return initInterpolator.apply(scale, arguments);\r\n}\r\n\r\nfunction divergingSymlog() {\r\n  var scale = symlogish(transformer$3());\r\n\r\n  scale.copy = function() {\r\n    return copy$1(scale, divergingSymlog()).constant(scale.constant());\r\n  };\r\n\r\n  return initInterpolator.apply(scale, arguments);\r\n}\r\n\r\nfunction divergingPow() {\r\n  var scale = powish(transformer$3());\r\n\r\n  scale.copy = function() {\r\n    return copy$1(scale, divergingPow()).exponent(scale.exponent());\r\n  };\r\n\r\n  return initInterpolator.apply(scale, arguments);\r\n}\r\n\r\nfunction divergingSqrt() {\r\n  return divergingPow.apply(null, arguments).exponent(0.5);\r\n}\r\n\r\nfunction colors(specifier) {\r\n  var n = specifier.length / 6 | 0, colors = new Array(n), i = 0;\r\n  while (i < n) colors[i] = \"#\" + specifier.slice(i * 6, ++i * 6);\r\n  return colors;\r\n}\r\n\r\nvar category10 = colors(\"1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf\");\r\n\r\nvar Accent = colors(\"7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666\");\r\n\r\nvar Dark2 = colors(\"1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666\");\r\n\r\nvar Paired = colors(\"a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928\");\r\n\r\nvar Pastel1 = colors(\"fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2\");\r\n\r\nvar Pastel2 = colors(\"b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc\");\r\n\r\nvar Set1 = colors(\"e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999\");\r\n\r\nvar Set2 = colors(\"66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3\");\r\n\r\nvar Set3 = colors(\"8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f\");\r\n\r\nvar Tableau10 = colors(\"4e79a7f28e2ce1575976b7b259a14fedc949af7aa1ff9da79c755fbab0ab\");\r\n\r\nfunction ramp(scheme) {\r\n  return rgbBasis(scheme[scheme.length - 1]);\r\n}\r\n\r\nvar scheme = new Array(3).concat(\r\n  \"d8b365f5f5f55ab4ac\",\r\n  \"a6611adfc27d80cdc1018571\",\r\n  \"a6611adfc27df5f5f580cdc1018571\",\r\n  \"8c510ad8b365f6e8c3c7eae55ab4ac01665e\",\r\n  \"8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e\",\r\n  \"8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e\",\r\n  \"8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e\",\r\n  \"5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30\",\r\n  \"5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30\"\r\n).map(colors);\r\n\r\nvar BrBG = ramp(scheme);\r\n\r\nvar scheme$1 = new Array(3).concat(\r\n  \"af8dc3f7f7f77fbf7b\",\r\n  \"7b3294c2a5cfa6dba0008837\",\r\n  \"7b3294c2a5cff7f7f7a6dba0008837\",\r\n  \"762a83af8dc3e7d4e8d9f0d37fbf7b1b7837\",\r\n  \"762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837\",\r\n  \"762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837\",\r\n  \"762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837\",\r\n  \"40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b\",\r\n  \"40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b\"\r\n).map(colors);\r\n\r\nvar PRGn = ramp(scheme$1);\r\n\r\nvar scheme$2 = new Array(3).concat(\r\n  \"e9a3c9f7f7f7a1d76a\",\r\n  \"d01c8bf1b6dab8e1864dac26\",\r\n  \"d01c8bf1b6daf7f7f7b8e1864dac26\",\r\n  \"c51b7de9a3c9fde0efe6f5d0a1d76a4d9221\",\r\n  \"c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221\",\r\n  \"c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221\",\r\n  \"c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221\",\r\n  \"8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419\",\r\n  \"8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419\"\r\n).map(colors);\r\n\r\nvar PiYG = ramp(scheme$2);\r\n\r\nvar scheme$3 = new Array(3).concat(\r\n  \"998ec3f7f7f7f1a340\",\r\n  \"5e3c99b2abd2fdb863e66101\",\r\n  \"5e3c99b2abd2f7f7f7fdb863e66101\",\r\n  \"542788998ec3d8daebfee0b6f1a340b35806\",\r\n  \"542788998ec3d8daebf7f7f7fee0b6f1a340b35806\",\r\n  \"5427888073acb2abd2d8daebfee0b6fdb863e08214b35806\",\r\n  \"5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806\",\r\n  \"2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08\",\r\n  \"2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08\"\r\n).map(colors);\r\n\r\nvar PuOr = ramp(scheme$3);\r\n\r\nvar scheme$4 = new Array(3).concat(\r\n  \"ef8a62f7f7f767a9cf\",\r\n  \"ca0020f4a58292c5de0571b0\",\r\n  \"ca0020f4a582f7f7f792c5de0571b0\",\r\n  \"b2182bef8a62fddbc7d1e5f067a9cf2166ac\",\r\n  \"b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac\",\r\n  \"b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac\",\r\n  \"b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac\",\r\n  \"67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061\",\r\n  \"67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061\"\r\n).map(colors);\r\n\r\nvar RdBu = ramp(scheme$4);\r\n\r\nvar scheme$5 = new Array(3).concat(\r\n  \"ef8a62ffffff999999\",\r\n  \"ca0020f4a582bababa404040\",\r\n  \"ca0020f4a582ffffffbababa404040\",\r\n  \"b2182bef8a62fddbc7e0e0e09999994d4d4d\",\r\n  \"b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d\",\r\n  \"b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d\",\r\n  \"b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d\",\r\n  \"67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a\",\r\n  \"67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a\"\r\n).map(colors);\r\n\r\nvar RdGy = ramp(scheme$5);\r\n\r\nvar scheme$6 = new Array(3).concat(\r\n  \"fc8d59ffffbf91bfdb\",\r\n  \"d7191cfdae61abd9e92c7bb6\",\r\n  \"d7191cfdae61ffffbfabd9e92c7bb6\",\r\n  \"d73027fc8d59fee090e0f3f891bfdb4575b4\",\r\n  \"d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4\",\r\n  \"d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4\",\r\n  \"d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4\",\r\n  \"a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695\",\r\n  \"a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695\"\r\n).map(colors);\r\n\r\nvar RdYlBu = ramp(scheme$6);\r\n\r\nvar scheme$7 = new Array(3).concat(\r\n  \"fc8d59ffffbf91cf60\",\r\n  \"d7191cfdae61a6d96a1a9641\",\r\n  \"d7191cfdae61ffffbfa6d96a1a9641\",\r\n  \"d73027fc8d59fee08bd9ef8b91cf601a9850\",\r\n  \"d73027fc8d59fee08bffffbfd9ef8b91cf601a9850\",\r\n  \"d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850\",\r\n  \"d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850\",\r\n  \"a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837\",\r\n  \"a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837\"\r\n).map(colors);\r\n\r\nvar RdYlGn = ramp(scheme$7);\r\n\r\nvar scheme$8 = new Array(3).concat(\r\n  \"fc8d59ffffbf99d594\",\r\n  \"d7191cfdae61abdda42b83ba\",\r\n  \"d7191cfdae61ffffbfabdda42b83ba\",\r\n  \"d53e4ffc8d59fee08be6f59899d5943288bd\",\r\n  \"d53e4ffc8d59fee08bffffbfe6f59899d5943288bd\",\r\n  \"d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd\",\r\n  \"d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd\",\r\n  \"9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2\",\r\n  \"9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2\"\r\n).map(colors);\r\n\r\nvar Spectral = ramp(scheme$8);\r\n\r\nvar scheme$9 = new Array(3).concat(\r\n  \"e5f5f999d8c92ca25f\",\r\n  \"edf8fbb2e2e266c2a4238b45\",\r\n  \"edf8fbb2e2e266c2a42ca25f006d2c\",\r\n  \"edf8fbccece699d8c966c2a42ca25f006d2c\",\r\n  \"edf8fbccece699d8c966c2a441ae76238b45005824\",\r\n  \"f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824\",\r\n  \"f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b\"\r\n).map(colors);\r\n\r\nvar BuGn = ramp(scheme$9);\r\n\r\nvar scheme$a = new Array(3).concat(\r\n  \"e0ecf49ebcda8856a7\",\r\n  \"edf8fbb3cde38c96c688419d\",\r\n  \"edf8fbb3cde38c96c68856a7810f7c\",\r\n  \"edf8fbbfd3e69ebcda8c96c68856a7810f7c\",\r\n  \"edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b\",\r\n  \"f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b\",\r\n  \"f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b\"\r\n).map(colors);\r\n\r\nvar BuPu = ramp(scheme$a);\r\n\r\nvar scheme$b = new Array(3).concat(\r\n  \"e0f3dba8ddb543a2ca\",\r\n  \"f0f9e8bae4bc7bccc42b8cbe\",\r\n  \"f0f9e8bae4bc7bccc443a2ca0868ac\",\r\n  \"f0f9e8ccebc5a8ddb57bccc443a2ca0868ac\",\r\n  \"f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e\",\r\n  \"f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e\",\r\n  \"f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081\"\r\n).map(colors);\r\n\r\nvar GnBu = ramp(scheme$b);\r\n\r\nvar scheme$c = new Array(3).concat(\r\n  \"fee8c8fdbb84e34a33\",\r\n  \"fef0d9fdcc8afc8d59d7301f\",\r\n  \"fef0d9fdcc8afc8d59e34a33b30000\",\r\n  \"fef0d9fdd49efdbb84fc8d59e34a33b30000\",\r\n  \"fef0d9fdd49efdbb84fc8d59ef6548d7301f990000\",\r\n  \"fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000\",\r\n  \"fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000\"\r\n).map(colors);\r\n\r\nvar OrRd = ramp(scheme$c);\r\n\r\nvar scheme$d = new Array(3).concat(\r\n  \"ece2f0a6bddb1c9099\",\r\n  \"f6eff7bdc9e167a9cf02818a\",\r\n  \"f6eff7bdc9e167a9cf1c9099016c59\",\r\n  \"f6eff7d0d1e6a6bddb67a9cf1c9099016c59\",\r\n  \"f6eff7d0d1e6a6bddb67a9cf3690c002818a016450\",\r\n  \"fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450\",\r\n  \"fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636\"\r\n).map(colors);\r\n\r\nvar PuBuGn = ramp(scheme$d);\r\n\r\nvar scheme$e = new Array(3).concat(\r\n  \"ece7f2a6bddb2b8cbe\",\r\n  \"f1eef6bdc9e174a9cf0570b0\",\r\n  \"f1eef6bdc9e174a9cf2b8cbe045a8d\",\r\n  \"f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d\",\r\n  \"f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b\",\r\n  \"fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b\",\r\n  \"fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858\"\r\n).map(colors);\r\n\r\nvar PuBu = ramp(scheme$e);\r\n\r\nvar scheme$f = new Array(3).concat(\r\n  \"e7e1efc994c7dd1c77\",\r\n  \"f1eef6d7b5d8df65b0ce1256\",\r\n  \"f1eef6d7b5d8df65b0dd1c77980043\",\r\n  \"f1eef6d4b9dac994c7df65b0dd1c77980043\",\r\n  \"f1eef6d4b9dac994c7df65b0e7298ace125691003f\",\r\n  \"f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f\",\r\n  \"f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f\"\r\n).map(colors);\r\n\r\nvar PuRd = ramp(scheme$f);\r\n\r\nvar scheme$g = new Array(3).concat(\r\n  \"fde0ddfa9fb5c51b8a\",\r\n  \"feebe2fbb4b9f768a1ae017e\",\r\n  \"feebe2fbb4b9f768a1c51b8a7a0177\",\r\n  \"feebe2fcc5c0fa9fb5f768a1c51b8a7a0177\",\r\n  \"feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177\",\r\n  \"fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177\",\r\n  \"fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a\"\r\n).map(colors);\r\n\r\nvar RdPu = ramp(scheme$g);\r\n\r\nvar scheme$h = new Array(3).concat(\r\n  \"edf8b17fcdbb2c7fb8\",\r\n  \"ffffcca1dab441b6c4225ea8\",\r\n  \"ffffcca1dab441b6c42c7fb8253494\",\r\n  \"ffffccc7e9b47fcdbb41b6c42c7fb8253494\",\r\n  \"ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84\",\r\n  \"ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84\",\r\n  \"ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58\"\r\n).map(colors);\r\n\r\nvar YlGnBu = ramp(scheme$h);\r\n\r\nvar scheme$i = new Array(3).concat(\r\n  \"f7fcb9addd8e31a354\",\r\n  \"ffffccc2e69978c679238443\",\r\n  \"ffffccc2e69978c67931a354006837\",\r\n  \"ffffccd9f0a3addd8e78c67931a354006837\",\r\n  \"ffffccd9f0a3addd8e78c67941ab5d238443005a32\",\r\n  \"ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32\",\r\n  \"ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529\"\r\n).map(colors);\r\n\r\nvar YlGn = ramp(scheme$i);\r\n\r\nvar scheme$j = new Array(3).concat(\r\n  \"fff7bcfec44fd95f0e\",\r\n  \"ffffd4fed98efe9929cc4c02\",\r\n  \"ffffd4fed98efe9929d95f0e993404\",\r\n  \"ffffd4fee391fec44ffe9929d95f0e993404\",\r\n  \"ffffd4fee391fec44ffe9929ec7014cc4c028c2d04\",\r\n  \"ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04\",\r\n  \"ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506\"\r\n).map(colors);\r\n\r\nvar YlOrBr = ramp(scheme$j);\r\n\r\nvar scheme$k = new Array(3).concat(\r\n  \"ffeda0feb24cf03b20\",\r\n  \"ffffb2fecc5cfd8d3ce31a1c\",\r\n  \"ffffb2fecc5cfd8d3cf03b20bd0026\",\r\n  \"ffffb2fed976feb24cfd8d3cf03b20bd0026\",\r\n  \"ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026\",\r\n  \"ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026\",\r\n  \"ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026\"\r\n).map(colors);\r\n\r\nvar YlOrRd = ramp(scheme$k);\r\n\r\nvar scheme$l = new Array(3).concat(\r\n  \"deebf79ecae13182bd\",\r\n  \"eff3ffbdd7e76baed62171b5\",\r\n  \"eff3ffbdd7e76baed63182bd08519c\",\r\n  \"eff3ffc6dbef9ecae16baed63182bd08519c\",\r\n  \"eff3ffc6dbef9ecae16baed64292c62171b5084594\",\r\n  \"f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594\",\r\n  \"f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b\"\r\n).map(colors);\r\n\r\nvar Blues = ramp(scheme$l);\r\n\r\nvar scheme$m = new Array(3).concat(\r\n  \"e5f5e0a1d99b31a354\",\r\n  \"edf8e9bae4b374c476238b45\",\r\n  \"edf8e9bae4b374c47631a354006d2c\",\r\n  \"edf8e9c7e9c0a1d99b74c47631a354006d2c\",\r\n  \"edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32\",\r\n  \"f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32\",\r\n  \"f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b\"\r\n).map(colors);\r\n\r\nvar Greens = ramp(scheme$m);\r\n\r\nvar scheme$n = new Array(3).concat(\r\n  \"f0f0f0bdbdbd636363\",\r\n  \"f7f7f7cccccc969696525252\",\r\n  \"f7f7f7cccccc969696636363252525\",\r\n  \"f7f7f7d9d9d9bdbdbd969696636363252525\",\r\n  \"f7f7f7d9d9d9bdbdbd969696737373525252252525\",\r\n  \"fffffff0f0f0d9d9d9bdbdbd969696737373525252252525\",\r\n  \"fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000\"\r\n).map(colors);\r\n\r\nvar Greys = ramp(scheme$n);\r\n\r\nvar scheme$o = new Array(3).concat(\r\n  \"efedf5bcbddc756bb1\",\r\n  \"f2f0f7cbc9e29e9ac86a51a3\",\r\n  \"f2f0f7cbc9e29e9ac8756bb154278f\",\r\n  \"f2f0f7dadaebbcbddc9e9ac8756bb154278f\",\r\n  \"f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486\",\r\n  \"fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486\",\r\n  \"fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d\"\r\n).map(colors);\r\n\r\nvar Purples = ramp(scheme$o);\r\n\r\nvar scheme$p = new Array(3).concat(\r\n  \"fee0d2fc9272de2d26\",\r\n  \"fee5d9fcae91fb6a4acb181d\",\r\n  \"fee5d9fcae91fb6a4ade2d26a50f15\",\r\n  \"fee5d9fcbba1fc9272fb6a4ade2d26a50f15\",\r\n  \"fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d\",\r\n  \"fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d\",\r\n  \"fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d\"\r\n).map(colors);\r\n\r\nvar Reds = ramp(scheme$p);\r\n\r\nvar scheme$q = new Array(3).concat(\r\n  \"fee6cefdae6be6550d\",\r\n  \"feeddefdbe85fd8d3cd94701\",\r\n  \"feeddefdbe85fd8d3ce6550da63603\",\r\n  \"feeddefdd0a2fdae6bfd8d3ce6550da63603\",\r\n  \"feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04\",\r\n  \"fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04\",\r\n  \"fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704\"\r\n).map(colors);\r\n\r\nvar Oranges = ramp(scheme$q);\r\n\r\nfunction cividis(t) {\r\n  t = Math.max(0, Math.min(1, t));\r\n  return \"rgb(\"\r\n      + Math.max(0, Math.min(255, Math.round(-4.54 - t * (35.34 - t * (2381.73 - t * (6402.7 - t * (7024.72 - t * 2710.57))))))) + \", \"\r\n      + Math.max(0, Math.min(255, Math.round(32.49 + t * (170.73 + t * (52.82 - t * (131.46 - t * (176.58 - t * 67.37))))))) + \", \"\r\n      + Math.max(0, Math.min(255, Math.round(81.24 + t * (442.36 - t * (2482.43 - t * (6167.24 - t * (6614.94 - t * 2475.67)))))))\r\n      + \")\";\r\n}\r\n\r\nvar cubehelix$3 = cubehelixLong(cubehelix(300, 0.5, 0.0), cubehelix(-240, 0.5, 1.0));\r\n\r\nvar warm = cubehelixLong(cubehelix(-100, 0.75, 0.35), cubehelix(80, 1.50, 0.8));\r\n\r\nvar cool = cubehelixLong(cubehelix(260, 0.75, 0.35), cubehelix(80, 1.50, 0.8));\r\n\r\nvar c = cubehelix();\r\n\r\nfunction rainbow(t) {\r\n  if (t < 0 || t > 1) t -= Math.floor(t);\r\n  var ts = Math.abs(t - 0.5);\r\n  c.h = 360 * t - 100;\r\n  c.s = 1.5 - 1.5 * ts;\r\n  c.l = 0.8 - 0.9 * ts;\r\n  return c + \"\";\r\n}\r\n\r\nvar c$1 = rgb(),\r\n    pi_1_3 = Math.PI / 3,\r\n    pi_2_3 = Math.PI * 2 / 3;\r\n\r\nfunction sinebow(t) {\r\n  var x;\r\n  t = (0.5 - t) * Math.PI;\r\n  c$1.r = 255 * (x = Math.sin(t)) * x;\r\n  c$1.g = 255 * (x = Math.sin(t + pi_1_3)) * x;\r\n  c$1.b = 255 * (x = Math.sin(t + pi_2_3)) * x;\r\n  return c$1 + \"\";\r\n}\r\n\r\nfunction turbo(t) {\r\n  t = Math.max(0, Math.min(1, t));\r\n  return \"rgb(\"\r\n      + Math.max(0, Math.min(255, Math.round(34.61 + t * (1172.33 - t * (10793.56 - t * (33300.12 - t * (38394.49 - t * 14825.05))))))) + \", \"\r\n      + Math.max(0, Math.min(255, Math.round(23.31 + t * (557.33 + t * (1225.33 - t * (3574.96 - t * (1073.77 + t * 707.56))))))) + \", \"\r\n      + Math.max(0, Math.min(255, Math.round(27.2 + t * (3211.1 - t * (15327.97 - t * (27814 - t * (22569.18 - t * 6838.66)))))))\r\n      + \")\";\r\n}\r\n\r\nfunction ramp$1(range) {\r\n  var n = range.length;\r\n  return function(t) {\r\n    return range[Math.max(0, Math.min(n - 1, Math.floor(t * n)))];\r\n  };\r\n}\r\n\r\nvar viridis = ramp$1(colors(\"44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725\"));\r\n\r\nvar magma = ramp$1(colors(\"00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf\"));\r\n\r\nvar inferno = ramp$1(colors(\"00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4\"));\r\n\r\nvar plasma = ramp$1(colors(\"0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921\"));\r\n\r\nfunction constant$b(x) {\r\n  return function constant() {\r\n    return x;\r\n  };\r\n}\r\n\r\nvar abs$1 = Math.abs;\r\nvar atan2$1 = Math.atan2;\r\nvar cos$2 = Math.cos;\r\nvar max$2 = Math.max;\r\nvar min$1 = Math.min;\r\nvar sin$2 = Math.sin;\r\nvar sqrt$2 = Math.sqrt;\r\n\r\nvar epsilon$3 = 1e-12;\r\nvar pi$4 = Math.PI;\r\nvar halfPi$3 = pi$4 / 2;\r\nvar tau$4 = 2 * pi$4;\r\n\r\nfunction acos$1(x) {\r\n  return x > 1 ? 0 : x < -1 ? pi$4 : Math.acos(x);\r\n}\r\n\r\nfunction asin$1(x) {\r\n  return x >= 1 ? halfPi$3 : x <= -1 ? -halfPi$3 : Math.asin(x);\r\n}\r\n\r\nfunction arcInnerRadius(d) {\r\n  return d.innerRadius;\r\n}\r\n\r\nfunction arcOuterRadius(d) {\r\n  return d.outerRadius;\r\n}\r\n\r\nfunction arcStartAngle(d) {\r\n  return d.startAngle;\r\n}\r\n\r\nfunction arcEndAngle(d) {\r\n  return d.endAngle;\r\n}\r\n\r\nfunction arcPadAngle(d) {\r\n  return d && d.padAngle; // Note: optional!\r\n}\r\n\r\nfunction intersect(x0, y0, x1, y1, x2, y2, x3, y3) {\r\n  var x10 = x1 - x0, y10 = y1 - y0,\r\n      x32 = x3 - x2, y32 = y3 - y2,\r\n      t = y32 * x10 - x32 * y10;\r\n  if (t * t < epsilon$3) return;\r\n  t = (x32 * (y0 - y2) - y32 * (x0 - x2)) / t;\r\n  return [x0 + t * x10, y0 + t * y10];\r\n}\r\n\r\n// Compute perpendicular offset line of length rc.\r\n// http://mathworld.wolfram.com/Circle-LineIntersection.html\r\nfunction cornerTangents(x0, y0, x1, y1, r1, rc, cw) {\r\n  var x01 = x0 - x1,\r\n      y01 = y0 - y1,\r\n      lo = (cw ? rc : -rc) / sqrt$2(x01 * x01 + y01 * y01),\r\n      ox = lo * y01,\r\n      oy = -lo * x01,\r\n      x11 = x0 + ox,\r\n      y11 = y0 + oy,\r\n      x10 = x1 + ox,\r\n      y10 = y1 + oy,\r\n      x00 = (x11 + x10) / 2,\r\n      y00 = (y11 + y10) / 2,\r\n      dx = x10 - x11,\r\n      dy = y10 - y11,\r\n      d2 = dx * dx + dy * dy,\r\n      r = r1 - rc,\r\n      D = x11 * y10 - x10 * y11,\r\n      d = (dy < 0 ? -1 : 1) * sqrt$2(max$2(0, r * r * d2 - D * D)),\r\n      cx0 = (D * dy - dx * d) / d2,\r\n      cy0 = (-D * dx - dy * d) / d2,\r\n      cx1 = (D * dy + dx * d) / d2,\r\n      cy1 = (-D * dx + dy * d) / d2,\r\n      dx0 = cx0 - x00,\r\n      dy0 = cy0 - y00,\r\n      dx1 = cx1 - x00,\r\n      dy1 = cy1 - y00;\r\n\r\n  // Pick the closer of the two intersection points.\r\n  // TODO Is there a faster way to determine which intersection to use?\r\n  if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1) cx0 = cx1, cy0 = cy1;\r\n\r\n  return {\r\n    cx: cx0,\r\n    cy: cy0,\r\n    x01: -ox,\r\n    y01: -oy,\r\n    x11: cx0 * (r1 / r - 1),\r\n    y11: cy0 * (r1 / r - 1)\r\n  };\r\n}\r\n\r\nfunction arc() {\r\n  var innerRadius = arcInnerRadius,\r\n      outerRadius = arcOuterRadius,\r\n      cornerRadius = constant$b(0),\r\n      padRadius = null,\r\n      startAngle = arcStartAngle,\r\n      endAngle = arcEndAngle,\r\n      padAngle = arcPadAngle,\r\n      context = null;\r\n\r\n  function arc() {\r\n    var buffer,\r\n        r,\r\n        r0 = +innerRadius.apply(this, arguments),\r\n        r1 = +outerRadius.apply(this, arguments),\r\n        a0 = startAngle.apply(this, arguments) - halfPi$3,\r\n        a1 = endAngle.apply(this, arguments) - halfPi$3,\r\n        da = abs$1(a1 - a0),\r\n        cw = a1 > a0;\r\n\r\n    if (!context) context = buffer = path();\r\n\r\n    // Ensure that the outer radius is always larger than the inner radius.\r\n    if (r1 < r0) r = r1, r1 = r0, r0 = r;\r\n\r\n    // Is it a point?\r\n    if (!(r1 > epsilon$3)) context.moveTo(0, 0);\r\n\r\n    // Or is it a circle or annulus?\r\n    else if (da > tau$4 - epsilon$3) {\r\n      context.moveTo(r1 * cos$2(a0), r1 * sin$2(a0));\r\n      context.arc(0, 0, r1, a0, a1, !cw);\r\n      if (r0 > epsilon$3) {\r\n        context.moveTo(r0 * cos$2(a1), r0 * sin$2(a1));\r\n        context.arc(0, 0, r0, a1, a0, cw);\r\n      }\r\n    }\r\n\r\n    // Or is it a circular or annular sector?\r\n    else {\r\n      var a01 = a0,\r\n          a11 = a1,\r\n          a00 = a0,\r\n          a10 = a1,\r\n          da0 = da,\r\n          da1 = da,\r\n          ap = padAngle.apply(this, arguments) / 2,\r\n          rp = (ap > epsilon$3) && (padRadius ? +padRadius.apply(this, arguments) : sqrt$2(r0 * r0 + r1 * r1)),\r\n          rc = min$1(abs$1(r1 - r0) / 2, +cornerRadius.apply(this, arguments)),\r\n          rc0 = rc,\r\n          rc1 = rc,\r\n          t0,\r\n          t1;\r\n\r\n      // Apply padding? Note that since r1 ≥ r0, da1 ≥ da0.\r\n      if (rp > epsilon$3) {\r\n        var p0 = asin$1(rp / r0 * sin$2(ap)),\r\n            p1 = asin$1(rp / r1 * sin$2(ap));\r\n        if ((da0 -= p0 * 2) > epsilon$3) p0 *= (cw ? 1 : -1), a00 += p0, a10 -= p0;\r\n        else da0 = 0, a00 = a10 = (a0 + a1) / 2;\r\n        if ((da1 -= p1 * 2) > epsilon$3) p1 *= (cw ? 1 : -1), a01 += p1, a11 -= p1;\r\n        else da1 = 0, a01 = a11 = (a0 + a1) / 2;\r\n      }\r\n\r\n      var x01 = r1 * cos$2(a01),\r\n          y01 = r1 * sin$2(a01),\r\n          x10 = r0 * cos$2(a10),\r\n          y10 = r0 * sin$2(a10);\r\n\r\n      // Apply rounded corners?\r\n      if (rc > epsilon$3) {\r\n        var x11 = r1 * cos$2(a11),\r\n            y11 = r1 * sin$2(a11),\r\n            x00 = r0 * cos$2(a00),\r\n            y00 = r0 * sin$2(a00),\r\n            oc;\r\n\r\n        // Restrict the corner radius according to the sector angle.\r\n        if (da < pi$4 && (oc = intersect(x01, y01, x00, y00, x11, y11, x10, y10))) {\r\n          var ax = x01 - oc[0],\r\n              ay = y01 - oc[1],\r\n              bx = x11 - oc[0],\r\n              by = y11 - oc[1],\r\n              kc = 1 / sin$2(acos$1((ax * bx + ay * by) / (sqrt$2(ax * ax + ay * ay) * sqrt$2(bx * bx + by * by))) / 2),\r\n              lc = sqrt$2(oc[0] * oc[0] + oc[1] * oc[1]);\r\n          rc0 = min$1(rc, (r0 - lc) / (kc - 1));\r\n          rc1 = min$1(rc, (r1 - lc) / (kc + 1));\r\n        }\r\n      }\r\n\r\n      // Is the sector collapsed to a line?\r\n      if (!(da1 > epsilon$3)) context.moveTo(x01, y01);\r\n\r\n      // Does the sector’s outer ring have rounded corners?\r\n      else if (rc1 > epsilon$3) {\r\n        t0 = cornerTangents(x00, y00, x01, y01, r1, rc1, cw);\r\n        t1 = cornerTangents(x11, y11, x10, y10, r1, rc1, cw);\r\n\r\n        context.moveTo(t0.cx + t0.x01, t0.cy + t0.y01);\r\n\r\n        // Have the corners merged?\r\n        if (rc1 < rc) context.arc(t0.cx, t0.cy, rc1, atan2$1(t0.y01, t0.x01), atan2$1(t1.y01, t1.x01), !cw);\r\n\r\n        // Otherwise, draw the two corners and the ring.\r\n        else {\r\n          context.arc(t0.cx, t0.cy, rc1, atan2$1(t0.y01, t0.x01), atan2$1(t0.y11, t0.x11), !cw);\r\n          context.arc(0, 0, r1, atan2$1(t0.cy + t0.y11, t0.cx + t0.x11), atan2$1(t1.cy + t1.y11, t1.cx + t1.x11), !cw);\r\n          context.arc(t1.cx, t1.cy, rc1, atan2$1(t1.y11, t1.x11), atan2$1(t1.y01, t1.x01), !cw);\r\n        }\r\n      }\r\n\r\n      // Or is the outer ring just a circular arc?\r\n      else context.moveTo(x01, y01), context.arc(0, 0, r1, a01, a11, !cw);\r\n\r\n      // Is there no inner ring, and it’s a circular sector?\r\n      // Or perhaps it’s an annular sector collapsed due to padding?\r\n      if (!(r0 > epsilon$3) || !(da0 > epsilon$3)) context.lineTo(x10, y10);\r\n\r\n      // Does the sector’s inner ring (or point) have rounded corners?\r\n      else if (rc0 > epsilon$3) {\r\n        t0 = cornerTangents(x10, y10, x11, y11, r0, -rc0, cw);\r\n        t1 = cornerTangents(x01, y01, x00, y00, r0, -rc0, cw);\r\n\r\n        context.lineTo(t0.cx + t0.x01, t0.cy + t0.y01);\r\n\r\n        // Have the corners merged?\r\n        if (rc0 < rc) context.arc(t0.cx, t0.cy, rc0, atan2$1(t0.y01, t0.x01), atan2$1(t1.y01, t1.x01), !cw);\r\n\r\n        // Otherwise, draw the two corners and the ring.\r\n        else {\r\n          context.arc(t0.cx, t0.cy, rc0, atan2$1(t0.y01, t0.x01), atan2$1(t0.y11, t0.x11), !cw);\r\n          context.arc(0, 0, r0, atan2$1(t0.cy + t0.y11, t0.cx + t0.x11), atan2$1(t1.cy + t1.y11, t1.cx + t1.x11), cw);\r\n          context.arc(t1.cx, t1.cy, rc0, atan2$1(t1.y11, t1.x11), atan2$1(t1.y01, t1.x01), !cw);\r\n        }\r\n      }\r\n\r\n      // Or is the inner ring just a circular arc?\r\n      else context.arc(0, 0, r0, a10, a00, cw);\r\n    }\r\n\r\n    context.closePath();\r\n\r\n    if (buffer) return context = null, buffer + \"\" || null;\r\n  }\r\n\r\n  arc.centroid = function() {\r\n    var r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2,\r\n        a = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - pi$4 / 2;\r\n    return [cos$2(a) * r, sin$2(a) * r];\r\n  };\r\n\r\n  arc.innerRadius = function(_) {\r\n    return arguments.length ? (innerRadius = typeof _ === \"function\" ? _ : constant$b(+_), arc) : innerRadius;\r\n  };\r\n\r\n  arc.outerRadius = function(_) {\r\n    return arguments.length ? (outerRadius = typeof _ === \"function\" ? _ : constant$b(+_), arc) : outerRadius;\r\n  };\r\n\r\n  arc.cornerRadius = function(_) {\r\n    return arguments.length ? (cornerRadius = typeof _ === \"function\" ? _ : constant$b(+_), arc) : cornerRadius;\r\n  };\r\n\r\n  arc.padRadius = function(_) {\r\n    return arguments.length ? (padRadius = _ == null ? null : typeof _ === \"function\" ? _ : constant$b(+_), arc) : padRadius;\r\n  };\r\n\r\n  arc.startAngle = function(_) {\r\n    return arguments.length ? (startAngle = typeof _ === \"function\" ? _ : constant$b(+_), arc) : startAngle;\r\n  };\r\n\r\n  arc.endAngle = function(_) {\r\n    return arguments.length ? (endAngle = typeof _ === \"function\" ? _ : constant$b(+_), arc) : endAngle;\r\n  };\r\n\r\n  arc.padAngle = function(_) {\r\n    return arguments.length ? (padAngle = typeof _ === \"function\" ? _ : constant$b(+_), arc) : padAngle;\r\n  };\r\n\r\n  arc.context = function(_) {\r\n    return arguments.length ? ((context = _ == null ? null : _), arc) : context;\r\n  };\r\n\r\n  return arc;\r\n}\r\n\r\nfunction Linear(context) {\r\n  this._context = context;\r\n}\r\n\r\nLinear.prototype = {\r\n  areaStart: function() {\r\n    this._line = 0;\r\n  },\r\n  areaEnd: function() {\r\n    this._line = NaN;\r\n  },\r\n  lineStart: function() {\r\n    this._point = 0;\r\n  },\r\n  lineEnd: function() {\r\n    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();\r\n    this._line = 1 - this._line;\r\n  },\r\n  point: function(x, y) {\r\n    x = +x, y = +y;\r\n    switch (this._point) {\r\n      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;\r\n      case 1: this._point = 2; // proceed\r\n      default: this._context.lineTo(x, y); break;\r\n    }\r\n  }\r\n};\r\n\r\nfunction curveLinear(context) {\r\n  return new Linear(context);\r\n}\r\n\r\nfunction x$3(p) {\r\n  return p[0];\r\n}\r\n\r\nfunction y$3(p) {\r\n  return p[1];\r\n}\r\n\r\nfunction line() {\r\n  var x = x$3,\r\n      y = y$3,\r\n      defined = constant$b(true),\r\n      context = null,\r\n      curve = curveLinear,\r\n      output = null;\r\n\r\n  function line(data) {\r\n    var i,\r\n        n = data.length,\r\n        d,\r\n        defined0 = false,\r\n        buffer;\r\n\r\n    if (context == null) output = curve(buffer = path());\r\n\r\n    for (i = 0; i <= n; ++i) {\r\n      if (!(i < n && defined(d = data[i], i, data)) === defined0) {\r\n        if (defined0 = !defined0) output.lineStart();\r\n        else output.lineEnd();\r\n      }\r\n      if (defined0) output.point(+x(d, i, data), +y(d, i, data));\r\n    }\r\n\r\n    if (buffer) return output = null, buffer + \"\" || null;\r\n  }\r\n\r\n  line.x = function(_) {\r\n    return arguments.length ? (x = typeof _ === \"function\" ? _ : constant$b(+_), line) : x;\r\n  };\r\n\r\n  line.y = function(_) {\r\n    return arguments.length ? (y = typeof _ === \"function\" ? _ : constant$b(+_), line) : y;\r\n  };\r\n\r\n  line.defined = function(_) {\r\n    return arguments.length ? (defined = typeof _ === \"function\" ? _ : constant$b(!!_), line) : defined;\r\n  };\r\n\r\n  line.curve = function(_) {\r\n    return arguments.length ? (curve = _, context != null && (output = curve(context)), line) : curve;\r\n  };\r\n\r\n  line.context = function(_) {\r\n    return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), line) : context;\r\n  };\r\n\r\n  return line;\r\n}\r\n\r\nfunction area$3() {\r\n  var x0 = x$3,\r\n      x1 = null,\r\n      y0 = constant$b(0),\r\n      y1 = y$3,\r\n      defined = constant$b(true),\r\n      context = null,\r\n      curve = curveLinear,\r\n      output = null;\r\n\r\n  function area(data) {\r\n    var i,\r\n        j,\r\n        k,\r\n        n = data.length,\r\n        d,\r\n        defined0 = false,\r\n        buffer,\r\n        x0z = new Array(n),\r\n        y0z = new Array(n);\r\n\r\n    if (context == null) output = curve(buffer = path());\r\n\r\n    for (i = 0; i <= n; ++i) {\r\n      if (!(i < n && defined(d = data[i], i, data)) === defined0) {\r\n        if (defined0 = !defined0) {\r\n          j = i;\r\n          output.areaStart();\r\n          output.lineStart();\r\n        } else {\r\n          output.lineEnd();\r\n          output.lineStart();\r\n          for (k = i - 1; k >= j; --k) {\r\n            output.point(x0z[k], y0z[k]);\r\n          }\r\n          output.lineEnd();\r\n          output.areaEnd();\r\n        }\r\n      }\r\n      if (defined0) {\r\n        x0z[i] = +x0(d, i, data), y0z[i] = +y0(d, i, data);\r\n        output.point(x1 ? +x1(d, i, data) : x0z[i], y1 ? +y1(d, i, data) : y0z[i]);\r\n      }\r\n    }\r\n\r\n    if (buffer) return output = null, buffer + \"\" || null;\r\n  }\r\n\r\n  function arealine() {\r\n    return line().defined(defined).curve(curve).context(context);\r\n  }\r\n\r\n  area.x = function(_) {\r\n    return arguments.length ? (x0 = typeof _ === \"function\" ? _ : constant$b(+_), x1 = null, area) : x0;\r\n  };\r\n\r\n  area.x0 = function(_) {\r\n    return arguments.length ? (x0 = typeof _ === \"function\" ? _ : constant$b(+_), area) : x0;\r\n  };\r\n\r\n  area.x1 = function(_) {\r\n    return arguments.length ? (x1 = _ == null ? null : typeof _ === \"function\" ? _ : constant$b(+_), area) : x1;\r\n  };\r\n\r\n  area.y = function(_) {\r\n    return arguments.length ? (y0 = typeof _ === \"function\" ? _ : constant$b(+_), y1 = null, area) : y0;\r\n  };\r\n\r\n  area.y0 = function(_) {\r\n    return arguments.length ? (y0 = typeof _ === \"function\" ? _ : constant$b(+_), area) : y0;\r\n  };\r\n\r\n  area.y1 = function(_) {\r\n    return arguments.length ? (y1 = _ == null ? null : typeof _ === \"function\" ? _ : constant$b(+_), area) : y1;\r\n  };\r\n\r\n  area.lineX0 =\r\n  area.lineY0 = function() {\r\n    return arealine().x(x0).y(y0);\r\n  };\r\n\r\n  area.lineY1 = function() {\r\n    return arealine().x(x0).y(y1);\r\n  };\r\n\r\n  area.lineX1 = function() {\r\n    return arealine().x(x1).y(y0);\r\n  };\r\n\r\n  area.defined = function(_) {\r\n    return arguments.length ? (defined = typeof _ === \"function\" ? _ : constant$b(!!_), area) : defined;\r\n  };\r\n\r\n  area.curve = function(_) {\r\n    return arguments.length ? (curve = _, context != null && (output = curve(context)), area) : curve;\r\n  };\r\n\r\n  area.context = function(_) {\r\n    return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), area) : context;\r\n  };\r\n\r\n  return area;\r\n}\r\n\r\nfunction descending$1(a, b) {\r\n  return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;\r\n}\r\n\r\nfunction identity$8(d) {\r\n  return d;\r\n}\r\n\r\nfunction pie() {\r\n  var value = identity$8,\r\n      sortValues = descending$1,\r\n      sort = null,\r\n      startAngle = constant$b(0),\r\n      endAngle = constant$b(tau$4),\r\n      padAngle = constant$b(0);\r\n\r\n  function pie(data) {\r\n    var i,\r\n        n = data.length,\r\n        j,\r\n        k,\r\n        sum = 0,\r\n        index = new Array(n),\r\n        arcs = new Array(n),\r\n        a0 = +startAngle.apply(this, arguments),\r\n        da = Math.min(tau$4, Math.max(-tau$4, endAngle.apply(this, arguments) - a0)),\r\n        a1,\r\n        p = Math.min(Math.abs(da) / n, padAngle.apply(this, arguments)),\r\n        pa = p * (da < 0 ? -1 : 1),\r\n        v;\r\n\r\n    for (i = 0; i < n; ++i) {\r\n      if ((v = arcs[index[i] = i] = +value(data[i], i, data)) > 0) {\r\n        sum += v;\r\n      }\r\n    }\r\n\r\n    // Optionally sort the arcs by previously-computed values or by data.\r\n    if (sortValues != null) index.sort(function(i, j) { return sortValues(arcs[i], arcs[j]); });\r\n    else if (sort != null) index.sort(function(i, j) { return sort(data[i], data[j]); });\r\n\r\n    // Compute the arcs! They are stored in the original data's order.\r\n    for (i = 0, k = sum ? (da - n * pa) / sum : 0; i < n; ++i, a0 = a1) {\r\n      j = index[i], v = arcs[j], a1 = a0 + (v > 0 ? v * k : 0) + pa, arcs[j] = {\r\n        data: data[j],\r\n        index: i,\r\n        value: v,\r\n        startAngle: a0,\r\n        endAngle: a1,\r\n        padAngle: p\r\n      };\r\n    }\r\n\r\n    return arcs;\r\n  }\r\n\r\n  pie.value = function(_) {\r\n    return arguments.length ? (value = typeof _ === \"function\" ? _ : constant$b(+_), pie) : value;\r\n  };\r\n\r\n  pie.sortValues = function(_) {\r\n    return arguments.length ? (sortValues = _, sort = null, pie) : sortValues;\r\n  };\r\n\r\n  pie.sort = function(_) {\r\n    return arguments.length ? (sort = _, sortValues = null, pie) : sort;\r\n  };\r\n\r\n  pie.startAngle = function(_) {\r\n    return arguments.length ? (startAngle = typeof _ === \"function\" ? _ : constant$b(+_), pie) : startAngle;\r\n  };\r\n\r\n  pie.endAngle = function(_) {\r\n    return arguments.length ? (endAngle = typeof _ === \"function\" ? _ : constant$b(+_), pie) : endAngle;\r\n  };\r\n\r\n  pie.padAngle = function(_) {\r\n    return arguments.length ? (padAngle = typeof _ === \"function\" ? _ : constant$b(+_), pie) : padAngle;\r\n  };\r\n\r\n  return pie;\r\n}\r\n\r\nvar curveRadialLinear = curveRadial(curveLinear);\r\n\r\nfunction Radial(curve) {\r\n  this._curve = curve;\r\n}\r\n\r\nRadial.prototype = {\r\n  areaStart: function() {\r\n    this._curve.areaStart();\r\n  },\r\n  areaEnd: function() {\r\n    this._curve.areaEnd();\r\n  },\r\n  lineStart: function() {\r\n    this._curve.lineStart();\r\n  },\r\n  lineEnd: function() {\r\n    this._curve.lineEnd();\r\n  },\r\n  point: function(a, r) {\r\n    this._curve.point(r * Math.sin(a), r * -Math.cos(a));\r\n  }\r\n};\r\n\r\nfunction curveRadial(curve) {\r\n\r\n  function radial(context) {\r\n    return new Radial(curve(context));\r\n  }\r\n\r\n  radial._curve = curve;\r\n\r\n  return radial;\r\n}\r\n\r\nfunction lineRadial(l) {\r\n  var c = l.curve;\r\n\r\n  l.angle = l.x, delete l.x;\r\n  l.radius = l.y, delete l.y;\r\n\r\n  l.curve = function(_) {\r\n    return arguments.length ? c(curveRadial(_)) : c()._curve;\r\n  };\r\n\r\n  return l;\r\n}\r\n\r\nfunction lineRadial$1() {\r\n  return lineRadial(line().curve(curveRadialLinear));\r\n}\r\n\r\nfunction areaRadial() {\r\n  var a = area$3().curve(curveRadialLinear),\r\n      c = a.curve,\r\n      x0 = a.lineX0,\r\n      x1 = a.lineX1,\r\n      y0 = a.lineY0,\r\n      y1 = a.lineY1;\r\n\r\n  a.angle = a.x, delete a.x;\r\n  a.startAngle = a.x0, delete a.x0;\r\n  a.endAngle = a.x1, delete a.x1;\r\n  a.radius = a.y, delete a.y;\r\n  a.innerRadius = a.y0, delete a.y0;\r\n  a.outerRadius = a.y1, delete a.y1;\r\n  a.lineStartAngle = function() { return lineRadial(x0()); }, delete a.lineX0;\r\n  a.lineEndAngle = function() { return lineRadial(x1()); }, delete a.lineX1;\r\n  a.lineInnerRadius = function() { return lineRadial(y0()); }, delete a.lineY0;\r\n  a.lineOuterRadius = function() { return lineRadial(y1()); }, delete a.lineY1;\r\n\r\n  a.curve = function(_) {\r\n    return arguments.length ? c(curveRadial(_)) : c()._curve;\r\n  };\r\n\r\n  return a;\r\n}\r\n\r\nfunction pointRadial(x, y) {\r\n  return [(y = +y) * Math.cos(x -= Math.PI / 2), y * Math.sin(x)];\r\n}\r\n\r\nvar slice$6 = Array.prototype.slice;\r\n\r\nfunction linkSource(d) {\r\n  return d.source;\r\n}\r\n\r\nfunction linkTarget(d) {\r\n  return d.target;\r\n}\r\n\r\nfunction link$2(curve) {\r\n  var source = linkSource,\r\n      target = linkTarget,\r\n      x = x$3,\r\n      y = y$3,\r\n      context = null;\r\n\r\n  function link() {\r\n    var buffer, argv = slice$6.call(arguments), s = source.apply(this, argv), t = target.apply(this, argv);\r\n    if (!context) context = buffer = path();\r\n    curve(context, +x.apply(this, (argv[0] = s, argv)), +y.apply(this, argv), +x.apply(this, (argv[0] = t, argv)), +y.apply(this, argv));\r\n    if (buffer) return context = null, buffer + \"\" || null;\r\n  }\r\n\r\n  link.source = function(_) {\r\n    return arguments.length ? (source = _, link) : source;\r\n  };\r\n\r\n  link.target = function(_) {\r\n    return arguments.length ? (target = _, link) : target;\r\n  };\r\n\r\n  link.x = function(_) {\r\n    return arguments.length ? (x = typeof _ === \"function\" ? _ : constant$b(+_), link) : x;\r\n  };\r\n\r\n  link.y = function(_) {\r\n    return arguments.length ? (y = typeof _ === \"function\" ? _ : constant$b(+_), link) : y;\r\n  };\r\n\r\n  link.context = function(_) {\r\n    return arguments.length ? ((context = _ == null ? null : _), link) : context;\r\n  };\r\n\r\n  return link;\r\n}\r\n\r\nfunction curveHorizontal(context, x0, y0, x1, y1) {\r\n  context.moveTo(x0, y0);\r\n  context.bezierCurveTo(x0 = (x0 + x1) / 2, y0, x0, y1, x1, y1);\r\n}\r\n\r\nfunction curveVertical(context, x0, y0, x1, y1) {\r\n  context.moveTo(x0, y0);\r\n  context.bezierCurveTo(x0, y0 = (y0 + y1) / 2, x1, y0, x1, y1);\r\n}\r\n\r\nfunction curveRadial$1(context, x0, y0, x1, y1) {\r\n  var p0 = pointRadial(x0, y0),\r\n      p1 = pointRadial(x0, y0 = (y0 + y1) / 2),\r\n      p2 = pointRadial(x1, y0),\r\n      p3 = pointRadial(x1, y1);\r\n  context.moveTo(p0[0], p0[1]);\r\n  context.bezierCurveTo(p1[0], p1[1], p2[0], p2[1], p3[0], p3[1]);\r\n}\r\n\r\nfunction linkHorizontal() {\r\n  return link$2(curveHorizontal);\r\n}\r\n\r\nfunction linkVertical() {\r\n  return link$2(curveVertical);\r\n}\r\n\r\nfunction linkRadial() {\r\n  var l = link$2(curveRadial$1);\r\n  l.angle = l.x, delete l.x;\r\n  l.radius = l.y, delete l.y;\r\n  return l;\r\n}\r\n\r\nvar circle$2 = {\r\n  draw: function(context, size) {\r\n    var r = Math.sqrt(size / pi$4);\r\n    context.moveTo(r, 0);\r\n    context.arc(0, 0, r, 0, tau$4);\r\n  }\r\n};\r\n\r\nvar cross$2 = {\r\n  draw: function(context, size) {\r\n    var r = Math.sqrt(size / 5) / 2;\r\n    context.moveTo(-3 * r, -r);\r\n    context.lineTo(-r, -r);\r\n    context.lineTo(-r, -3 * r);\r\n    context.lineTo(r, -3 * r);\r\n    context.lineTo(r, -r);\r\n    context.lineTo(3 * r, -r);\r\n    context.lineTo(3 * r, r);\r\n    context.lineTo(r, r);\r\n    context.lineTo(r, 3 * r);\r\n    context.lineTo(-r, 3 * r);\r\n    context.lineTo(-r, r);\r\n    context.lineTo(-3 * r, r);\r\n    context.closePath();\r\n  }\r\n};\r\n\r\nvar tan30 = Math.sqrt(1 / 3),\r\n    tan30_2 = tan30 * 2;\r\n\r\nvar diamond = {\r\n  draw: function(context, size) {\r\n    var y = Math.sqrt(size / tan30_2),\r\n        x = y * tan30;\r\n    context.moveTo(0, -y);\r\n    context.lineTo(x, 0);\r\n    context.lineTo(0, y);\r\n    context.lineTo(-x, 0);\r\n    context.closePath();\r\n  }\r\n};\r\n\r\nvar ka = 0.89081309152928522810,\r\n    kr = Math.sin(pi$4 / 10) / Math.sin(7 * pi$4 / 10),\r\n    kx = Math.sin(tau$4 / 10) * kr,\r\n    ky = -Math.cos(tau$4 / 10) * kr;\r\n\r\nvar star = {\r\n  draw: function(context, size) {\r\n    var r = Math.sqrt(size * ka),\r\n        x = kx * r,\r\n        y = ky * r;\r\n    context.moveTo(0, -r);\r\n    context.lineTo(x, y);\r\n    for (var i = 1; i < 5; ++i) {\r\n      var a = tau$4 * i / 5,\r\n          c = Math.cos(a),\r\n          s = Math.sin(a);\r\n      context.lineTo(s * r, -c * r);\r\n      context.lineTo(c * x - s * y, s * x + c * y);\r\n    }\r\n    context.closePath();\r\n  }\r\n};\r\n\r\nvar square = {\r\n  draw: function(context, size) {\r\n    var w = Math.sqrt(size),\r\n        x = -w / 2;\r\n    context.rect(x, x, w, w);\r\n  }\r\n};\r\n\r\nvar sqrt3 = Math.sqrt(3);\r\n\r\nvar triangle = {\r\n  draw: function(context, size) {\r\n    var y = -Math.sqrt(size / (sqrt3 * 3));\r\n    context.moveTo(0, y * 2);\r\n    context.lineTo(-sqrt3 * y, -y);\r\n    context.lineTo(sqrt3 * y, -y);\r\n    context.closePath();\r\n  }\r\n};\r\n\r\nvar c$2 = -0.5,\r\n    s = Math.sqrt(3) / 2,\r\n    k = 1 / Math.sqrt(12),\r\n    a = (k / 2 + 1) * 3;\r\n\r\nvar wye = {\r\n  draw: function(context, size) {\r\n    var r = Math.sqrt(size / a),\r\n        x0 = r / 2,\r\n        y0 = r * k,\r\n        x1 = x0,\r\n        y1 = r * k + r,\r\n        x2 = -x1,\r\n        y2 = y1;\r\n    context.moveTo(x0, y0);\r\n    context.lineTo(x1, y1);\r\n    context.lineTo(x2, y2);\r\n    context.lineTo(c$2 * x0 - s * y0, s * x0 + c$2 * y0);\r\n    context.lineTo(c$2 * x1 - s * y1, s * x1 + c$2 * y1);\r\n    context.lineTo(c$2 * x2 - s * y2, s * x2 + c$2 * y2);\r\n    context.lineTo(c$2 * x0 + s * y0, c$2 * y0 - s * x0);\r\n    context.lineTo(c$2 * x1 + s * y1, c$2 * y1 - s * x1);\r\n    context.lineTo(c$2 * x2 + s * y2, c$2 * y2 - s * x2);\r\n    context.closePath();\r\n  }\r\n};\r\n\r\nvar symbols = [\r\n  circle$2,\r\n  cross$2,\r\n  diamond,\r\n  square,\r\n  star,\r\n  triangle,\r\n  wye\r\n];\r\n\r\nfunction symbol() {\r\n  var type = constant$b(circle$2),\r\n      size = constant$b(64),\r\n      context = null;\r\n\r\n  function symbol() {\r\n    var buffer;\r\n    if (!context) context = buffer = path();\r\n    type.apply(this, arguments).draw(context, +size.apply(this, arguments));\r\n    if (buffer) return context = null, buffer + \"\" || null;\r\n  }\r\n\r\n  symbol.type = function(_) {\r\n    return arguments.length ? (type = typeof _ === \"function\" ? _ : constant$b(_), symbol) : type;\r\n  };\r\n\r\n  symbol.size = function(_) {\r\n    return arguments.length ? (size = typeof _ === \"function\" ? _ : constant$b(+_), symbol) : size;\r\n  };\r\n\r\n  symbol.context = function(_) {\r\n    return arguments.length ? (context = _ == null ? null : _, symbol) : context;\r\n  };\r\n\r\n  return symbol;\r\n}\r\n\r\nfunction noop$3() {}\r\n\r\nfunction point$2(that, x, y) {\r\n  that._context.bezierCurveTo(\r\n    (2 * that._x0 + that._x1) / 3,\r\n    (2 * that._y0 + that._y1) / 3,\r\n    (that._x0 + 2 * that._x1) / 3,\r\n    (that._y0 + 2 * that._y1) / 3,\r\n    (that._x0 + 4 * that._x1 + x) / 6,\r\n    (that._y0 + 4 * that._y1 + y) / 6\r\n  );\r\n}\r\n\r\nfunction Basis(context) {\r\n  this._context = context;\r\n}\r\n\r\nBasis.prototype = {\r\n  areaStart: function() {\r\n    this._line = 0;\r\n  },\r\n  areaEnd: function() {\r\n    this._line = NaN;\r\n  },\r\n  lineStart: function() {\r\n    this._x0 = this._x1 =\r\n    this._y0 = this._y1 = NaN;\r\n    this._point = 0;\r\n  },\r\n  lineEnd: function() {\r\n    switch (this._point) {\r\n      case 3: point$2(this, this._x1, this._y1); // proceed\r\n      case 2: this._context.lineTo(this._x1, this._y1); break;\r\n    }\r\n    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();\r\n    this._line = 1 - this._line;\r\n  },\r\n  point: function(x, y) {\r\n    x = +x, y = +y;\r\n    switch (this._point) {\r\n      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;\r\n      case 1: this._point = 2; break;\r\n      case 2: this._point = 3; this._context.lineTo((5 * this._x0 + this._x1) / 6, (5 * this._y0 + this._y1) / 6); // proceed\r\n      default: point$2(this, x, y); break;\r\n    }\r\n    this._x0 = this._x1, this._x1 = x;\r\n    this._y0 = this._y1, this._y1 = y;\r\n  }\r\n};\r\n\r\nfunction basis$2(context) {\r\n  return new Basis(context);\r\n}\r\n\r\nfunction BasisClosed(context) {\r\n  this._context = context;\r\n}\r\n\r\nBasisClosed.prototype = {\r\n  areaStart: noop$3,\r\n  areaEnd: noop$3,\r\n  lineStart: function() {\r\n    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 =\r\n    this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = NaN;\r\n    this._point = 0;\r\n  },\r\n  lineEnd: function() {\r\n    switch (this._point) {\r\n      case 1: {\r\n        this._context.moveTo(this._x2, this._y2);\r\n        this._context.closePath();\r\n        break;\r\n      }\r\n      case 2: {\r\n        this._context.moveTo((this._x2 + 2 * this._x3) / 3, (this._y2 + 2 * this._y3) / 3);\r\n        this._context.lineTo((this._x3 + 2 * this._x2) / 3, (this._y3 + 2 * this._y2) / 3);\r\n        this._context.closePath();\r\n        break;\r\n      }\r\n      case 3: {\r\n        this.point(this._x2, this._y2);\r\n        this.point(this._x3, this._y3);\r\n        this.point(this._x4, this._y4);\r\n        break;\r\n      }\r\n    }\r\n  },\r\n  point: function(x, y) {\r\n    x = +x, y = +y;\r\n    switch (this._point) {\r\n      case 0: this._point = 1; this._x2 = x, this._y2 = y; break;\r\n      case 1: this._point = 2; this._x3 = x, this._y3 = y; break;\r\n      case 2: this._point = 3; this._x4 = x, this._y4 = y; this._context.moveTo((this._x0 + 4 * this._x1 + x) / 6, (this._y0 + 4 * this._y1 + y) / 6); break;\r\n      default: point$2(this, x, y); break;\r\n    }\r\n    this._x0 = this._x1, this._x1 = x;\r\n    this._y0 = this._y1, this._y1 = y;\r\n  }\r\n};\r\n\r\nfunction basisClosed$1(context) {\r\n  return new BasisClosed(context);\r\n}\r\n\r\nfunction BasisOpen(context) {\r\n  this._context = context;\r\n}\r\n\r\nBasisOpen.prototype = {\r\n  areaStart: function() {\r\n    this._line = 0;\r\n  },\r\n  areaEnd: function() {\r\n    this._line = NaN;\r\n  },\r\n  lineStart: function() {\r\n    this._x0 = this._x1 =\r\n    this._y0 = this._y1 = NaN;\r\n    this._point = 0;\r\n  },\r\n  lineEnd: function() {\r\n    if (this._line || (this._line !== 0 && this._point === 3)) this._context.closePath();\r\n    this._line = 1 - this._line;\r\n  },\r\n  point: function(x, y) {\r\n    x = +x, y = +y;\r\n    switch (this._point) {\r\n      case 0: this._point = 1; break;\r\n      case 1: this._point = 2; break;\r\n      case 2: this._point = 3; var x0 = (this._x0 + 4 * this._x1 + x) / 6, y0 = (this._y0 + 4 * this._y1 + y) / 6; this._line ? this._context.lineTo(x0, y0) : this._context.moveTo(x0, y0); break;\r\n      case 3: this._point = 4; // proceed\r\n      default: point$2(this, x, y); break;\r\n    }\r\n    this._x0 = this._x1, this._x1 = x;\r\n    this._y0 = this._y1, this._y1 = y;\r\n  }\r\n};\r\n\r\nfunction basisOpen(context) {\r\n  return new BasisOpen(context);\r\n}\r\n\r\nfunction Bundle(context, beta) {\r\n  this._basis = new Basis(context);\r\n  this._beta = beta;\r\n}\r\n\r\nBundle.prototype = {\r\n  lineStart: function() {\r\n    this._x = [];\r\n    this._y = [];\r\n    this._basis.lineStart();\r\n  },\r\n  lineEnd: function() {\r\n    var x = this._x,\r\n        y = this._y,\r\n        j = x.length - 1;\r\n\r\n    if (j > 0) {\r\n      var x0 = x[0],\r\n          y0 = y[0],\r\n          dx = x[j] - x0,\r\n          dy = y[j] - y0,\r\n          i = -1,\r\n          t;\r\n\r\n      while (++i <= j) {\r\n        t = i / j;\r\n        this._basis.point(\r\n          this._beta * x[i] + (1 - this._beta) * (x0 + t * dx),\r\n          this._beta * y[i] + (1 - this._beta) * (y0 + t * dy)\r\n        );\r\n      }\r\n    }\r\n\r\n    this._x = this._y = null;\r\n    this._basis.lineEnd();\r\n  },\r\n  point: function(x, y) {\r\n    this._x.push(+x);\r\n    this._y.push(+y);\r\n  }\r\n};\r\n\r\nvar bundle = (function custom(beta) {\r\n\r\n  function bundle(context) {\r\n    return beta === 1 ? new Basis(context) : new Bundle(context, beta);\r\n  }\r\n\r\n  bundle.beta = function(beta) {\r\n    return custom(+beta);\r\n  };\r\n\r\n  return bundle;\r\n})(0.85);\r\n\r\nfunction point$3(that, x, y) {\r\n  that._context.bezierCurveTo(\r\n    that._x1 + that._k * (that._x2 - that._x0),\r\n    that._y1 + that._k * (that._y2 - that._y0),\r\n    that._x2 + that._k * (that._x1 - x),\r\n    that._y2 + that._k * (that._y1 - y),\r\n    that._x2,\r\n    that._y2\r\n  );\r\n}\r\n\r\nfunction Cardinal(context, tension) {\r\n  this._context = context;\r\n  this._k = (1 - tension) / 6;\r\n}\r\n\r\nCardinal.prototype = {\r\n  areaStart: function() {\r\n    this._line = 0;\r\n  },\r\n  areaEnd: function() {\r\n    this._line = NaN;\r\n  },\r\n  lineStart: function() {\r\n    this._x0 = this._x1 = this._x2 =\r\n    this._y0 = this._y1 = this._y2 = NaN;\r\n    this._point = 0;\r\n  },\r\n  lineEnd: function() {\r\n    switch (this._point) {\r\n      case 2: this._context.lineTo(this._x2, this._y2); break;\r\n      case 3: point$3(this, this._x1, this._y1); break;\r\n    }\r\n    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();\r\n    this._line = 1 - this._line;\r\n  },\r\n  point: function(x, y) {\r\n    x = +x, y = +y;\r\n    switch (this._point) {\r\n      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;\r\n      case 1: this._point = 2; this._x1 = x, this._y1 = y; break;\r\n      case 2: this._point = 3; // proceed\r\n      default: point$3(this, x, y); break;\r\n    }\r\n    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;\r\n    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;\r\n  }\r\n};\r\n\r\nvar cardinal = (function custom(tension) {\r\n\r\n  function cardinal(context) {\r\n    return new Cardinal(context, tension);\r\n  }\r\n\r\n  cardinal.tension = function(tension) {\r\n    return custom(+tension);\r\n  };\r\n\r\n  return cardinal;\r\n})(0);\r\n\r\nfunction CardinalClosed(context, tension) {\r\n  this._context = context;\r\n  this._k = (1 - tension) / 6;\r\n}\r\n\r\nCardinalClosed.prototype = {\r\n  areaStart: noop$3,\r\n  areaEnd: noop$3,\r\n  lineStart: function() {\r\n    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 =\r\n    this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;\r\n    this._point = 0;\r\n  },\r\n  lineEnd: function() {\r\n    switch (this._point) {\r\n      case 1: {\r\n        this._context.moveTo(this._x3, this._y3);\r\n        this._context.closePath();\r\n        break;\r\n      }\r\n      case 2: {\r\n        this._context.lineTo(this._x3, this._y3);\r\n        this._context.closePath();\r\n        break;\r\n      }\r\n      case 3: {\r\n        this.point(this._x3, this._y3);\r\n        this.point(this._x4, this._y4);\r\n        this.point(this._x5, this._y5);\r\n        break;\r\n      }\r\n    }\r\n  },\r\n  point: function(x, y) {\r\n    x = +x, y = +y;\r\n    switch (this._point) {\r\n      case 0: this._point = 1; this._x3 = x, this._y3 = y; break;\r\n      case 1: this._point = 2; this._context.moveTo(this._x4 = x, this._y4 = y); break;\r\n      case 2: this._point = 3; this._x5 = x, this._y5 = y; break;\r\n      default: point$3(this, x, y); break;\r\n    }\r\n    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;\r\n    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;\r\n  }\r\n};\r\n\r\nvar cardinalClosed = (function custom(tension) {\r\n\r\n  function cardinal(context) {\r\n    return new CardinalClosed(context, tension);\r\n  }\r\n\r\n  cardinal.tension = function(tension) {\r\n    return custom(+tension);\r\n  };\r\n\r\n  return cardinal;\r\n})(0);\r\n\r\nfunction CardinalOpen(context, tension) {\r\n  this._context = context;\r\n  this._k = (1 - tension) / 6;\r\n}\r\n\r\nCardinalOpen.prototype = {\r\n  areaStart: function() {\r\n    this._line = 0;\r\n  },\r\n  areaEnd: function() {\r\n    this._line = NaN;\r\n  },\r\n  lineStart: function() {\r\n    this._x0 = this._x1 = this._x2 =\r\n    this._y0 = this._y1 = this._y2 = NaN;\r\n    this._point = 0;\r\n  },\r\n  lineEnd: function() {\r\n    if (this._line || (this._line !== 0 && this._point === 3)) this._context.closePath();\r\n    this._line = 1 - this._line;\r\n  },\r\n  point: function(x, y) {\r\n    x = +x, y = +y;\r\n    switch (this._point) {\r\n      case 0: this._point = 1; break;\r\n      case 1: this._point = 2; break;\r\n      case 2: this._point = 3; this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2); break;\r\n      case 3: this._point = 4; // proceed\r\n      default: point$3(this, x, y); break;\r\n    }\r\n    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;\r\n    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;\r\n  }\r\n};\r\n\r\nvar cardinalOpen = (function custom(tension) {\r\n\r\n  function cardinal(context) {\r\n    return new CardinalOpen(context, tension);\r\n  }\r\n\r\n  cardinal.tension = function(tension) {\r\n    return custom(+tension);\r\n  };\r\n\r\n  return cardinal;\r\n})(0);\r\n\r\nfunction point$4(that, x, y) {\r\n  var x1 = that._x1,\r\n      y1 = that._y1,\r\n      x2 = that._x2,\r\n      y2 = that._y2;\r\n\r\n  if (that._l01_a > epsilon$3) {\r\n    var a = 2 * that._l01_2a + 3 * that._l01_a * that._l12_a + that._l12_2a,\r\n        n = 3 * that._l01_a * (that._l01_a + that._l12_a);\r\n    x1 = (x1 * a - that._x0 * that._l12_2a + that._x2 * that._l01_2a) / n;\r\n    y1 = (y1 * a - that._y0 * that._l12_2a + that._y2 * that._l01_2a) / n;\r\n  }\r\n\r\n  if (that._l23_a > epsilon$3) {\r\n    var b = 2 * that._l23_2a + 3 * that._l23_a * that._l12_a + that._l12_2a,\r\n        m = 3 * that._l23_a * (that._l23_a + that._l12_a);\r\n    x2 = (x2 * b + that._x1 * that._l23_2a - x * that._l12_2a) / m;\r\n    y2 = (y2 * b + that._y1 * that._l23_2a - y * that._l12_2a) / m;\r\n  }\r\n\r\n  that._context.bezierCurveTo(x1, y1, x2, y2, that._x2, that._y2);\r\n}\r\n\r\nfunction CatmullRom(context, alpha) {\r\n  this._context = context;\r\n  this._alpha = alpha;\r\n}\r\n\r\nCatmullRom.prototype = {\r\n  areaStart: function() {\r\n    this._line = 0;\r\n  },\r\n  areaEnd: function() {\r\n    this._line = NaN;\r\n  },\r\n  lineStart: function() {\r\n    this._x0 = this._x1 = this._x2 =\r\n    this._y0 = this._y1 = this._y2 = NaN;\r\n    this._l01_a = this._l12_a = this._l23_a =\r\n    this._l01_2a = this._l12_2a = this._l23_2a =\r\n    this._point = 0;\r\n  },\r\n  lineEnd: function() {\r\n    switch (this._point) {\r\n      case 2: this._context.lineTo(this._x2, this._y2); break;\r\n      case 3: this.point(this._x2, this._y2); break;\r\n    }\r\n    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();\r\n    this._line = 1 - this._line;\r\n  },\r\n  point: function(x, y) {\r\n    x = +x, y = +y;\r\n\r\n    if (this._point) {\r\n      var x23 = this._x2 - x,\r\n          y23 = this._y2 - y;\r\n      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));\r\n    }\r\n\r\n    switch (this._point) {\r\n      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;\r\n      case 1: this._point = 2; break;\r\n      case 2: this._point = 3; // proceed\r\n      default: point$4(this, x, y); break;\r\n    }\r\n\r\n    this._l01_a = this._l12_a, this._l12_a = this._l23_a;\r\n    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;\r\n    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;\r\n    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;\r\n  }\r\n};\r\n\r\nvar catmullRom = (function custom(alpha) {\r\n\r\n  function catmullRom(context) {\r\n    return alpha ? new CatmullRom(context, alpha) : new Cardinal(context, 0);\r\n  }\r\n\r\n  catmullRom.alpha = function(alpha) {\r\n    return custom(+alpha);\r\n  };\r\n\r\n  return catmullRom;\r\n})(0.5);\r\n\r\nfunction CatmullRomClosed(context, alpha) {\r\n  this._context = context;\r\n  this._alpha = alpha;\r\n}\r\n\r\nCatmullRomClosed.prototype = {\r\n  areaStart: noop$3,\r\n  areaEnd: noop$3,\r\n  lineStart: function() {\r\n    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 =\r\n    this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;\r\n    this._l01_a = this._l12_a = this._l23_a =\r\n    this._l01_2a = this._l12_2a = this._l23_2a =\r\n    this._point = 0;\r\n  },\r\n  lineEnd: function() {\r\n    switch (this._point) {\r\n      case 1: {\r\n        this._context.moveTo(this._x3, this._y3);\r\n        this._context.closePath();\r\n        break;\r\n      }\r\n      case 2: {\r\n        this._context.lineTo(this._x3, this._y3);\r\n        this._context.closePath();\r\n        break;\r\n      }\r\n      case 3: {\r\n        this.point(this._x3, this._y3);\r\n        this.point(this._x4, this._y4);\r\n        this.point(this._x5, this._y5);\r\n        break;\r\n      }\r\n    }\r\n  },\r\n  point: function(x, y) {\r\n    x = +x, y = +y;\r\n\r\n    if (this._point) {\r\n      var x23 = this._x2 - x,\r\n          y23 = this._y2 - y;\r\n      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));\r\n    }\r\n\r\n    switch (this._point) {\r\n      case 0: this._point = 1; this._x3 = x, this._y3 = y; break;\r\n      case 1: this._point = 2; this._context.moveTo(this._x4 = x, this._y4 = y); break;\r\n      case 2: this._point = 3; this._x5 = x, this._y5 = y; break;\r\n      default: point$4(this, x, y); break;\r\n    }\r\n\r\n    this._l01_a = this._l12_a, this._l12_a = this._l23_a;\r\n    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;\r\n    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;\r\n    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;\r\n  }\r\n};\r\n\r\nvar catmullRomClosed = (function custom(alpha) {\r\n\r\n  function catmullRom(context) {\r\n    return alpha ? new CatmullRomClosed(context, alpha) : new CardinalClosed(context, 0);\r\n  }\r\n\r\n  catmullRom.alpha = function(alpha) {\r\n    return custom(+alpha);\r\n  };\r\n\r\n  return catmullRom;\r\n})(0.5);\r\n\r\nfunction CatmullRomOpen(context, alpha) {\r\n  this._context = context;\r\n  this._alpha = alpha;\r\n}\r\n\r\nCatmullRomOpen.prototype = {\r\n  areaStart: function() {\r\n    this._line = 0;\r\n  },\r\n  areaEnd: function() {\r\n    this._line = NaN;\r\n  },\r\n  lineStart: function() {\r\n    this._x0 = this._x1 = this._x2 =\r\n    this._y0 = this._y1 = this._y2 = NaN;\r\n    this._l01_a = this._l12_a = this._l23_a =\r\n    this._l01_2a = this._l12_2a = this._l23_2a =\r\n    this._point = 0;\r\n  },\r\n  lineEnd: function() {\r\n    if (this._line || (this._line !== 0 && this._point === 3)) this._context.closePath();\r\n    this._line = 1 - this._line;\r\n  },\r\n  point: function(x, y) {\r\n    x = +x, y = +y;\r\n\r\n    if (this._point) {\r\n      var x23 = this._x2 - x,\r\n          y23 = this._y2 - y;\r\n      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));\r\n    }\r\n\r\n    switch (this._point) {\r\n      case 0: this._point = 1; break;\r\n      case 1: this._point = 2; break;\r\n      case 2: this._point = 3; this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2); break;\r\n      case 3: this._point = 4; // proceed\r\n      default: point$4(this, x, y); break;\r\n    }\r\n\r\n    this._l01_a = this._l12_a, this._l12_a = this._l23_a;\r\n    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;\r\n    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;\r\n    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;\r\n  }\r\n};\r\n\r\nvar catmullRomOpen = (function custom(alpha) {\r\n\r\n  function catmullRom(context) {\r\n    return alpha ? new CatmullRomOpen(context, alpha) : new CardinalOpen(context, 0);\r\n  }\r\n\r\n  catmullRom.alpha = function(alpha) {\r\n    return custom(+alpha);\r\n  };\r\n\r\n  return catmullRom;\r\n})(0.5);\r\n\r\nfunction LinearClosed(context) {\r\n  this._context = context;\r\n}\r\n\r\nLinearClosed.prototype = {\r\n  areaStart: noop$3,\r\n  areaEnd: noop$3,\r\n  lineStart: function() {\r\n    this._point = 0;\r\n  },\r\n  lineEnd: function() {\r\n    if (this._point) this._context.closePath();\r\n  },\r\n  point: function(x, y) {\r\n    x = +x, y = +y;\r\n    if (this._point) this._context.lineTo(x, y);\r\n    else this._point = 1, this._context.moveTo(x, y);\r\n  }\r\n};\r\n\r\nfunction linearClosed(context) {\r\n  return new LinearClosed(context);\r\n}\r\n\r\nfunction sign$1(x) {\r\n  return x < 0 ? -1 : 1;\r\n}\r\n\r\n// Calculate the slopes of the tangents (Hermite-type interpolation) based on\r\n// the following paper: Steffen, M. 1990. A Simple Method for Monotonic\r\n// Interpolation in One Dimension. Astronomy and Astrophysics, Vol. 239, NO.\r\n// NOV(II), P. 443, 1990.\r\nfunction slope3(that, x2, y2) {\r\n  var h0 = that._x1 - that._x0,\r\n      h1 = x2 - that._x1,\r\n      s0 = (that._y1 - that._y0) / (h0 || h1 < 0 && -0),\r\n      s1 = (y2 - that._y1) / (h1 || h0 < 0 && -0),\r\n      p = (s0 * h1 + s1 * h0) / (h0 + h1);\r\n  return (sign$1(s0) + sign$1(s1)) * Math.min(Math.abs(s0), Math.abs(s1), 0.5 * Math.abs(p)) || 0;\r\n}\r\n\r\n// Calculate a one-sided slope.\r\nfunction slope2(that, t) {\r\n  var h = that._x1 - that._x0;\r\n  return h ? (3 * (that._y1 - that._y0) / h - t) / 2 : t;\r\n}\r\n\r\n// According to https://en.wikipedia.org/wiki/Cubic_Hermite_spline#Representations\r\n// \"you can express cubic Hermite interpolation in terms of cubic Bézier curves\r\n// with respect to the four values p0, p0 + m0 / 3, p1 - m1 / 3, p1\".\r\nfunction point$5(that, t0, t1) {\r\n  var x0 = that._x0,\r\n      y0 = that._y0,\r\n      x1 = that._x1,\r\n      y1 = that._y1,\r\n      dx = (x1 - x0) / 3;\r\n  that._context.bezierCurveTo(x0 + dx, y0 + dx * t0, x1 - dx, y1 - dx * t1, x1, y1);\r\n}\r\n\r\nfunction MonotoneX(context) {\r\n  this._context = context;\r\n}\r\n\r\nMonotoneX.prototype = {\r\n  areaStart: function() {\r\n    this._line = 0;\r\n  },\r\n  areaEnd: function() {\r\n    this._line = NaN;\r\n  },\r\n  lineStart: function() {\r\n    this._x0 = this._x1 =\r\n    this._y0 = this._y1 =\r\n    this._t0 = NaN;\r\n    this._point = 0;\r\n  },\r\n  lineEnd: function() {\r\n    switch (this._point) {\r\n      case 2: this._context.lineTo(this._x1, this._y1); break;\r\n      case 3: point$5(this, this._t0, slope2(this, this._t0)); break;\r\n    }\r\n    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();\r\n    this._line = 1 - this._line;\r\n  },\r\n  point: function(x, y) {\r\n    var t1 = NaN;\r\n\r\n    x = +x, y = +y;\r\n    if (x === this._x1 && y === this._y1) return; // Ignore coincident points.\r\n    switch (this._point) {\r\n      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;\r\n      case 1: this._point = 2; break;\r\n      case 2: this._point = 3; point$5(this, slope2(this, t1 = slope3(this, x, y)), t1); break;\r\n      default: point$5(this, this._t0, t1 = slope3(this, x, y)); break;\r\n    }\r\n\r\n    this._x0 = this._x1, this._x1 = x;\r\n    this._y0 = this._y1, this._y1 = y;\r\n    this._t0 = t1;\r\n  }\r\n};\r\n\r\nfunction MonotoneY(context) {\r\n  this._context = new ReflectContext(context);\r\n}\r\n\r\n(MonotoneY.prototype = Object.create(MonotoneX.prototype)).point = function(x, y) {\r\n  MonotoneX.prototype.point.call(this, y, x);\r\n};\r\n\r\nfunction ReflectContext(context) {\r\n  this._context = context;\r\n}\r\n\r\nReflectContext.prototype = {\r\n  moveTo: function(x, y) { this._context.moveTo(y, x); },\r\n  closePath: function() { this._context.closePath(); },\r\n  lineTo: function(x, y) { this._context.lineTo(y, x); },\r\n  bezierCurveTo: function(x1, y1, x2, y2, x, y) { this._context.bezierCurveTo(y1, x1, y2, x2, y, x); }\r\n};\r\n\r\nfunction monotoneX(context) {\r\n  return new MonotoneX(context);\r\n}\r\n\r\nfunction monotoneY(context) {\r\n  return new MonotoneY(context);\r\n}\r\n\r\nfunction Natural(context) {\r\n  this._context = context;\r\n}\r\n\r\nNatural.prototype = {\r\n  areaStart: function() {\r\n    this._line = 0;\r\n  },\r\n  areaEnd: function() {\r\n    this._line = NaN;\r\n  },\r\n  lineStart: function() {\r\n    this._x = [];\r\n    this._y = [];\r\n  },\r\n  lineEnd: function() {\r\n    var x = this._x,\r\n        y = this._y,\r\n        n = x.length;\r\n\r\n    if (n) {\r\n      this._line ? this._context.lineTo(x[0], y[0]) : this._context.moveTo(x[0], y[0]);\r\n      if (n === 2) {\r\n        this._context.lineTo(x[1], y[1]);\r\n      } else {\r\n        var px = controlPoints(x),\r\n            py = controlPoints(y);\r\n        for (var i0 = 0, i1 = 1; i1 < n; ++i0, ++i1) {\r\n          this._context.bezierCurveTo(px[0][i0], py[0][i0], px[1][i0], py[1][i0], x[i1], y[i1]);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (this._line || (this._line !== 0 && n === 1)) this._context.closePath();\r\n    this._line = 1 - this._line;\r\n    this._x = this._y = null;\r\n  },\r\n  point: function(x, y) {\r\n    this._x.push(+x);\r\n    this._y.push(+y);\r\n  }\r\n};\r\n\r\n// See https://www.particleincell.com/2012/bezier-splines/ for derivation.\r\nfunction controlPoints(x) {\r\n  var i,\r\n      n = x.length - 1,\r\n      m,\r\n      a = new Array(n),\r\n      b = new Array(n),\r\n      r = new Array(n);\r\n  a[0] = 0, b[0] = 2, r[0] = x[0] + 2 * x[1];\r\n  for (i = 1; i < n - 1; ++i) a[i] = 1, b[i] = 4, r[i] = 4 * x[i] + 2 * x[i + 1];\r\n  a[n - 1] = 2, b[n - 1] = 7, r[n - 1] = 8 * x[n - 1] + x[n];\r\n  for (i = 1; i < n; ++i) m = a[i] / b[i - 1], b[i] -= m, r[i] -= m * r[i - 1];\r\n  a[n - 1] = r[n - 1] / b[n - 1];\r\n  for (i = n - 2; i >= 0; --i) a[i] = (r[i] - a[i + 1]) / b[i];\r\n  b[n - 1] = (x[n] + a[n - 1]) / 2;\r\n  for (i = 0; i < n - 1; ++i) b[i] = 2 * x[i + 1] - a[i + 1];\r\n  return [a, b];\r\n}\r\n\r\nfunction natural(context) {\r\n  return new Natural(context);\r\n}\r\n\r\nfunction Step(context, t) {\r\n  this._context = context;\r\n  this._t = t;\r\n}\r\n\r\nStep.prototype = {\r\n  areaStart: function() {\r\n    this._line = 0;\r\n  },\r\n  areaEnd: function() {\r\n    this._line = NaN;\r\n  },\r\n  lineStart: function() {\r\n    this._x = this._y = NaN;\r\n    this._point = 0;\r\n  },\r\n  lineEnd: function() {\r\n    if (0 < this._t && this._t < 1 && this._point === 2) this._context.lineTo(this._x, this._y);\r\n    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();\r\n    if (this._line >= 0) this._t = 1 - this._t, this._line = 1 - this._line;\r\n  },\r\n  point: function(x, y) {\r\n    x = +x, y = +y;\r\n    switch (this._point) {\r\n      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;\r\n      case 1: this._point = 2; // proceed\r\n      default: {\r\n        if (this._t <= 0) {\r\n          this._context.lineTo(this._x, y);\r\n          this._context.lineTo(x, y);\r\n        } else {\r\n          var x1 = this._x * (1 - this._t) + x * this._t;\r\n          this._context.lineTo(x1, this._y);\r\n          this._context.lineTo(x1, y);\r\n        }\r\n        break;\r\n      }\r\n    }\r\n    this._x = x, this._y = y;\r\n  }\r\n};\r\n\r\nfunction step(context) {\r\n  return new Step(context, 0.5);\r\n}\r\n\r\nfunction stepBefore(context) {\r\n  return new Step(context, 0);\r\n}\r\n\r\nfunction stepAfter(context) {\r\n  return new Step(context, 1);\r\n}\r\n\r\nfunction none$1(series, order) {\r\n  if (!((n = series.length) > 1)) return;\r\n  for (var i = 1, j, s0, s1 = series[order[0]], n, m = s1.length; i < n; ++i) {\r\n    s0 = s1, s1 = series[order[i]];\r\n    for (j = 0; j < m; ++j) {\r\n      s1[j][1] += s1[j][0] = isNaN(s0[j][1]) ? s0[j][0] : s0[j][1];\r\n    }\r\n  }\r\n}\r\n\r\nfunction none$2(series) {\r\n  var n = series.length, o = new Array(n);\r\n  while (--n >= 0) o[n] = n;\r\n  return o;\r\n}\r\n\r\nfunction stackValue(d, key) {\r\n  return d[key];\r\n}\r\n\r\nfunction stack() {\r\n  var keys = constant$b([]),\r\n      order = none$2,\r\n      offset = none$1,\r\n      value = stackValue;\r\n\r\n  function stack(data) {\r\n    var kz = keys.apply(this, arguments),\r\n        i,\r\n        m = data.length,\r\n        n = kz.length,\r\n        sz = new Array(n),\r\n        oz;\r\n\r\n    for (i = 0; i < n; ++i) {\r\n      for (var ki = kz[i], si = sz[i] = new Array(m), j = 0, sij; j < m; ++j) {\r\n        si[j] = sij = [0, +value(data[j], ki, j, data)];\r\n        sij.data = data[j];\r\n      }\r\n      si.key = ki;\r\n    }\r\n\r\n    for (i = 0, oz = order(sz); i < n; ++i) {\r\n      sz[oz[i]].index = i;\r\n    }\r\n\r\n    offset(sz, oz);\r\n    return sz;\r\n  }\r\n\r\n  stack.keys = function(_) {\r\n    return arguments.length ? (keys = typeof _ === \"function\" ? _ : constant$b(slice$6.call(_)), stack) : keys;\r\n  };\r\n\r\n  stack.value = function(_) {\r\n    return arguments.length ? (value = typeof _ === \"function\" ? _ : constant$b(+_), stack) : value;\r\n  };\r\n\r\n  stack.order = function(_) {\r\n    return arguments.length ? (order = _ == null ? none$2 : typeof _ === \"function\" ? _ : constant$b(slice$6.call(_)), stack) : order;\r\n  };\r\n\r\n  stack.offset = function(_) {\r\n    return arguments.length ? (offset = _ == null ? none$1 : _, stack) : offset;\r\n  };\r\n\r\n  return stack;\r\n}\r\n\r\nfunction expand(series, order) {\r\n  if (!((n = series.length) > 0)) return;\r\n  for (var i, n, j = 0, m = series[0].length, y; j < m; ++j) {\r\n    for (y = i = 0; i < n; ++i) y += series[i][j][1] || 0;\r\n    if (y) for (i = 0; i < n; ++i) series[i][j][1] /= y;\r\n  }\r\n  none$1(series, order);\r\n}\r\n\r\nfunction diverging$1(series, order) {\r\n  if (!((n = series.length) > 0)) return;\r\n  for (var i, j = 0, d, dy, yp, yn, n, m = series[order[0]].length; j < m; ++j) {\r\n    for (yp = yn = 0, i = 0; i < n; ++i) {\r\n      if ((dy = (d = series[order[i]][j])[1] - d[0]) > 0) {\r\n        d[0] = yp, d[1] = yp += dy;\r\n      } else if (dy < 0) {\r\n        d[1] = yn, d[0] = yn += dy;\r\n      } else {\r\n        d[0] = 0, d[1] = dy;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction silhouette(series, order) {\r\n  if (!((n = series.length) > 0)) return;\r\n  for (var j = 0, s0 = series[order[0]], n, m = s0.length; j < m; ++j) {\r\n    for (var i = 0, y = 0; i < n; ++i) y += series[i][j][1] || 0;\r\n    s0[j][1] += s0[j][0] = -y / 2;\r\n  }\r\n  none$1(series, order);\r\n}\r\n\r\nfunction wiggle(series, order) {\r\n  if (!((n = series.length) > 0) || !((m = (s0 = series[order[0]]).length) > 0)) return;\r\n  for (var y = 0, j = 1, s0, m, n; j < m; ++j) {\r\n    for (var i = 0, s1 = 0, s2 = 0; i < n; ++i) {\r\n      var si = series[order[i]],\r\n          sij0 = si[j][1] || 0,\r\n          sij1 = si[j - 1][1] || 0,\r\n          s3 = (sij0 - sij1) / 2;\r\n      for (var k = 0; k < i; ++k) {\r\n        var sk = series[order[k]],\r\n            skj0 = sk[j][1] || 0,\r\n            skj1 = sk[j - 1][1] || 0;\r\n        s3 += skj0 - skj1;\r\n      }\r\n      s1 += sij0, s2 += s3 * sij0;\r\n    }\r\n    s0[j - 1][1] += s0[j - 1][0] = y;\r\n    if (s1) y -= s2 / s1;\r\n  }\r\n  s0[j - 1][1] += s0[j - 1][0] = y;\r\n  none$1(series, order);\r\n}\r\n\r\nfunction appearance(series) {\r\n  var peaks = series.map(peak);\r\n  return none$2(series).sort(function(a, b) { return peaks[a] - peaks[b]; });\r\n}\r\n\r\nfunction peak(series) {\r\n  var i = -1, j = 0, n = series.length, vi, vj = -Infinity;\r\n  while (++i < n) if ((vi = +series[i][1]) > vj) vj = vi, j = i;\r\n  return j;\r\n}\r\n\r\nfunction ascending$3(series) {\r\n  var sums = series.map(sum$2);\r\n  return none$2(series).sort(function(a, b) { return sums[a] - sums[b]; });\r\n}\r\n\r\nfunction sum$2(series) {\r\n  var s = 0, i = -1, n = series.length, v;\r\n  while (++i < n) if (v = +series[i][1]) s += v;\r\n  return s;\r\n}\r\n\r\nfunction descending$2(series) {\r\n  return ascending$3(series).reverse();\r\n}\r\n\r\nfunction insideOut(series) {\r\n  var n = series.length,\r\n      i,\r\n      j,\r\n      sums = series.map(sum$2),\r\n      order = appearance(series),\r\n      top = 0,\r\n      bottom = 0,\r\n      tops = [],\r\n      bottoms = [];\r\n\r\n  for (i = 0; i < n; ++i) {\r\n    j = order[i];\r\n    if (top < bottom) {\r\n      top += sums[j];\r\n      tops.push(j);\r\n    } else {\r\n      bottom += sums[j];\r\n      bottoms.push(j);\r\n    }\r\n  }\r\n\r\n  return bottoms.reverse().concat(tops);\r\n}\r\n\r\nfunction reverse(series) {\r\n  return none$2(series).reverse();\r\n}\r\n\r\nfunction constant$c(x) {\r\n  return function() {\r\n    return x;\r\n  };\r\n}\r\n\r\nfunction x$4(d) {\r\n  return d[0];\r\n}\r\n\r\nfunction y$4(d) {\r\n  return d[1];\r\n}\r\n\r\nfunction RedBlackTree() {\r\n  this._ = null; // root node\r\n}\r\n\r\nfunction RedBlackNode(node) {\r\n  node.U = // parent node\r\n  node.C = // color - true for red, false for black\r\n  node.L = // left node\r\n  node.R = // right node\r\n  node.P = // previous node\r\n  node.N = null; // next node\r\n}\r\n\r\nRedBlackTree.prototype = {\r\n  constructor: RedBlackTree,\r\n\r\n  insert: function(after, node) {\r\n    var parent, grandpa, uncle;\r\n\r\n    if (after) {\r\n      node.P = after;\r\n      node.N = after.N;\r\n      if (after.N) after.N.P = node;\r\n      after.N = node;\r\n      if (after.R) {\r\n        after = after.R;\r\n        while (after.L) after = after.L;\r\n        after.L = node;\r\n      } else {\r\n        after.R = node;\r\n      }\r\n      parent = after;\r\n    } else if (this._) {\r\n      after = RedBlackFirst(this._);\r\n      node.P = null;\r\n      node.N = after;\r\n      after.P = after.L = node;\r\n      parent = after;\r\n    } else {\r\n      node.P = node.N = null;\r\n      this._ = node;\r\n      parent = null;\r\n    }\r\n    node.L = node.R = null;\r\n    node.U = parent;\r\n    node.C = true;\r\n\r\n    after = node;\r\n    while (parent && parent.C) {\r\n      grandpa = parent.U;\r\n      if (parent === grandpa.L) {\r\n        uncle = grandpa.R;\r\n        if (uncle && uncle.C) {\r\n          parent.C = uncle.C = false;\r\n          grandpa.C = true;\r\n          after = grandpa;\r\n        } else {\r\n          if (after === parent.R) {\r\n            RedBlackRotateLeft(this, parent);\r\n            after = parent;\r\n            parent = after.U;\r\n          }\r\n          parent.C = false;\r\n          grandpa.C = true;\r\n          RedBlackRotateRight(this, grandpa);\r\n        }\r\n      } else {\r\n        uncle = grandpa.L;\r\n        if (uncle && uncle.C) {\r\n          parent.C = uncle.C = false;\r\n          grandpa.C = true;\r\n          after = grandpa;\r\n        } else {\r\n          if (after === parent.L) {\r\n            RedBlackRotateRight(this, parent);\r\n            after = parent;\r\n            parent = after.U;\r\n          }\r\n          parent.C = false;\r\n          grandpa.C = true;\r\n          RedBlackRotateLeft(this, grandpa);\r\n        }\r\n      }\r\n      parent = after.U;\r\n    }\r\n    this._.C = false;\r\n  },\r\n\r\n  remove: function(node) {\r\n    if (node.N) node.N.P = node.P;\r\n    if (node.P) node.P.N = node.N;\r\n    node.N = node.P = null;\r\n\r\n    var parent = node.U,\r\n        sibling,\r\n        left = node.L,\r\n        right = node.R,\r\n        next,\r\n        red;\r\n\r\n    if (!left) next = right;\r\n    else if (!right) next = left;\r\n    else next = RedBlackFirst(right);\r\n\r\n    if (parent) {\r\n      if (parent.L === node) parent.L = next;\r\n      else parent.R = next;\r\n    } else {\r\n      this._ = next;\r\n    }\r\n\r\n    if (left && right) {\r\n      red = next.C;\r\n      next.C = node.C;\r\n      next.L = left;\r\n      left.U = next;\r\n      if (next !== right) {\r\n        parent = next.U;\r\n        next.U = node.U;\r\n        node = next.R;\r\n        parent.L = node;\r\n        next.R = right;\r\n        right.U = next;\r\n      } else {\r\n        next.U = parent;\r\n        parent = next;\r\n        node = next.R;\r\n      }\r\n    } else {\r\n      red = node.C;\r\n      node = next;\r\n    }\r\n\r\n    if (node) node.U = parent;\r\n    if (red) return;\r\n    if (node && node.C) { node.C = false; return; }\r\n\r\n    do {\r\n      if (node === this._) break;\r\n      if (node === parent.L) {\r\n        sibling = parent.R;\r\n        if (sibling.C) {\r\n          sibling.C = false;\r\n          parent.C = true;\r\n          RedBlackRotateLeft(this, parent);\r\n          sibling = parent.R;\r\n        }\r\n        if ((sibling.L && sibling.L.C)\r\n            || (sibling.R && sibling.R.C)) {\r\n          if (!sibling.R || !sibling.R.C) {\r\n            sibling.L.C = false;\r\n            sibling.C = true;\r\n            RedBlackRotateRight(this, sibling);\r\n            sibling = parent.R;\r\n          }\r\n          sibling.C = parent.C;\r\n          parent.C = sibling.R.C = false;\r\n          RedBlackRotateLeft(this, parent);\r\n          node = this._;\r\n          break;\r\n        }\r\n      } else {\r\n        sibling = parent.L;\r\n        if (sibling.C) {\r\n          sibling.C = false;\r\n          parent.C = true;\r\n          RedBlackRotateRight(this, parent);\r\n          sibling = parent.L;\r\n        }\r\n        if ((sibling.L && sibling.L.C)\r\n          || (sibling.R && sibling.R.C)) {\r\n          if (!sibling.L || !sibling.L.C) {\r\n            sibling.R.C = false;\r\n            sibling.C = true;\r\n            RedBlackRotateLeft(this, sibling);\r\n            sibling = parent.L;\r\n          }\r\n          sibling.C = parent.C;\r\n          parent.C = sibling.L.C = false;\r\n          RedBlackRotateRight(this, parent);\r\n          node = this._;\r\n          break;\r\n        }\r\n      }\r\n      sibling.C = true;\r\n      node = parent;\r\n      parent = parent.U;\r\n    } while (!node.C);\r\n\r\n    if (node) node.C = false;\r\n  }\r\n};\r\n\r\nfunction RedBlackRotateLeft(tree, node) {\r\n  var p = node,\r\n      q = node.R,\r\n      parent = p.U;\r\n\r\n  if (parent) {\r\n    if (parent.L === p) parent.L = q;\r\n    else parent.R = q;\r\n  } else {\r\n    tree._ = q;\r\n  }\r\n\r\n  q.U = parent;\r\n  p.U = q;\r\n  p.R = q.L;\r\n  if (p.R) p.R.U = p;\r\n  q.L = p;\r\n}\r\n\r\nfunction RedBlackRotateRight(tree, node) {\r\n  var p = node,\r\n      q = node.L,\r\n      parent = p.U;\r\n\r\n  if (parent) {\r\n    if (parent.L === p) parent.L = q;\r\n    else parent.R = q;\r\n  } else {\r\n    tree._ = q;\r\n  }\r\n\r\n  q.U = parent;\r\n  p.U = q;\r\n  p.L = q.R;\r\n  if (p.L) p.L.U = p;\r\n  q.R = p;\r\n}\r\n\r\nfunction RedBlackFirst(node) {\r\n  while (node.L) node = node.L;\r\n  return node;\r\n}\r\n\r\nfunction createEdge(left, right, v0, v1) {\r\n  var edge = [null, null],\r\n      index = edges.push(edge) - 1;\r\n  edge.left = left;\r\n  edge.right = right;\r\n  if (v0) setEdgeEnd(edge, left, right, v0);\r\n  if (v1) setEdgeEnd(edge, right, left, v1);\r\n  cells[left.index].halfedges.push(index);\r\n  cells[right.index].halfedges.push(index);\r\n  return edge;\r\n}\r\n\r\nfunction createBorderEdge(left, v0, v1) {\r\n  var edge = [v0, v1];\r\n  edge.left = left;\r\n  return edge;\r\n}\r\n\r\nfunction setEdgeEnd(edge, left, right, vertex) {\r\n  if (!edge[0] && !edge[1]) {\r\n    edge[0] = vertex;\r\n    edge.left = left;\r\n    edge.right = right;\r\n  } else if (edge.left === right) {\r\n    edge[1] = vertex;\r\n  } else {\r\n    edge[0] = vertex;\r\n  }\r\n}\r\n\r\n// Liang–Barsky line clipping.\r\nfunction clipEdge(edge, x0, y0, x1, y1) {\r\n  var a = edge[0],\r\n      b = edge[1],\r\n      ax = a[0],\r\n      ay = a[1],\r\n      bx = b[0],\r\n      by = b[1],\r\n      t0 = 0,\r\n      t1 = 1,\r\n      dx = bx - ax,\r\n      dy = by - ay,\r\n      r;\r\n\r\n  r = x0 - ax;\r\n  if (!dx && r > 0) return;\r\n  r /= dx;\r\n  if (dx < 0) {\r\n    if (r < t0) return;\r\n    if (r < t1) t1 = r;\r\n  } else if (dx > 0) {\r\n    if (r > t1) return;\r\n    if (r > t0) t0 = r;\r\n  }\r\n\r\n  r = x1 - ax;\r\n  if (!dx && r < 0) return;\r\n  r /= dx;\r\n  if (dx < 0) {\r\n    if (r > t1) return;\r\n    if (r > t0) t0 = r;\r\n  } else if (dx > 0) {\r\n    if (r < t0) return;\r\n    if (r < t1) t1 = r;\r\n  }\r\n\r\n  r = y0 - ay;\r\n  if (!dy && r > 0) return;\r\n  r /= dy;\r\n  if (dy < 0) {\r\n    if (r < t0) return;\r\n    if (r < t1) t1 = r;\r\n  } else if (dy > 0) {\r\n    if (r > t1) return;\r\n    if (r > t0) t0 = r;\r\n  }\r\n\r\n  r = y1 - ay;\r\n  if (!dy && r < 0) return;\r\n  r /= dy;\r\n  if (dy < 0) {\r\n    if (r > t1) return;\r\n    if (r > t0) t0 = r;\r\n  } else if (dy > 0) {\r\n    if (r < t0) return;\r\n    if (r < t1) t1 = r;\r\n  }\r\n\r\n  if (!(t0 > 0) && !(t1 < 1)) return true; // TODO Better check?\r\n\r\n  if (t0 > 0) edge[0] = [ax + t0 * dx, ay + t0 * dy];\r\n  if (t1 < 1) edge[1] = [ax + t1 * dx, ay + t1 * dy];\r\n  return true;\r\n}\r\n\r\nfunction connectEdge(edge, x0, y0, x1, y1) {\r\n  var v1 = edge[1];\r\n  if (v1) return true;\r\n\r\n  var v0 = edge[0],\r\n      left = edge.left,\r\n      right = edge.right,\r\n      lx = left[0],\r\n      ly = left[1],\r\n      rx = right[0],\r\n      ry = right[1],\r\n      fx = (lx + rx) / 2,\r\n      fy = (ly + ry) / 2,\r\n      fm,\r\n      fb;\r\n\r\n  if (ry === ly) {\r\n    if (fx < x0 || fx >= x1) return;\r\n    if (lx > rx) {\r\n      if (!v0) v0 = [fx, y0];\r\n      else if (v0[1] >= y1) return;\r\n      v1 = [fx, y1];\r\n    } else {\r\n      if (!v0) v0 = [fx, y1];\r\n      else if (v0[1] < y0) return;\r\n      v1 = [fx, y0];\r\n    }\r\n  } else {\r\n    fm = (lx - rx) / (ry - ly);\r\n    fb = fy - fm * fx;\r\n    if (fm < -1 || fm > 1) {\r\n      if (lx > rx) {\r\n        if (!v0) v0 = [(y0 - fb) / fm, y0];\r\n        else if (v0[1] >= y1) return;\r\n        v1 = [(y1 - fb) / fm, y1];\r\n      } else {\r\n        if (!v0) v0 = [(y1 - fb) / fm, y1];\r\n        else if (v0[1] < y0) return;\r\n        v1 = [(y0 - fb) / fm, y0];\r\n      }\r\n    } else {\r\n      if (ly < ry) {\r\n        if (!v0) v0 = [x0, fm * x0 + fb];\r\n        else if (v0[0] >= x1) return;\r\n        v1 = [x1, fm * x1 + fb];\r\n      } else {\r\n        if (!v0) v0 = [x1, fm * x1 + fb];\r\n        else if (v0[0] < x0) return;\r\n        v1 = [x0, fm * x0 + fb];\r\n      }\r\n    }\r\n  }\r\n\r\n  edge[0] = v0;\r\n  edge[1] = v1;\r\n  return true;\r\n}\r\n\r\nfunction clipEdges(x0, y0, x1, y1) {\r\n  var i = edges.length,\r\n      edge;\r\n\r\n  while (i--) {\r\n    if (!connectEdge(edge = edges[i], x0, y0, x1, y1)\r\n        || !clipEdge(edge, x0, y0, x1, y1)\r\n        || !(Math.abs(edge[0][0] - edge[1][0]) > epsilon$4\r\n            || Math.abs(edge[0][1] - edge[1][1]) > epsilon$4)) {\r\n      delete edges[i];\r\n    }\r\n  }\r\n}\r\n\r\nfunction createCell(site) {\r\n  return cells[site.index] = {\r\n    site: site,\r\n    halfedges: []\r\n  };\r\n}\r\n\r\nfunction cellHalfedgeAngle(cell, edge) {\r\n  var site = cell.site,\r\n      va = edge.left,\r\n      vb = edge.right;\r\n  if (site === vb) vb = va, va = site;\r\n  if (vb) return Math.atan2(vb[1] - va[1], vb[0] - va[0]);\r\n  if (site === va) va = edge[1], vb = edge[0];\r\n  else va = edge[0], vb = edge[1];\r\n  return Math.atan2(va[0] - vb[0], vb[1] - va[1]);\r\n}\r\n\r\nfunction cellHalfedgeStart(cell, edge) {\r\n  return edge[+(edge.left !== cell.site)];\r\n}\r\n\r\nfunction cellHalfedgeEnd(cell, edge) {\r\n  return edge[+(edge.left === cell.site)];\r\n}\r\n\r\nfunction sortCellHalfedges() {\r\n  for (var i = 0, n = cells.length, cell, halfedges, j, m; i < n; ++i) {\r\n    if ((cell = cells[i]) && (m = (halfedges = cell.halfedges).length)) {\r\n      var index = new Array(m),\r\n          array = new Array(m);\r\n      for (j = 0; j < m; ++j) index[j] = j, array[j] = cellHalfedgeAngle(cell, edges[halfedges[j]]);\r\n      index.sort(function(i, j) { return array[j] - array[i]; });\r\n      for (j = 0; j < m; ++j) array[j] = halfedges[index[j]];\r\n      for (j = 0; j < m; ++j) halfedges[j] = array[j];\r\n    }\r\n  }\r\n}\r\n\r\nfunction clipCells(x0, y0, x1, y1) {\r\n  var nCells = cells.length,\r\n      iCell,\r\n      cell,\r\n      site,\r\n      iHalfedge,\r\n      halfedges,\r\n      nHalfedges,\r\n      start,\r\n      startX,\r\n      startY,\r\n      end,\r\n      endX,\r\n      endY,\r\n      cover = true;\r\n\r\n  for (iCell = 0; iCell < nCells; ++iCell) {\r\n    if (cell = cells[iCell]) {\r\n      site = cell.site;\r\n      halfedges = cell.halfedges;\r\n      iHalfedge = halfedges.length;\r\n\r\n      // Remove any dangling clipped edges.\r\n      while (iHalfedge--) {\r\n        if (!edges[halfedges[iHalfedge]]) {\r\n          halfedges.splice(iHalfedge, 1);\r\n        }\r\n      }\r\n\r\n      // Insert any border edges as necessary.\r\n      iHalfedge = 0, nHalfedges = halfedges.length;\r\n      while (iHalfedge < nHalfedges) {\r\n        end = cellHalfedgeEnd(cell, edges[halfedges[iHalfedge]]), endX = end[0], endY = end[1];\r\n        start = cellHalfedgeStart(cell, edges[halfedges[++iHalfedge % nHalfedges]]), startX = start[0], startY = start[1];\r\n        if (Math.abs(endX - startX) > epsilon$4 || Math.abs(endY - startY) > epsilon$4) {\r\n          halfedges.splice(iHalfedge, 0, edges.push(createBorderEdge(site, end,\r\n              Math.abs(endX - x0) < epsilon$4 && y1 - endY > epsilon$4 ? [x0, Math.abs(startX - x0) < epsilon$4 ? startY : y1]\r\n              : Math.abs(endY - y1) < epsilon$4 && x1 - endX > epsilon$4 ? [Math.abs(startY - y1) < epsilon$4 ? startX : x1, y1]\r\n              : Math.abs(endX - x1) < epsilon$4 && endY - y0 > epsilon$4 ? [x1, Math.abs(startX - x1) < epsilon$4 ? startY : y0]\r\n              : Math.abs(endY - y0) < epsilon$4 && endX - x0 > epsilon$4 ? [Math.abs(startY - y0) < epsilon$4 ? startX : x0, y0]\r\n              : null)) - 1);\r\n          ++nHalfedges;\r\n        }\r\n      }\r\n\r\n      if (nHalfedges) cover = false;\r\n    }\r\n  }\r\n\r\n  // If there weren’t any edges, have the closest site cover the extent.\r\n  // It doesn’t matter which corner of the extent we measure!\r\n  if (cover) {\r\n    var dx, dy, d2, dc = Infinity;\r\n\r\n    for (iCell = 0, cover = null; iCell < nCells; ++iCell) {\r\n      if (cell = cells[iCell]) {\r\n        site = cell.site;\r\n        dx = site[0] - x0;\r\n        dy = site[1] - y0;\r\n        d2 = dx * dx + dy * dy;\r\n        if (d2 < dc) dc = d2, cover = cell;\r\n      }\r\n    }\r\n\r\n    if (cover) {\r\n      var v00 = [x0, y0], v01 = [x0, y1], v11 = [x1, y1], v10 = [x1, y0];\r\n      cover.halfedges.push(\r\n        edges.push(createBorderEdge(site = cover.site, v00, v01)) - 1,\r\n        edges.push(createBorderEdge(site, v01, v11)) - 1,\r\n        edges.push(createBorderEdge(site, v11, v10)) - 1,\r\n        edges.push(createBorderEdge(site, v10, v00)) - 1\r\n      );\r\n    }\r\n  }\r\n\r\n  // Lastly delete any cells with no edges; these were entirely clipped.\r\n  for (iCell = 0; iCell < nCells; ++iCell) {\r\n    if (cell = cells[iCell]) {\r\n      if (!cell.halfedges.length) {\r\n        delete cells[iCell];\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nvar circlePool = [];\r\n\r\nvar firstCircle;\r\n\r\nfunction Circle() {\r\n  RedBlackNode(this);\r\n  this.x =\r\n  this.y =\r\n  this.arc =\r\n  this.site =\r\n  this.cy = null;\r\n}\r\n\r\nfunction attachCircle(arc) {\r\n  var lArc = arc.P,\r\n      rArc = arc.N;\r\n\r\n  if (!lArc || !rArc) return;\r\n\r\n  var lSite = lArc.site,\r\n      cSite = arc.site,\r\n      rSite = rArc.site;\r\n\r\n  if (lSite === rSite) return;\r\n\r\n  var bx = cSite[0],\r\n      by = cSite[1],\r\n      ax = lSite[0] - bx,\r\n      ay = lSite[1] - by,\r\n      cx = rSite[0] - bx,\r\n      cy = rSite[1] - by;\r\n\r\n  var d = 2 * (ax * cy - ay * cx);\r\n  if (d >= -epsilon2$2) return;\r\n\r\n  var ha = ax * ax + ay * ay,\r\n      hc = cx * cx + cy * cy,\r\n      x = (cy * ha - ay * hc) / d,\r\n      y = (ax * hc - cx * ha) / d;\r\n\r\n  var circle = circlePool.pop() || new Circle;\r\n  circle.arc = arc;\r\n  circle.site = cSite;\r\n  circle.x = x + bx;\r\n  circle.y = (circle.cy = y + by) + Math.sqrt(x * x + y * y); // y bottom\r\n\r\n  arc.circle = circle;\r\n\r\n  var before = null,\r\n      node = circles._;\r\n\r\n  while (node) {\r\n    if (circle.y < node.y || (circle.y === node.y && circle.x <= node.x)) {\r\n      if (node.L) node = node.L;\r\n      else { before = node.P; break; }\r\n    } else {\r\n      if (node.R) node = node.R;\r\n      else { before = node; break; }\r\n    }\r\n  }\r\n\r\n  circles.insert(before, circle);\r\n  if (!before) firstCircle = circle;\r\n}\r\n\r\nfunction detachCircle(arc) {\r\n  var circle = arc.circle;\r\n  if (circle) {\r\n    if (!circle.P) firstCircle = circle.N;\r\n    circles.remove(circle);\r\n    circlePool.push(circle);\r\n    RedBlackNode(circle);\r\n    arc.circle = null;\r\n  }\r\n}\r\n\r\nvar beachPool = [];\r\n\r\nfunction Beach() {\r\n  RedBlackNode(this);\r\n  this.edge =\r\n  this.site =\r\n  this.circle = null;\r\n}\r\n\r\nfunction createBeach(site) {\r\n  var beach = beachPool.pop() || new Beach;\r\n  beach.site = site;\r\n  return beach;\r\n}\r\n\r\nfunction detachBeach(beach) {\r\n  detachCircle(beach);\r\n  beaches.remove(beach);\r\n  beachPool.push(beach);\r\n  RedBlackNode(beach);\r\n}\r\n\r\nfunction removeBeach(beach) {\r\n  var circle = beach.circle,\r\n      x = circle.x,\r\n      y = circle.cy,\r\n      vertex = [x, y],\r\n      previous = beach.P,\r\n      next = beach.N,\r\n      disappearing = [beach];\r\n\r\n  detachBeach(beach);\r\n\r\n  var lArc = previous;\r\n  while (lArc.circle\r\n      && Math.abs(x - lArc.circle.x) < epsilon$4\r\n      && Math.abs(y - lArc.circle.cy) < epsilon$4) {\r\n    previous = lArc.P;\r\n    disappearing.unshift(lArc);\r\n    detachBeach(lArc);\r\n    lArc = previous;\r\n  }\r\n\r\n  disappearing.unshift(lArc);\r\n  detachCircle(lArc);\r\n\r\n  var rArc = next;\r\n  while (rArc.circle\r\n      && Math.abs(x - rArc.circle.x) < epsilon$4\r\n      && Math.abs(y - rArc.circle.cy) < epsilon$4) {\r\n    next = rArc.N;\r\n    disappearing.push(rArc);\r\n    detachBeach(rArc);\r\n    rArc = next;\r\n  }\r\n\r\n  disappearing.push(rArc);\r\n  detachCircle(rArc);\r\n\r\n  var nArcs = disappearing.length,\r\n      iArc;\r\n  for (iArc = 1; iArc < nArcs; ++iArc) {\r\n    rArc = disappearing[iArc];\r\n    lArc = disappearing[iArc - 1];\r\n    setEdgeEnd(rArc.edge, lArc.site, rArc.site, vertex);\r\n  }\r\n\r\n  lArc = disappearing[0];\r\n  rArc = disappearing[nArcs - 1];\r\n  rArc.edge = createEdge(lArc.site, rArc.site, null, vertex);\r\n\r\n  attachCircle(lArc);\r\n  attachCircle(rArc);\r\n}\r\n\r\nfunction addBeach(site) {\r\n  var x = site[0],\r\n      directrix = site[1],\r\n      lArc,\r\n      rArc,\r\n      dxl,\r\n      dxr,\r\n      node = beaches._;\r\n\r\n  while (node) {\r\n    dxl = leftBreakPoint(node, directrix) - x;\r\n    if (dxl > epsilon$4) node = node.L; else {\r\n      dxr = x - rightBreakPoint(node, directrix);\r\n      if (dxr > epsilon$4) {\r\n        if (!node.R) {\r\n          lArc = node;\r\n          break;\r\n        }\r\n        node = node.R;\r\n      } else {\r\n        if (dxl > -epsilon$4) {\r\n          lArc = node.P;\r\n          rArc = node;\r\n        } else if (dxr > -epsilon$4) {\r\n          lArc = node;\r\n          rArc = node.N;\r\n        } else {\r\n          lArc = rArc = node;\r\n        }\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  createCell(site);\r\n  var newArc = createBeach(site);\r\n  beaches.insert(lArc, newArc);\r\n\r\n  if (!lArc && !rArc) return;\r\n\r\n  if (lArc === rArc) {\r\n    detachCircle(lArc);\r\n    rArc = createBeach(lArc.site);\r\n    beaches.insert(newArc, rArc);\r\n    newArc.edge = rArc.edge = createEdge(lArc.site, newArc.site);\r\n    attachCircle(lArc);\r\n    attachCircle(rArc);\r\n    return;\r\n  }\r\n\r\n  if (!rArc) { // && lArc\r\n    newArc.edge = createEdge(lArc.site, newArc.site);\r\n    return;\r\n  }\r\n\r\n  // else lArc !== rArc\r\n  detachCircle(lArc);\r\n  detachCircle(rArc);\r\n\r\n  var lSite = lArc.site,\r\n      ax = lSite[0],\r\n      ay = lSite[1],\r\n      bx = site[0] - ax,\r\n      by = site[1] - ay,\r\n      rSite = rArc.site,\r\n      cx = rSite[0] - ax,\r\n      cy = rSite[1] - ay,\r\n      d = 2 * (bx * cy - by * cx),\r\n      hb = bx * bx + by * by,\r\n      hc = cx * cx + cy * cy,\r\n      vertex = [(cy * hb - by * hc) / d + ax, (bx * hc - cx * hb) / d + ay];\r\n\r\n  setEdgeEnd(rArc.edge, lSite, rSite, vertex);\r\n  newArc.edge = createEdge(lSite, site, null, vertex);\r\n  rArc.edge = createEdge(site, rSite, null, vertex);\r\n  attachCircle(lArc);\r\n  attachCircle(rArc);\r\n}\r\n\r\nfunction leftBreakPoint(arc, directrix) {\r\n  var site = arc.site,\r\n      rfocx = site[0],\r\n      rfocy = site[1],\r\n      pby2 = rfocy - directrix;\r\n\r\n  if (!pby2) return rfocx;\r\n\r\n  var lArc = arc.P;\r\n  if (!lArc) return -Infinity;\r\n\r\n  site = lArc.site;\r\n  var lfocx = site[0],\r\n      lfocy = site[1],\r\n      plby2 = lfocy - directrix;\r\n\r\n  if (!plby2) return lfocx;\r\n\r\n  var hl = lfocx - rfocx,\r\n      aby2 = 1 / pby2 - 1 / plby2,\r\n      b = hl / plby2;\r\n\r\n  if (aby2) return (-b + Math.sqrt(b * b - 2 * aby2 * (hl * hl / (-2 * plby2) - lfocy + plby2 / 2 + rfocy - pby2 / 2))) / aby2 + rfocx;\r\n\r\n  return (rfocx + lfocx) / 2;\r\n}\r\n\r\nfunction rightBreakPoint(arc, directrix) {\r\n  var rArc = arc.N;\r\n  if (rArc) return leftBreakPoint(rArc, directrix);\r\n  var site = arc.site;\r\n  return site[1] === directrix ? site[0] : Infinity;\r\n}\r\n\r\nvar epsilon$4 = 1e-6;\r\nvar epsilon2$2 = 1e-12;\r\nvar beaches;\r\nvar cells;\r\nvar circles;\r\nvar edges;\r\n\r\nfunction triangleArea(a, b, c) {\r\n  return (a[0] - c[0]) * (b[1] - a[1]) - (a[0] - b[0]) * (c[1] - a[1]);\r\n}\r\n\r\nfunction lexicographic(a, b) {\r\n  return b[1] - a[1]\r\n      || b[0] - a[0];\r\n}\r\n\r\nfunction Diagram(sites, extent) {\r\n  var site = sites.sort(lexicographic).pop(),\r\n      x,\r\n      y,\r\n      circle;\r\n\r\n  edges = [];\r\n  cells = new Array(sites.length);\r\n  beaches = new RedBlackTree;\r\n  circles = new RedBlackTree;\r\n\r\n  while (true) {\r\n    circle = firstCircle;\r\n    if (site && (!circle || site[1] < circle.y || (site[1] === circle.y && site[0] < circle.x))) {\r\n      if (site[0] !== x || site[1] !== y) {\r\n        addBeach(site);\r\n        x = site[0], y = site[1];\r\n      }\r\n      site = sites.pop();\r\n    } else if (circle) {\r\n      removeBeach(circle.arc);\r\n    } else {\r\n      break;\r\n    }\r\n  }\r\n\r\n  sortCellHalfedges();\r\n\r\n  if (extent) {\r\n    var x0 = +extent[0][0],\r\n        y0 = +extent[0][1],\r\n        x1 = +extent[1][0],\r\n        y1 = +extent[1][1];\r\n    clipEdges(x0, y0, x1, y1);\r\n    clipCells(x0, y0, x1, y1);\r\n  }\r\n\r\n  this.edges = edges;\r\n  this.cells = cells;\r\n\r\n  beaches =\r\n  circles =\r\n  edges =\r\n  cells = null;\r\n}\r\n\r\nDiagram.prototype = {\r\n  constructor: Diagram,\r\n\r\n  polygons: function() {\r\n    var edges = this.edges;\r\n\r\n    return this.cells.map(function(cell) {\r\n      var polygon = cell.halfedges.map(function(i) { return cellHalfedgeStart(cell, edges[i]); });\r\n      polygon.data = cell.site.data;\r\n      return polygon;\r\n    });\r\n  },\r\n\r\n  triangles: function() {\r\n    var triangles = [],\r\n        edges = this.edges;\r\n\r\n    this.cells.forEach(function(cell, i) {\r\n      if (!(m = (halfedges = cell.halfedges).length)) return;\r\n      var site = cell.site,\r\n          halfedges,\r\n          j = -1,\r\n          m,\r\n          s0,\r\n          e1 = edges[halfedges[m - 1]],\r\n          s1 = e1.left === site ? e1.right : e1.left;\r\n\r\n      while (++j < m) {\r\n        s0 = s1;\r\n        e1 = edges[halfedges[j]];\r\n        s1 = e1.left === site ? e1.right : e1.left;\r\n        if (s0 && s1 && i < s0.index && i < s1.index && triangleArea(site, s0, s1) < 0) {\r\n          triangles.push([site.data, s0.data, s1.data]);\r\n        }\r\n      }\r\n    });\r\n\r\n    return triangles;\r\n  },\r\n\r\n  links: function() {\r\n    return this.edges.filter(function(edge) {\r\n      return edge.right;\r\n    }).map(function(edge) {\r\n      return {\r\n        source: edge.left.data,\r\n        target: edge.right.data\r\n      };\r\n    });\r\n  },\r\n\r\n  find: function(x, y, radius) {\r\n    var that = this, i0, i1 = that._found || 0, n = that.cells.length, cell;\r\n\r\n    // Use the previously-found cell, or start with an arbitrary one.\r\n    while (!(cell = that.cells[i1])) if (++i1 >= n) return null;\r\n    var dx = x - cell.site[0], dy = y - cell.site[1], d2 = dx * dx + dy * dy;\r\n\r\n    // Traverse the half-edges to find a closer cell, if any.\r\n    do {\r\n      cell = that.cells[i0 = i1], i1 = null;\r\n      cell.halfedges.forEach(function(e) {\r\n        var edge = that.edges[e], v = edge.left;\r\n        if ((v === cell.site || !v) && !(v = edge.right)) return;\r\n        var vx = x - v[0], vy = y - v[1], v2 = vx * vx + vy * vy;\r\n        if (v2 < d2) d2 = v2, i1 = v.index;\r\n      });\r\n    } while (i1 !== null);\r\n\r\n    that._found = i0;\r\n\r\n    return radius == null || d2 <= radius * radius ? cell.site : null;\r\n  }\r\n};\r\n\r\nfunction voronoi() {\r\n  var x = x$4,\r\n      y = y$4,\r\n      extent = null;\r\n\r\n  function voronoi(data) {\r\n    return new Diagram(data.map(function(d, i) {\r\n      var s = [Math.round(x(d, i, data) / epsilon$4) * epsilon$4, Math.round(y(d, i, data) / epsilon$4) * epsilon$4];\r\n      s.index = i;\r\n      s.data = d;\r\n      return s;\r\n    }), extent);\r\n  }\r\n\r\n  voronoi.polygons = function(data) {\r\n    return voronoi(data).polygons();\r\n  };\r\n\r\n  voronoi.links = function(data) {\r\n    return voronoi(data).links();\r\n  };\r\n\r\n  voronoi.triangles = function(data) {\r\n    return voronoi(data).triangles();\r\n  };\r\n\r\n  voronoi.x = function(_) {\r\n    return arguments.length ? (x = typeof _ === \"function\" ? _ : constant$c(+_), voronoi) : x;\r\n  };\r\n\r\n  voronoi.y = function(_) {\r\n    return arguments.length ? (y = typeof _ === \"function\" ? _ : constant$c(+_), voronoi) : y;\r\n  };\r\n\r\n  voronoi.extent = function(_) {\r\n    return arguments.length ? (extent = _ == null ? null : [[+_[0][0], +_[0][1]], [+_[1][0], +_[1][1]]], voronoi) : extent && [[extent[0][0], extent[0][1]], [extent[1][0], extent[1][1]]];\r\n  };\r\n\r\n  voronoi.size = function(_) {\r\n    return arguments.length ? (extent = _ == null ? null : [[0, 0], [+_[0], +_[1]]], voronoi) : extent && [extent[1][0] - extent[0][0], extent[1][1] - extent[0][1]];\r\n  };\r\n\r\n  return voronoi;\r\n}\r\n\r\nfunction constant$d(x) {\r\n  return function() {\r\n    return x;\r\n  };\r\n}\r\n\r\nfunction ZoomEvent(target, type, transform) {\r\n  this.target = target;\r\n  this.type = type;\r\n  this.transform = transform;\r\n}\r\n\r\nfunction Transform(k, x, y) {\r\n  this.k = k;\r\n  this.x = x;\r\n  this.y = y;\r\n}\r\n\r\nTransform.prototype = {\r\n  constructor: Transform,\r\n  scale: function(k) {\r\n    return k === 1 ? this : new Transform(this.k * k, this.x, this.y);\r\n  },\r\n  translate: function(x, y) {\r\n    return x === 0 & y === 0 ? this : new Transform(this.k, this.x + this.k * x, this.y + this.k * y);\r\n  },\r\n  apply: function(point) {\r\n    return [point[0] * this.k + this.x, point[1] * this.k + this.y];\r\n  },\r\n  applyX: function(x) {\r\n    return x * this.k + this.x;\r\n  },\r\n  applyY: function(y) {\r\n    return y * this.k + this.y;\r\n  },\r\n  invert: function(location) {\r\n    return [(location[0] - this.x) / this.k, (location[1] - this.y) / this.k];\r\n  },\r\n  invertX: function(x) {\r\n    return (x - this.x) / this.k;\r\n  },\r\n  invertY: function(y) {\r\n    return (y - this.y) / this.k;\r\n  },\r\n  rescaleX: function(x) {\r\n    return x.copy().domain(x.range().map(this.invertX, this).map(x.invert, x));\r\n  },\r\n  rescaleY: function(y) {\r\n    return y.copy().domain(y.range().map(this.invertY, this).map(y.invert, y));\r\n  },\r\n  toString: function() {\r\n    return \"translate(\" + this.x + \",\" + this.y + \") scale(\" + this.k + \")\";\r\n  }\r\n};\r\n\r\nvar identity$9 = new Transform(1, 0, 0);\r\n\r\ntransform$1.prototype = Transform.prototype;\r\n\r\nfunction transform$1(node) {\r\n  while (!node.__zoom) if (!(node = node.parentNode)) return identity$9;\r\n  return node.__zoom;\r\n}\r\n\r\nfunction nopropagation$2() {\r\n  exports.event.stopImmediatePropagation();\r\n}\r\n\r\nfunction noevent$2() {\r\n  exports.event.preventDefault();\r\n  exports.event.stopImmediatePropagation();\r\n}\r\n\r\n// Ignore right-click, since that should open the context menu.\r\nfunction defaultFilter$2() {\r\n  return !exports.event.ctrlKey && !exports.event.button;\r\n}\r\n\r\nfunction defaultExtent$1() {\r\n  var e = this;\r\n  if (e instanceof SVGElement) {\r\n    e = e.ownerSVGElement || e;\r\n    if (e.hasAttribute(\"viewBox\")) {\r\n      e = e.viewBox.baseVal;\r\n      return [[e.x, e.y], [e.x + e.width, e.y + e.height]];\r\n    }\r\n    return [[0, 0], [e.width.baseVal.value, e.height.baseVal.value]];\r\n  }\r\n  return [[0, 0], [e.clientWidth, e.clientHeight]];\r\n}\r\n\r\nfunction defaultTransform() {\r\n  return this.__zoom || identity$9;\r\n}\r\n\r\nfunction defaultWheelDelta() {\r\n  return -exports.event.deltaY * (exports.event.deltaMode === 1 ? 0.05 : exports.event.deltaMode ? 1 : 0.002);\r\n}\r\n\r\nfunction defaultTouchable$2() {\r\n  return navigator.maxTouchPoints || (\"ontouchstart\" in this);\r\n}\r\n\r\nfunction defaultConstrain(transform, extent, translateExtent) {\r\n  var dx0 = transform.invertX(extent[0][0]) - translateExtent[0][0],\r\n      dx1 = transform.invertX(extent[1][0]) - translateExtent[1][0],\r\n      dy0 = transform.invertY(extent[0][1]) - translateExtent[0][1],\r\n      dy1 = transform.invertY(extent[1][1]) - translateExtent[1][1];\r\n  return transform.translate(\r\n    dx1 > dx0 ? (dx0 + dx1) / 2 : Math.min(0, dx0) || Math.max(0, dx1),\r\n    dy1 > dy0 ? (dy0 + dy1) / 2 : Math.min(0, dy0) || Math.max(0, dy1)\r\n  );\r\n}\r\n\r\nfunction zoom() {\r\n  var filter = defaultFilter$2,\r\n      extent = defaultExtent$1,\r\n      constrain = defaultConstrain,\r\n      wheelDelta = defaultWheelDelta,\r\n      touchable = defaultTouchable$2,\r\n      scaleExtent = [0, Infinity],\r\n      translateExtent = [[-Infinity, -Infinity], [Infinity, Infinity]],\r\n      duration = 250,\r\n      interpolate = interpolateZoom,\r\n      listeners = dispatch(\"start\", \"zoom\", \"end\"),\r\n      touchstarting,\r\n      touchending,\r\n      touchDelay = 500,\r\n      wheelDelay = 150,\r\n      clickDistance2 = 0;\r\n\r\n  function zoom(selection) {\r\n    selection\r\n        .property(\"__zoom\", defaultTransform)\r\n        .on(\"wheel.zoom\", wheeled)\r\n        .on(\"mousedown.zoom\", mousedowned)\r\n        .on(\"dblclick.zoom\", dblclicked)\r\n      .filter(touchable)\r\n        .on(\"touchstart.zoom\", touchstarted)\r\n        .on(\"touchmove.zoom\", touchmoved)\r\n        .on(\"touchend.zoom touchcancel.zoom\", touchended)\r\n        .style(\"touch-action\", \"none\")\r\n        .style(\"-webkit-tap-highlight-color\", \"rgba(0,0,0,0)\");\r\n  }\r\n\r\n  zoom.transform = function(collection, transform, point) {\r\n    var selection = collection.selection ? collection.selection() : collection;\r\n    selection.property(\"__zoom\", defaultTransform);\r\n    if (collection !== selection) {\r\n      schedule(collection, transform, point);\r\n    } else {\r\n      selection.interrupt().each(function() {\r\n        gesture(this, arguments)\r\n            .start()\r\n            .zoom(null, typeof transform === \"function\" ? transform.apply(this, arguments) : transform)\r\n            .end();\r\n      });\r\n    }\r\n  };\r\n\r\n  zoom.scaleBy = function(selection, k, p) {\r\n    zoom.scaleTo(selection, function() {\r\n      var k0 = this.__zoom.k,\r\n          k1 = typeof k === \"function\" ? k.apply(this, arguments) : k;\r\n      return k0 * k1;\r\n    }, p);\r\n  };\r\n\r\n  zoom.scaleTo = function(selection, k, p) {\r\n    zoom.transform(selection, function() {\r\n      var e = extent.apply(this, arguments),\r\n          t0 = this.__zoom,\r\n          p0 = p == null ? centroid(e) : typeof p === \"function\" ? p.apply(this, arguments) : p,\r\n          p1 = t0.invert(p0),\r\n          k1 = typeof k === \"function\" ? k.apply(this, arguments) : k;\r\n      return constrain(translate(scale(t0, k1), p0, p1), e, translateExtent);\r\n    }, p);\r\n  };\r\n\r\n  zoom.translateBy = function(selection, x, y) {\r\n    zoom.transform(selection, function() {\r\n      return constrain(this.__zoom.translate(\r\n        typeof x === \"function\" ? x.apply(this, arguments) : x,\r\n        typeof y === \"function\" ? y.apply(this, arguments) : y\r\n      ), extent.apply(this, arguments), translateExtent);\r\n    });\r\n  };\r\n\r\n  zoom.translateTo = function(selection, x, y, p) {\r\n    zoom.transform(selection, function() {\r\n      var e = extent.apply(this, arguments),\r\n          t = this.__zoom,\r\n          p0 = p == null ? centroid(e) : typeof p === \"function\" ? p.apply(this, arguments) : p;\r\n      return constrain(identity$9.translate(p0[0], p0[1]).scale(t.k).translate(\r\n        typeof x === \"function\" ? -x.apply(this, arguments) : -x,\r\n        typeof y === \"function\" ? -y.apply(this, arguments) : -y\r\n      ), e, translateExtent);\r\n    }, p);\r\n  };\r\n\r\n  function scale(transform, k) {\r\n    k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], k));\r\n    return k === transform.k ? transform : new Transform(k, transform.x, transform.y);\r\n  }\r\n\r\n  function translate(transform, p0, p1) {\r\n    var x = p0[0] - p1[0] * transform.k, y = p0[1] - p1[1] * transform.k;\r\n    return x === transform.x && y === transform.y ? transform : new Transform(transform.k, x, y);\r\n  }\r\n\r\n  function centroid(extent) {\r\n    return [(+extent[0][0] + +extent[1][0]) / 2, (+extent[0][1] + +extent[1][1]) / 2];\r\n  }\r\n\r\n  function schedule(transition, transform, point) {\r\n    transition\r\n        .on(\"start.zoom\", function() { gesture(this, arguments).start(); })\r\n        .on(\"interrupt.zoom end.zoom\", function() { gesture(this, arguments).end(); })\r\n        .tween(\"zoom\", function() {\r\n          var that = this,\r\n              args = arguments,\r\n              g = gesture(that, args),\r\n              e = extent.apply(that, args),\r\n              p = point == null ? centroid(e) : typeof point === \"function\" ? point.apply(that, args) : point,\r\n              w = Math.max(e[1][0] - e[0][0], e[1][1] - e[0][1]),\r\n              a = that.__zoom,\r\n              b = typeof transform === \"function\" ? transform.apply(that, args) : transform,\r\n              i = interpolate(a.invert(p).concat(w / a.k), b.invert(p).concat(w / b.k));\r\n          return function(t) {\r\n            if (t === 1) t = b; // Avoid rounding error on end.\r\n            else { var l = i(t), k = w / l[2]; t = new Transform(k, p[0] - l[0] * k, p[1] - l[1] * k); }\r\n            g.zoom(null, t);\r\n          };\r\n        });\r\n  }\r\n\r\n  function gesture(that, args, clean) {\r\n    return (!clean && that.__zooming) || new Gesture(that, args);\r\n  }\r\n\r\n  function Gesture(that, args) {\r\n    this.that = that;\r\n    this.args = args;\r\n    this.active = 0;\r\n    this.extent = extent.apply(that, args);\r\n    this.taps = 0;\r\n  }\r\n\r\n  Gesture.prototype = {\r\n    start: function() {\r\n      if (++this.active === 1) {\r\n        this.that.__zooming = this;\r\n        this.emit(\"start\");\r\n      }\r\n      return this;\r\n    },\r\n    zoom: function(key, transform) {\r\n      if (this.mouse && key !== \"mouse\") this.mouse[1] = transform.invert(this.mouse[0]);\r\n      if (this.touch0 && key !== \"touch\") this.touch0[1] = transform.invert(this.touch0[0]);\r\n      if (this.touch1 && key !== \"touch\") this.touch1[1] = transform.invert(this.touch1[0]);\r\n      this.that.__zoom = transform;\r\n      this.emit(\"zoom\");\r\n      return this;\r\n    },\r\n    end: function() {\r\n      if (--this.active === 0) {\r\n        delete this.that.__zooming;\r\n        this.emit(\"end\");\r\n      }\r\n      return this;\r\n    },\r\n    emit: function(type) {\r\n      customEvent(new ZoomEvent(zoom, type, this.that.__zoom), listeners.apply, listeners, [type, this.that, this.args]);\r\n    }\r\n  };\r\n\r\n  function wheeled() {\r\n    if (!filter.apply(this, arguments)) return;\r\n    var g = gesture(this, arguments),\r\n        t = this.__zoom,\r\n        k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], t.k * Math.pow(2, wheelDelta.apply(this, arguments)))),\r\n        p = mouse(this);\r\n\r\n    // If the mouse is in the same location as before, reuse it.\r\n    // If there were recent wheel events, reset the wheel idle timeout.\r\n    if (g.wheel) {\r\n      if (g.mouse[0][0] !== p[0] || g.mouse[0][1] !== p[1]) {\r\n        g.mouse[1] = t.invert(g.mouse[0] = p);\r\n      }\r\n      clearTimeout(g.wheel);\r\n    }\r\n\r\n    // If this wheel event won’t trigger a transform change, ignore it.\r\n    else if (t.k === k) return;\r\n\r\n    // Otherwise, capture the mouse point and location at the start.\r\n    else {\r\n      g.mouse = [p, t.invert(p)];\r\n      interrupt(this);\r\n      g.start();\r\n    }\r\n\r\n    noevent$2();\r\n    g.wheel = setTimeout(wheelidled, wheelDelay);\r\n    g.zoom(\"mouse\", constrain(translate(scale(t, k), g.mouse[0], g.mouse[1]), g.extent, translateExtent));\r\n\r\n    function wheelidled() {\r\n      g.wheel = null;\r\n      g.end();\r\n    }\r\n  }\r\n\r\n  function mousedowned() {\r\n    if (touchending || !filter.apply(this, arguments)) return;\r\n    var g = gesture(this, arguments, true),\r\n        v = select(exports.event.view).on(\"mousemove.zoom\", mousemoved, true).on(\"mouseup.zoom\", mouseupped, true),\r\n        p = mouse(this),\r\n        x0 = exports.event.clientX,\r\n        y0 = exports.event.clientY;\r\n\r\n    dragDisable(exports.event.view);\r\n    nopropagation$2();\r\n    g.mouse = [p, this.__zoom.invert(p)];\r\n    interrupt(this);\r\n    g.start();\r\n\r\n    function mousemoved() {\r\n      noevent$2();\r\n      if (!g.moved) {\r\n        var dx = exports.event.clientX - x0, dy = exports.event.clientY - y0;\r\n        g.moved = dx * dx + dy * dy > clickDistance2;\r\n      }\r\n      g.zoom(\"mouse\", constrain(translate(g.that.__zoom, g.mouse[0] = mouse(g.that), g.mouse[1]), g.extent, translateExtent));\r\n    }\r\n\r\n    function mouseupped() {\r\n      v.on(\"mousemove.zoom mouseup.zoom\", null);\r\n      yesdrag(exports.event.view, g.moved);\r\n      noevent$2();\r\n      g.end();\r\n    }\r\n  }\r\n\r\n  function dblclicked() {\r\n    if (!filter.apply(this, arguments)) return;\r\n    var t0 = this.__zoom,\r\n        p0 = mouse(this),\r\n        p1 = t0.invert(p0),\r\n        k1 = t0.k * (exports.event.shiftKey ? 0.5 : 2),\r\n        t1 = constrain(translate(scale(t0, k1), p0, p1), extent.apply(this, arguments), translateExtent);\r\n\r\n    noevent$2();\r\n    if (duration > 0) select(this).transition().duration(duration).call(schedule, t1, p0);\r\n    else select(this).call(zoom.transform, t1);\r\n  }\r\n\r\n  function touchstarted() {\r\n    if (!filter.apply(this, arguments)) return;\r\n    var touches = exports.event.touches,\r\n        n = touches.length,\r\n        g = gesture(this, arguments, exports.event.changedTouches.length === n),\r\n        started, i, t, p;\r\n\r\n    nopropagation$2();\r\n    for (i = 0; i < n; ++i) {\r\n      t = touches[i], p = touch(this, touches, t.identifier);\r\n      p = [p, this.__zoom.invert(p), t.identifier];\r\n      if (!g.touch0) g.touch0 = p, started = true, g.taps = 1 + !!touchstarting;\r\n      else if (!g.touch1 && g.touch0[2] !== p[2]) g.touch1 = p, g.taps = 0;\r\n    }\r\n\r\n    if (touchstarting) touchstarting = clearTimeout(touchstarting);\r\n\r\n    if (started) {\r\n      if (g.taps < 2) touchstarting = setTimeout(function() { touchstarting = null; }, touchDelay);\r\n      interrupt(this);\r\n      g.start();\r\n    }\r\n  }\r\n\r\n  function touchmoved() {\r\n    if (!this.__zooming) return;\r\n    var g = gesture(this, arguments),\r\n        touches = exports.event.changedTouches,\r\n        n = touches.length, i, t, p, l;\r\n\r\n    noevent$2();\r\n    if (touchstarting) touchstarting = clearTimeout(touchstarting);\r\n    g.taps = 0;\r\n    for (i = 0; i < n; ++i) {\r\n      t = touches[i], p = touch(this, touches, t.identifier);\r\n      if (g.touch0 && g.touch0[2] === t.identifier) g.touch0[0] = p;\r\n      else if (g.touch1 && g.touch1[2] === t.identifier) g.touch1[0] = p;\r\n    }\r\n    t = g.that.__zoom;\r\n    if (g.touch1) {\r\n      var p0 = g.touch0[0], l0 = g.touch0[1],\r\n          p1 = g.touch1[0], l1 = g.touch1[1],\r\n          dp = (dp = p1[0] - p0[0]) * dp + (dp = p1[1] - p0[1]) * dp,\r\n          dl = (dl = l1[0] - l0[0]) * dl + (dl = l1[1] - l0[1]) * dl;\r\n      t = scale(t, Math.sqrt(dp / dl));\r\n      p = [(p0[0] + p1[0]) / 2, (p0[1] + p1[1]) / 2];\r\n      l = [(l0[0] + l1[0]) / 2, (l0[1] + l1[1]) / 2];\r\n    }\r\n    else if (g.touch0) p = g.touch0[0], l = g.touch0[1];\r\n    else return;\r\n    g.zoom(\"touch\", constrain(translate(t, p, l), g.extent, translateExtent));\r\n  }\r\n\r\n  function touchended() {\r\n    if (!this.__zooming) return;\r\n    var g = gesture(this, arguments),\r\n        touches = exports.event.changedTouches,\r\n        n = touches.length, i, t;\r\n\r\n    nopropagation$2();\r\n    if (touchending) clearTimeout(touchending);\r\n    touchending = setTimeout(function() { touchending = null; }, touchDelay);\r\n    for (i = 0; i < n; ++i) {\r\n      t = touches[i];\r\n      if (g.touch0 && g.touch0[2] === t.identifier) delete g.touch0;\r\n      else if (g.touch1 && g.touch1[2] === t.identifier) delete g.touch1;\r\n    }\r\n    if (g.touch1 && !g.touch0) g.touch0 = g.touch1, delete g.touch1;\r\n    if (g.touch0) g.touch0[1] = this.__zoom.invert(g.touch0[0]);\r\n    else {\r\n      g.end();\r\n      // If this was a dbltap, reroute to the (optional) dblclick.zoom handler.\r\n      if (g.taps === 2) {\r\n        var p = select(this).on(\"dblclick.zoom\");\r\n        if (p) p.apply(this, arguments);\r\n      }\r\n    }\r\n  }\r\n\r\n  zoom.wheelDelta = function(_) {\r\n    return arguments.length ? (wheelDelta = typeof _ === \"function\" ? _ : constant$d(+_), zoom) : wheelDelta;\r\n  };\r\n\r\n  zoom.filter = function(_) {\r\n    return arguments.length ? (filter = typeof _ === \"function\" ? _ : constant$d(!!_), zoom) : filter;\r\n  };\r\n\r\n  zoom.touchable = function(_) {\r\n    return arguments.length ? (touchable = typeof _ === \"function\" ? _ : constant$d(!!_), zoom) : touchable;\r\n  };\r\n\r\n  zoom.extent = function(_) {\r\n    return arguments.length ? (extent = typeof _ === \"function\" ? _ : constant$d([[+_[0][0], +_[0][1]], [+_[1][0], +_[1][1]]]), zoom) : extent;\r\n  };\r\n\r\n  zoom.scaleExtent = function(_) {\r\n    return arguments.length ? (scaleExtent[0] = +_[0], scaleExtent[1] = +_[1], zoom) : [scaleExtent[0], scaleExtent[1]];\r\n  };\r\n\r\n  zoom.translateExtent = function(_) {\r\n    return arguments.length ? (translateExtent[0][0] = +_[0][0], translateExtent[1][0] = +_[1][0], translateExtent[0][1] = +_[0][1], translateExtent[1][1] = +_[1][1], zoom) : [[translateExtent[0][0], translateExtent[0][1]], [translateExtent[1][0], translateExtent[1][1]]];\r\n  };\r\n\r\n  zoom.constrain = function(_) {\r\n    return arguments.length ? (constrain = _, zoom) : constrain;\r\n  };\r\n\r\n  zoom.duration = function(_) {\r\n    return arguments.length ? (duration = +_, zoom) : duration;\r\n  };\r\n\r\n  zoom.interpolate = function(_) {\r\n    return arguments.length ? (interpolate = _, zoom) : interpolate;\r\n  };\r\n\r\n  zoom.on = function() {\r\n    var value = listeners.on.apply(listeners, arguments);\r\n    return value === listeners ? zoom : value;\r\n  };\r\n\r\n  zoom.clickDistance = function(_) {\r\n    return arguments.length ? (clickDistance2 = (_ = +_) * _, zoom) : Math.sqrt(clickDistance2);\r\n  };\r\n\r\n  return zoom;\r\n}\r\n\r\nexports.FormatSpecifier = FormatSpecifier;\r\nexports.active = active;\r\nexports.arc = arc;\r\nexports.area = area$3;\r\nexports.areaRadial = areaRadial;\r\nexports.ascending = ascending;\r\nexports.autoType = autoType;\r\nexports.axisBottom = axisBottom;\r\nexports.axisLeft = axisLeft;\r\nexports.axisRight = axisRight;\r\nexports.axisTop = axisTop;\r\nexports.bisect = bisectRight;\r\nexports.bisectLeft = bisectLeft;\r\nexports.bisectRight = bisectRight;\r\nexports.bisector = bisector;\r\nexports.blob = blob;\r\nexports.brush = brush;\r\nexports.brushSelection = brushSelection;\r\nexports.brushX = brushX;\r\nexports.brushY = brushY;\r\nexports.buffer = buffer;\r\nexports.chord = chord;\r\nexports.clientPoint = point;\r\nexports.cluster = cluster;\r\nexports.color = color;\r\nexports.contourDensity = density;\r\nexports.contours = contours;\r\nexports.create = create;\r\nexports.creator = creator;\r\nexports.cross = cross;\r\nexports.csv = csv$1;\r\nexports.csvFormat = csvFormat;\r\nexports.csvFormatBody = csvFormatBody;\r\nexports.csvFormatRow = csvFormatRow;\r\nexports.csvFormatRows = csvFormatRows;\r\nexports.csvFormatValue = csvFormatValue;\r\nexports.csvParse = csvParse;\r\nexports.csvParseRows = csvParseRows;\r\nexports.cubehelix = cubehelix;\r\nexports.curveBasis = basis$2;\r\nexports.curveBasisClosed = basisClosed$1;\r\nexports.curveBasisOpen = basisOpen;\r\nexports.curveBundle = bundle;\r\nexports.curveCardinal = cardinal;\r\nexports.curveCardinalClosed = cardinalClosed;\r\nexports.curveCardinalOpen = cardinalOpen;\r\nexports.curveCatmullRom = catmullRom;\r\nexports.curveCatmullRomClosed = catmullRomClosed;\r\nexports.curveCatmullRomOpen = catmullRomOpen;\r\nexports.curveLinear = curveLinear;\r\nexports.curveLinearClosed = linearClosed;\r\nexports.curveMonotoneX = monotoneX;\r\nexports.curveMonotoneY = monotoneY;\r\nexports.curveNatural = natural;\r\nexports.curveStep = step;\r\nexports.curveStepAfter = stepAfter;\r\nexports.curveStepBefore = stepBefore;\r\nexports.customEvent = customEvent;\r\nexports.descending = descending;\r\nexports.deviation = deviation;\r\nexports.dispatch = dispatch;\r\nexports.drag = drag;\r\nexports.dragDisable = dragDisable;\r\nexports.dragEnable = yesdrag;\r\nexports.dsv = dsv;\r\nexports.dsvFormat = dsvFormat;\r\nexports.easeBack = backInOut;\r\nexports.easeBackIn = backIn;\r\nexports.easeBackInOut = backInOut;\r\nexports.easeBackOut = backOut;\r\nexports.easeBounce = bounceOut;\r\nexports.easeBounceIn = bounceIn;\r\nexports.easeBounceInOut = bounceInOut;\r\nexports.easeBounceOut = bounceOut;\r\nexports.easeCircle = circleInOut;\r\nexports.easeCircleIn = circleIn;\r\nexports.easeCircleInOut = circleInOut;\r\nexports.easeCircleOut = circleOut;\r\nexports.easeCubic = cubicInOut;\r\nexports.easeCubicIn = cubicIn;\r\nexports.easeCubicInOut = cubicInOut;\r\nexports.easeCubicOut = cubicOut;\r\nexports.easeElastic = elasticOut;\r\nexports.easeElasticIn = elasticIn;\r\nexports.easeElasticInOut = elasticInOut;\r\nexports.easeElasticOut = elasticOut;\r\nexports.easeExp = expInOut;\r\nexports.easeExpIn = expIn;\r\nexports.easeExpInOut = expInOut;\r\nexports.easeExpOut = expOut;\r\nexports.easeLinear = linear$1;\r\nexports.easePoly = polyInOut;\r\nexports.easePolyIn = polyIn;\r\nexports.easePolyInOut = polyInOut;\r\nexports.easePolyOut = polyOut;\r\nexports.easeQuad = quadInOut;\r\nexports.easeQuadIn = quadIn;\r\nexports.easeQuadInOut = quadInOut;\r\nexports.easeQuadOut = quadOut;\r\nexports.easeSin = sinInOut;\r\nexports.easeSinIn = sinIn;\r\nexports.easeSinInOut = sinInOut;\r\nexports.easeSinOut = sinOut;\r\nexports.entries = entries;\r\nexports.extent = extent;\r\nexports.forceCenter = center$1;\r\nexports.forceCollide = collide;\r\nexports.forceLink = link;\r\nexports.forceManyBody = manyBody;\r\nexports.forceRadial = radial;\r\nexports.forceSimulation = simulation;\r\nexports.forceX = x$2;\r\nexports.forceY = y$2;\r\nexports.formatDefaultLocale = defaultLocale;\r\nexports.formatLocale = formatLocale;\r\nexports.formatSpecifier = formatSpecifier;\r\nexports.geoAlbers = albers;\r\nexports.geoAlbersUsa = albersUsa;\r\nexports.geoArea = area$1;\r\nexports.geoAzimuthalEqualArea = azimuthalEqualArea;\r\nexports.geoAzimuthalEqualAreaRaw = azimuthalEqualAreaRaw;\r\nexports.geoAzimuthalEquidistant = azimuthalEquidistant;\r\nexports.geoAzimuthalEquidistantRaw = azimuthalEquidistantRaw;\r\nexports.geoBounds = bounds;\r\nexports.geoCentroid = centroid;\r\nexports.geoCircle = circle;\r\nexports.geoClipAntimeridian = clipAntimeridian;\r\nexports.geoClipCircle = clipCircle;\r\nexports.geoClipExtent = extent$1;\r\nexports.geoClipRectangle = clipRectangle;\r\nexports.geoConicConformal = conicConformal;\r\nexports.geoConicConformalRaw = conicConformalRaw;\r\nexports.geoConicEqualArea = conicEqualArea;\r\nexports.geoConicEqualAreaRaw = conicEqualAreaRaw;\r\nexports.geoConicEquidistant = conicEquidistant;\r\nexports.geoConicEquidistantRaw = conicEquidistantRaw;\r\nexports.geoContains = contains$1;\r\nexports.geoDistance = distance;\r\nexports.geoEqualEarth = equalEarth;\r\nexports.geoEqualEarthRaw = equalEarthRaw;\r\nexports.geoEquirectangular = equirectangular;\r\nexports.geoEquirectangularRaw = equirectangularRaw;\r\nexports.geoGnomonic = gnomonic;\r\nexports.geoGnomonicRaw = gnomonicRaw;\r\nexports.geoGraticule = graticule;\r\nexports.geoGraticule10 = graticule10;\r\nexports.geoIdentity = identity$5;\r\nexports.geoInterpolate = interpolate$1;\r\nexports.geoLength = length$1;\r\nexports.geoMercator = mercator;\r\nexports.geoMercatorRaw = mercatorRaw;\r\nexports.geoNaturalEarth1 = naturalEarth1;\r\nexports.geoNaturalEarth1Raw = naturalEarth1Raw;\r\nexports.geoOrthographic = orthographic;\r\nexports.geoOrthographicRaw = orthographicRaw;\r\nexports.geoPath = index$1;\r\nexports.geoProjection = projection;\r\nexports.geoProjectionMutator = projectionMutator;\r\nexports.geoRotation = rotation;\r\nexports.geoStereographic = stereographic;\r\nexports.geoStereographicRaw = stereographicRaw;\r\nexports.geoStream = geoStream;\r\nexports.geoTransform = transform;\r\nexports.geoTransverseMercator = transverseMercator;\r\nexports.geoTransverseMercatorRaw = transverseMercatorRaw;\r\nexports.gray = gray;\r\nexports.hcl = hcl;\r\nexports.hierarchy = hierarchy;\r\nexports.histogram = histogram;\r\nexports.hsl = hsl;\r\nexports.html = html;\r\nexports.image = image;\r\nexports.interpolate = interpolateValue;\r\nexports.interpolateArray = array$1;\r\nexports.interpolateBasis = basis$1;\r\nexports.interpolateBasisClosed = basisClosed;\r\nexports.interpolateBlues = Blues;\r\nexports.interpolateBrBG = BrBG;\r\nexports.interpolateBuGn = BuGn;\r\nexports.interpolateBuPu = BuPu;\r\nexports.interpolateCividis = cividis;\r\nexports.interpolateCool = cool;\r\nexports.interpolateCubehelix = cubehelix$2;\r\nexports.interpolateCubehelixDefault = cubehelix$3;\r\nexports.interpolateCubehelixLong = cubehelixLong;\r\nexports.interpolateDate = date;\r\nexports.interpolateDiscrete = discrete;\r\nexports.interpolateGnBu = GnBu;\r\nexports.interpolateGreens = Greens;\r\nexports.interpolateGreys = Greys;\r\nexports.interpolateHcl = hcl$2;\r\nexports.interpolateHclLong = hclLong;\r\nexports.interpolateHsl = hsl$2;\r\nexports.interpolateHslLong = hslLong;\r\nexports.interpolateHue = hue$1;\r\nexports.interpolateInferno = inferno;\r\nexports.interpolateLab = lab$1;\r\nexports.interpolateMagma = magma;\r\nexports.interpolateNumber = interpolateNumber;\r\nexports.interpolateNumberArray = numberArray;\r\nexports.interpolateObject = object;\r\nexports.interpolateOrRd = OrRd;\r\nexports.interpolateOranges = Oranges;\r\nexports.interpolatePRGn = PRGn;\r\nexports.interpolatePiYG = PiYG;\r\nexports.interpolatePlasma = plasma;\r\nexports.interpolatePuBu = PuBu;\r\nexports.interpolatePuBuGn = PuBuGn;\r\nexports.interpolatePuOr = PuOr;\r\nexports.interpolatePuRd = PuRd;\r\nexports.interpolatePurples = Purples;\r\nexports.interpolateRainbow = rainbow;\r\nexports.interpolateRdBu = RdBu;\r\nexports.interpolateRdGy = RdGy;\r\nexports.interpolateRdPu = RdPu;\r\nexports.interpolateRdYlBu = RdYlBu;\r\nexports.interpolateRdYlGn = RdYlGn;\r\nexports.interpolateReds = Reds;\r\nexports.interpolateRgb = interpolateRgb;\r\nexports.interpolateRgbBasis = rgbBasis;\r\nexports.interpolateRgbBasisClosed = rgbBasisClosed;\r\nexports.interpolateRound = interpolateRound;\r\nexports.interpolateSinebow = sinebow;\r\nexports.interpolateSpectral = Spectral;\r\nexports.interpolateString = interpolateString;\r\nexports.interpolateTransformCss = interpolateTransformCss;\r\nexports.interpolateTransformSvg = interpolateTransformSvg;\r\nexports.interpolateTurbo = turbo;\r\nexports.interpolateViridis = viridis;\r\nexports.interpolateWarm = warm;\r\nexports.interpolateYlGn = YlGn;\r\nexports.interpolateYlGnBu = YlGnBu;\r\nexports.interpolateYlOrBr = YlOrBr;\r\nexports.interpolateYlOrRd = YlOrRd;\r\nexports.interpolateZoom = interpolateZoom;\r\nexports.interrupt = interrupt;\r\nexports.interval = interval$1;\r\nexports.isoFormat = formatIso;\r\nexports.isoParse = parseIso;\r\nexports.json = json;\r\nexports.keys = keys;\r\nexports.lab = lab;\r\nexports.lch = lch;\r\nexports.line = line;\r\nexports.lineRadial = lineRadial$1;\r\nexports.linkHorizontal = linkHorizontal;\r\nexports.linkRadial = linkRadial;\r\nexports.linkVertical = linkVertical;\r\nexports.local = local;\r\nexports.map = map$1;\r\nexports.matcher = matcher;\r\nexports.max = max;\r\nexports.mean = mean;\r\nexports.median = median;\r\nexports.merge = merge;\r\nexports.min = min;\r\nexports.mouse = mouse;\r\nexports.namespace = namespace;\r\nexports.namespaces = namespaces;\r\nexports.nest = nest;\r\nexports.now = now;\r\nexports.pack = index$2;\r\nexports.packEnclose = enclose;\r\nexports.packSiblings = siblings;\r\nexports.pairs = pairs;\r\nexports.partition = partition;\r\nexports.path = path;\r\nexports.permute = permute;\r\nexports.pie = pie;\r\nexports.piecewise = piecewise;\r\nexports.pointRadial = pointRadial;\r\nexports.polygonArea = area$2;\r\nexports.polygonCentroid = centroid$1;\r\nexports.polygonContains = contains$2;\r\nexports.polygonHull = hull;\r\nexports.polygonLength = length$2;\r\nexports.precisionFixed = precisionFixed;\r\nexports.precisionPrefix = precisionPrefix;\r\nexports.precisionRound = precisionRound;\r\nexports.quadtree = quadtree;\r\nexports.quantile = threshold;\r\nexports.quantize = quantize;\r\nexports.radialArea = areaRadial;\r\nexports.radialLine = lineRadial$1;\r\nexports.randomBates = bates;\r\nexports.randomExponential = exponential$1;\r\nexports.randomIrwinHall = irwinHall;\r\nexports.randomLogNormal = logNormal;\r\nexports.randomNormal = normal;\r\nexports.randomUniform = uniform;\r\nexports.range = sequence;\r\nexports.rgb = rgb;\r\nexports.ribbon = ribbon;\r\nexports.scaleBand = band;\r\nexports.scaleDiverging = diverging;\r\nexports.scaleDivergingLog = divergingLog;\r\nexports.scaleDivergingPow = divergingPow;\r\nexports.scaleDivergingSqrt = divergingSqrt;\r\nexports.scaleDivergingSymlog = divergingSymlog;\r\nexports.scaleIdentity = identity$7;\r\nexports.scaleImplicit = implicit;\r\nexports.scaleLinear = linear$2;\r\nexports.scaleLog = log$1;\r\nexports.scaleOrdinal = ordinal;\r\nexports.scalePoint = point$1;\r\nexports.scalePow = pow$1;\r\nexports.scaleQuantile = quantile;\r\nexports.scaleQuantize = quantize$1;\r\nexports.scaleSequential = sequential;\r\nexports.scaleSequentialLog = sequentialLog;\r\nexports.scaleSequentialPow = sequentialPow;\r\nexports.scaleSequentialQuantile = sequentialQuantile;\r\nexports.scaleSequentialSqrt = sequentialSqrt;\r\nexports.scaleSequentialSymlog = sequentialSymlog;\r\nexports.scaleSqrt = sqrt$1;\r\nexports.scaleSymlog = symlog;\r\nexports.scaleThreshold = threshold$1;\r\nexports.scaleTime = time;\r\nexports.scaleUtc = utcTime;\r\nexports.scan = scan;\r\nexports.schemeAccent = Accent;\r\nexports.schemeBlues = scheme$l;\r\nexports.schemeBrBG = scheme;\r\nexports.schemeBuGn = scheme$9;\r\nexports.schemeBuPu = scheme$a;\r\nexports.schemeCategory10 = category10;\r\nexports.schemeDark2 = Dark2;\r\nexports.schemeGnBu = scheme$b;\r\nexports.schemeGreens = scheme$m;\r\nexports.schemeGreys = scheme$n;\r\nexports.schemeOrRd = scheme$c;\r\nexports.schemeOranges = scheme$q;\r\nexports.schemePRGn = scheme$1;\r\nexports.schemePaired = Paired;\r\nexports.schemePastel1 = Pastel1;\r\nexports.schemePastel2 = Pastel2;\r\nexports.schemePiYG = scheme$2;\r\nexports.schemePuBu = scheme$e;\r\nexports.schemePuBuGn = scheme$d;\r\nexports.schemePuOr = scheme$3;\r\nexports.schemePuRd = scheme$f;\r\nexports.schemePurples = scheme$o;\r\nexports.schemeRdBu = scheme$4;\r\nexports.schemeRdGy = scheme$5;\r\nexports.schemeRdPu = scheme$g;\r\nexports.schemeRdYlBu = scheme$6;\r\nexports.schemeRdYlGn = scheme$7;\r\nexports.schemeReds = scheme$p;\r\nexports.schemeSet1 = Set1;\r\nexports.schemeSet2 = Set2;\r\nexports.schemeSet3 = Set3;\r\nexports.schemeSpectral = scheme$8;\r\nexports.schemeTableau10 = Tableau10;\r\nexports.schemeYlGn = scheme$i;\r\nexports.schemeYlGnBu = scheme$h;\r\nexports.schemeYlOrBr = scheme$j;\r\nexports.schemeYlOrRd = scheme$k;\r\nexports.select = select;\r\nexports.selectAll = selectAll;\r\nexports.selection = selection;\r\nexports.selector = selector;\r\nexports.selectorAll = selectorAll;\r\nexports.set = set$2;\r\nexports.shuffle = shuffle;\r\nexports.stack = stack;\r\nexports.stackOffsetDiverging = diverging$1;\r\nexports.stackOffsetExpand = expand;\r\nexports.stackOffsetNone = none$1;\r\nexports.stackOffsetSilhouette = silhouette;\r\nexports.stackOffsetWiggle = wiggle;\r\nexports.stackOrderAppearance = appearance;\r\nexports.stackOrderAscending = ascending$3;\r\nexports.stackOrderDescending = descending$2;\r\nexports.stackOrderInsideOut = insideOut;\r\nexports.stackOrderNone = none$2;\r\nexports.stackOrderReverse = reverse;\r\nexports.stratify = stratify;\r\nexports.style = styleValue;\r\nexports.sum = sum;\r\nexports.svg = svg;\r\nexports.symbol = symbol;\r\nexports.symbolCircle = circle$2;\r\nexports.symbolCross = cross$2;\r\nexports.symbolDiamond = diamond;\r\nexports.symbolSquare = square;\r\nexports.symbolStar = star;\r\nexports.symbolTriangle = triangle;\r\nexports.symbolWye = wye;\r\nexports.symbols = symbols;\r\nexports.text = text;\r\nexports.thresholdFreedmanDiaconis = freedmanDiaconis;\r\nexports.thresholdScott = scott;\r\nexports.thresholdSturges = thresholdSturges;\r\nexports.tickFormat = tickFormat;\r\nexports.tickIncrement = tickIncrement;\r\nexports.tickStep = tickStep;\r\nexports.ticks = ticks;\r\nexports.timeDay = day;\r\nexports.timeDays = days;\r\nexports.timeFormatDefaultLocale = defaultLocale$1;\r\nexports.timeFormatLocale = formatLocale$1;\r\nexports.timeFriday = friday;\r\nexports.timeFridays = fridays;\r\nexports.timeHour = hour;\r\nexports.timeHours = hours;\r\nexports.timeInterval = newInterval;\r\nexports.timeMillisecond = millisecond;\r\nexports.timeMilliseconds = milliseconds;\r\nexports.timeMinute = minute;\r\nexports.timeMinutes = minutes;\r\nexports.timeMonday = monday;\r\nexports.timeMondays = mondays;\r\nexports.timeMonth = month;\r\nexports.timeMonths = months;\r\nexports.timeSaturday = saturday;\r\nexports.timeSaturdays = saturdays;\r\nexports.timeSecond = second;\r\nexports.timeSeconds = seconds;\r\nexports.timeSunday = sunday;\r\nexports.timeSundays = sundays;\r\nexports.timeThursday = thursday;\r\nexports.timeThursdays = thursdays;\r\nexports.timeTuesday = tuesday;\r\nexports.timeTuesdays = tuesdays;\r\nexports.timeWednesday = wednesday;\r\nexports.timeWednesdays = wednesdays;\r\nexports.timeWeek = sunday;\r\nexports.timeWeeks = sundays;\r\nexports.timeYear = year;\r\nexports.timeYears = years;\r\nexports.timeout = timeout$1;\r\nexports.timer = timer;\r\nexports.timerFlush = timerFlush;\r\nexports.touch = touch;\r\nexports.touches = touches;\r\nexports.transition = transition;\r\nexports.transpose = transpose;\r\nexports.tree = tree;\r\nexports.treemap = index$3;\r\nexports.treemapBinary = binary;\r\nexports.treemapDice = treemapDice;\r\nexports.treemapResquarify = resquarify;\r\nexports.treemapSlice = treemapSlice;\r\nexports.treemapSliceDice = sliceDice;\r\nexports.treemapSquarify = squarify;\r\nexports.tsv = tsv$1;\r\nexports.tsvFormat = tsvFormat;\r\nexports.tsvFormatBody = tsvFormatBody;\r\nexports.tsvFormatRow = tsvFormatRow;\r\nexports.tsvFormatRows = tsvFormatRows;\r\nexports.tsvFormatValue = tsvFormatValue;\r\nexports.tsvParse = tsvParse;\r\nexports.tsvParseRows = tsvParseRows;\r\nexports.utcDay = utcDay;\r\nexports.utcDays = utcDays;\r\nexports.utcFriday = utcFriday;\r\nexports.utcFridays = utcFridays;\r\nexports.utcHour = utcHour;\r\nexports.utcHours = utcHours;\r\nexports.utcMillisecond = millisecond;\r\nexports.utcMilliseconds = milliseconds;\r\nexports.utcMinute = utcMinute;\r\nexports.utcMinutes = utcMinutes;\r\nexports.utcMonday = utcMonday;\r\nexports.utcMondays = utcMondays;\r\nexports.utcMonth = utcMonth;\r\nexports.utcMonths = utcMonths;\r\nexports.utcSaturday = utcSaturday;\r\nexports.utcSaturdays = utcSaturdays;\r\nexports.utcSecond = second;\r\nexports.utcSeconds = seconds;\r\nexports.utcSunday = utcSunday;\r\nexports.utcSundays = utcSundays;\r\nexports.utcThursday = utcThursday;\r\nexports.utcThursdays = utcThursdays;\r\nexports.utcTuesday = utcTuesday;\r\nexports.utcTuesdays = utcTuesdays;\r\nexports.utcWednesday = utcWednesday;\r\nexports.utcWednesdays = utcWednesdays;\r\nexports.utcWeek = utcSunday;\r\nexports.utcWeeks = utcSundays;\r\nexports.utcYear = utcYear;\r\nexports.utcYears = utcYears;\r\nexports.values = values;\r\nexports.variance = variance;\r\nexports.version = version;\r\nexports.voronoi = voronoi;\r\nexports.window = defaultView;\r\nexports.xml = xml;\r\nexports.zip = zip;\r\nexports.zoom = zoom;\r\nexports.zoomIdentity = identity$9;\r\nexports.zoomTransform = transform$1;\r\n\r\nreturn skylark.attach(\"intg.d3\",exports);\r\n\r\n});\ndefine('skylark-d3/main',[\r\n\t\"./d3\"\r\n],function(d3){\r\n\treturn d3;\r\n});\ndefine('skylark-d3', ['skylark-d3/main'], function (main) { return main; });\n\n"]}